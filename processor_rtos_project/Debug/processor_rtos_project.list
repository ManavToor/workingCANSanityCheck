
processor_rtos_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007414  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  080076e4  080076e4  000176e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080077b4  080077b4  000177b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080077bc  080077bc  000177bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080077c0  080077c0  000177c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000060  24000000  080077c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000340  24000060  08007824  00020060  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240003a0  08007824  000203a0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001b670  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002c15  00000000  00000000  0003b741  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001560  00000000  00000000  0003e358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000010c1  00000000  00000000  0003f8b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00035884  00000000  00000000  00040979  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001a89f  00000000  00000000  000761fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001608d5  00000000  00000000  00090a9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000061f0  00000000  00000000  001f1374  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000072  00000000  00000000  001f7564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000060 	.word	0x24000060
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080076cc 	.word	0x080076cc

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000064 	.word	0x24000064
 800030c:	080076cc 	.word	0x080076cc

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b970 	b.w	80006a8 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9e08      	ldr	r6, [sp, #32]
 80003e6:	460d      	mov	r5, r1
 80003e8:	4604      	mov	r4, r0
 80003ea:	460f      	mov	r7, r1
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d14a      	bne.n	8000486 <__udivmoddi4+0xa6>
 80003f0:	428a      	cmp	r2, r1
 80003f2:	4694      	mov	ip, r2
 80003f4:	d965      	bls.n	80004c2 <__udivmoddi4+0xe2>
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	b143      	cbz	r3, 800040e <__udivmoddi4+0x2e>
 80003fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000400:	f1c3 0220 	rsb	r2, r3, #32
 8000404:	409f      	lsls	r7, r3
 8000406:	fa20 f202 	lsr.w	r2, r0, r2
 800040a:	4317      	orrs	r7, r2
 800040c:	409c      	lsls	r4, r3
 800040e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000412:	fa1f f58c 	uxth.w	r5, ip
 8000416:	fbb7 f1fe 	udiv	r1, r7, lr
 800041a:	0c22      	lsrs	r2, r4, #16
 800041c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000420:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000424:	fb01 f005 	mul.w	r0, r1, r5
 8000428:	4290      	cmp	r0, r2
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x62>
 800042c:	eb1c 0202 	adds.w	r2, ip, r2
 8000430:	f101 37ff 	add.w	r7, r1, #4294967295
 8000434:	f080 811c 	bcs.w	8000670 <__udivmoddi4+0x290>
 8000438:	4290      	cmp	r0, r2
 800043a:	f240 8119 	bls.w	8000670 <__udivmoddi4+0x290>
 800043e:	3902      	subs	r1, #2
 8000440:	4462      	add	r2, ip
 8000442:	1a12      	subs	r2, r2, r0
 8000444:	b2a4      	uxth	r4, r4
 8000446:	fbb2 f0fe 	udiv	r0, r2, lr
 800044a:	fb0e 2210 	mls	r2, lr, r0, r2
 800044e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000452:	fb00 f505 	mul.w	r5, r0, r5
 8000456:	42a5      	cmp	r5, r4
 8000458:	d90a      	bls.n	8000470 <__udivmoddi4+0x90>
 800045a:	eb1c 0404 	adds.w	r4, ip, r4
 800045e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000462:	f080 8107 	bcs.w	8000674 <__udivmoddi4+0x294>
 8000466:	42a5      	cmp	r5, r4
 8000468:	f240 8104 	bls.w	8000674 <__udivmoddi4+0x294>
 800046c:	4464      	add	r4, ip
 800046e:	3802      	subs	r0, #2
 8000470:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000474:	1b64      	subs	r4, r4, r5
 8000476:	2100      	movs	r1, #0
 8000478:	b11e      	cbz	r6, 8000482 <__udivmoddi4+0xa2>
 800047a:	40dc      	lsrs	r4, r3
 800047c:	2300      	movs	r3, #0
 800047e:	e9c6 4300 	strd	r4, r3, [r6]
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	428b      	cmp	r3, r1
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0xbc>
 800048a:	2e00      	cmp	r6, #0
 800048c:	f000 80ed 	beq.w	800066a <__udivmoddi4+0x28a>
 8000490:	2100      	movs	r1, #0
 8000492:	e9c6 0500 	strd	r0, r5, [r6]
 8000496:	4608      	mov	r0, r1
 8000498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049c:	fab3 f183 	clz	r1, r3
 80004a0:	2900      	cmp	r1, #0
 80004a2:	d149      	bne.n	8000538 <__udivmoddi4+0x158>
 80004a4:	42ab      	cmp	r3, r5
 80004a6:	d302      	bcc.n	80004ae <__udivmoddi4+0xce>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	f200 80f8 	bhi.w	800069e <__udivmoddi4+0x2be>
 80004ae:	1a84      	subs	r4, r0, r2
 80004b0:	eb65 0203 	sbc.w	r2, r5, r3
 80004b4:	2001      	movs	r0, #1
 80004b6:	4617      	mov	r7, r2
 80004b8:	2e00      	cmp	r6, #0
 80004ba:	d0e2      	beq.n	8000482 <__udivmoddi4+0xa2>
 80004bc:	e9c6 4700 	strd	r4, r7, [r6]
 80004c0:	e7df      	b.n	8000482 <__udivmoddi4+0xa2>
 80004c2:	b902      	cbnz	r2, 80004c6 <__udivmoddi4+0xe6>
 80004c4:	deff      	udf	#255	; 0xff
 80004c6:	fab2 f382 	clz	r3, r2
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	f040 8090 	bne.w	80005f0 <__udivmoddi4+0x210>
 80004d0:	1a8a      	subs	r2, r1, r2
 80004d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d6:	fa1f fe8c 	uxth.w	lr, ip
 80004da:	2101      	movs	r1, #1
 80004dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004e0:	fb07 2015 	mls	r0, r7, r5, r2
 80004e4:	0c22      	lsrs	r2, r4, #16
 80004e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ea:	fb0e f005 	mul.w	r0, lr, r5
 80004ee:	4290      	cmp	r0, r2
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x124>
 80004f2:	eb1c 0202 	adds.w	r2, ip, r2
 80004f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x122>
 80004fc:	4290      	cmp	r0, r2
 80004fe:	f200 80cb 	bhi.w	8000698 <__udivmoddi4+0x2b8>
 8000502:	4645      	mov	r5, r8
 8000504:	1a12      	subs	r2, r2, r0
 8000506:	b2a4      	uxth	r4, r4
 8000508:	fbb2 f0f7 	udiv	r0, r2, r7
 800050c:	fb07 2210 	mls	r2, r7, r0, r2
 8000510:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000514:	fb0e fe00 	mul.w	lr, lr, r0
 8000518:	45a6      	cmp	lr, r4
 800051a:	d908      	bls.n	800052e <__udivmoddi4+0x14e>
 800051c:	eb1c 0404 	adds.w	r4, ip, r4
 8000520:	f100 32ff 	add.w	r2, r0, #4294967295
 8000524:	d202      	bcs.n	800052c <__udivmoddi4+0x14c>
 8000526:	45a6      	cmp	lr, r4
 8000528:	f200 80bb 	bhi.w	80006a2 <__udivmoddi4+0x2c2>
 800052c:	4610      	mov	r0, r2
 800052e:	eba4 040e 	sub.w	r4, r4, lr
 8000532:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000536:	e79f      	b.n	8000478 <__udivmoddi4+0x98>
 8000538:	f1c1 0720 	rsb	r7, r1, #32
 800053c:	408b      	lsls	r3, r1
 800053e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000542:	ea4c 0c03 	orr.w	ip, ip, r3
 8000546:	fa05 f401 	lsl.w	r4, r5, r1
 800054a:	fa20 f307 	lsr.w	r3, r0, r7
 800054e:	40fd      	lsrs	r5, r7
 8000550:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000554:	4323      	orrs	r3, r4
 8000556:	fbb5 f8f9 	udiv	r8, r5, r9
 800055a:	fa1f fe8c 	uxth.w	lr, ip
 800055e:	fb09 5518 	mls	r5, r9, r8, r5
 8000562:	0c1c      	lsrs	r4, r3, #16
 8000564:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000568:	fb08 f50e 	mul.w	r5, r8, lr
 800056c:	42a5      	cmp	r5, r4
 800056e:	fa02 f201 	lsl.w	r2, r2, r1
 8000572:	fa00 f001 	lsl.w	r0, r0, r1
 8000576:	d90b      	bls.n	8000590 <__udivmoddi4+0x1b0>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000580:	f080 8088 	bcs.w	8000694 <__udivmoddi4+0x2b4>
 8000584:	42a5      	cmp	r5, r4
 8000586:	f240 8085 	bls.w	8000694 <__udivmoddi4+0x2b4>
 800058a:	f1a8 0802 	sub.w	r8, r8, #2
 800058e:	4464      	add	r4, ip
 8000590:	1b64      	subs	r4, r4, r5
 8000592:	b29d      	uxth	r5, r3
 8000594:	fbb4 f3f9 	udiv	r3, r4, r9
 8000598:	fb09 4413 	mls	r4, r9, r3, r4
 800059c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80005a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80005a4:	45a6      	cmp	lr, r4
 80005a6:	d908      	bls.n	80005ba <__udivmoddi4+0x1da>
 80005a8:	eb1c 0404 	adds.w	r4, ip, r4
 80005ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80005b0:	d26c      	bcs.n	800068c <__udivmoddi4+0x2ac>
 80005b2:	45a6      	cmp	lr, r4
 80005b4:	d96a      	bls.n	800068c <__udivmoddi4+0x2ac>
 80005b6:	3b02      	subs	r3, #2
 80005b8:	4464      	add	r4, ip
 80005ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005be:	fba3 9502 	umull	r9, r5, r3, r2
 80005c2:	eba4 040e 	sub.w	r4, r4, lr
 80005c6:	42ac      	cmp	r4, r5
 80005c8:	46c8      	mov	r8, r9
 80005ca:	46ae      	mov	lr, r5
 80005cc:	d356      	bcc.n	800067c <__udivmoddi4+0x29c>
 80005ce:	d053      	beq.n	8000678 <__udivmoddi4+0x298>
 80005d0:	b156      	cbz	r6, 80005e8 <__udivmoddi4+0x208>
 80005d2:	ebb0 0208 	subs.w	r2, r0, r8
 80005d6:	eb64 040e 	sbc.w	r4, r4, lr
 80005da:	fa04 f707 	lsl.w	r7, r4, r7
 80005de:	40ca      	lsrs	r2, r1
 80005e0:	40cc      	lsrs	r4, r1
 80005e2:	4317      	orrs	r7, r2
 80005e4:	e9c6 7400 	strd	r7, r4, [r6]
 80005e8:	4618      	mov	r0, r3
 80005ea:	2100      	movs	r1, #0
 80005ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005f0:	f1c3 0120 	rsb	r1, r3, #32
 80005f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005f8:	fa20 f201 	lsr.w	r2, r0, r1
 80005fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000600:	409d      	lsls	r5, r3
 8000602:	432a      	orrs	r2, r5
 8000604:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000608:	fa1f fe8c 	uxth.w	lr, ip
 800060c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000610:	fb07 1510 	mls	r5, r7, r0, r1
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800061a:	fb00 f50e 	mul.w	r5, r0, lr
 800061e:	428d      	cmp	r5, r1
 8000620:	fa04 f403 	lsl.w	r4, r4, r3
 8000624:	d908      	bls.n	8000638 <__udivmoddi4+0x258>
 8000626:	eb1c 0101 	adds.w	r1, ip, r1
 800062a:	f100 38ff 	add.w	r8, r0, #4294967295
 800062e:	d22f      	bcs.n	8000690 <__udivmoddi4+0x2b0>
 8000630:	428d      	cmp	r5, r1
 8000632:	d92d      	bls.n	8000690 <__udivmoddi4+0x2b0>
 8000634:	3802      	subs	r0, #2
 8000636:	4461      	add	r1, ip
 8000638:	1b49      	subs	r1, r1, r5
 800063a:	b292      	uxth	r2, r2
 800063c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000640:	fb07 1115 	mls	r1, r7, r5, r1
 8000644:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000648:	fb05 f10e 	mul.w	r1, r5, lr
 800064c:	4291      	cmp	r1, r2
 800064e:	d908      	bls.n	8000662 <__udivmoddi4+0x282>
 8000650:	eb1c 0202 	adds.w	r2, ip, r2
 8000654:	f105 38ff 	add.w	r8, r5, #4294967295
 8000658:	d216      	bcs.n	8000688 <__udivmoddi4+0x2a8>
 800065a:	4291      	cmp	r1, r2
 800065c:	d914      	bls.n	8000688 <__udivmoddi4+0x2a8>
 800065e:	3d02      	subs	r5, #2
 8000660:	4462      	add	r2, ip
 8000662:	1a52      	subs	r2, r2, r1
 8000664:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000668:	e738      	b.n	80004dc <__udivmoddi4+0xfc>
 800066a:	4631      	mov	r1, r6
 800066c:	4630      	mov	r0, r6
 800066e:	e708      	b.n	8000482 <__udivmoddi4+0xa2>
 8000670:	4639      	mov	r1, r7
 8000672:	e6e6      	b.n	8000442 <__udivmoddi4+0x62>
 8000674:	4610      	mov	r0, r2
 8000676:	e6fb      	b.n	8000470 <__udivmoddi4+0x90>
 8000678:	4548      	cmp	r0, r9
 800067a:	d2a9      	bcs.n	80005d0 <__udivmoddi4+0x1f0>
 800067c:	ebb9 0802 	subs.w	r8, r9, r2
 8000680:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000684:	3b01      	subs	r3, #1
 8000686:	e7a3      	b.n	80005d0 <__udivmoddi4+0x1f0>
 8000688:	4645      	mov	r5, r8
 800068a:	e7ea      	b.n	8000662 <__udivmoddi4+0x282>
 800068c:	462b      	mov	r3, r5
 800068e:	e794      	b.n	80005ba <__udivmoddi4+0x1da>
 8000690:	4640      	mov	r0, r8
 8000692:	e7d1      	b.n	8000638 <__udivmoddi4+0x258>
 8000694:	46d0      	mov	r8, sl
 8000696:	e77b      	b.n	8000590 <__udivmoddi4+0x1b0>
 8000698:	3d02      	subs	r5, #2
 800069a:	4462      	add	r2, ip
 800069c:	e732      	b.n	8000504 <__udivmoddi4+0x124>
 800069e:	4608      	mov	r0, r1
 80006a0:	e70a      	b.n	80004b8 <__udivmoddi4+0xd8>
 80006a2:	4464      	add	r4, ip
 80006a4:	3802      	subs	r0, #2
 80006a6:	e742      	b.n	800052e <__udivmoddi4+0x14e>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b0:	f000 fd06 	bl	80010c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b4:	f000 f83e 	bl	8000734 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b8:	f000 fa0c 	bl	8000ad4 <MX_GPIO_Init>
  MX_UART4_Init();
 80006bc:	f000 f9be 	bl	8000a3c <MX_UART4_Init>
  MX_RTC_Init();
 80006c0:	f000 f92c 	bl	800091c <MX_RTC_Init>
  MX_FDCAN1_Init();
 80006c4:	f000 f8a8 	bl	8000818 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  // STart FDCAN1
  if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK)
 80006c8:	4815      	ldr	r0, [pc, #84]	; (8000720 <main+0x74>)
 80006ca:	f001 f823 	bl	8001714 <HAL_FDCAN_Start>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <main+0x2c>
  {
   Error_Handler();
 80006d4:	f000 fa42 	bl	8000b5c <Error_Handler>
  }

  // Activate the notification for new data in FIFO0 for FDCAN1
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80006d8:	2200      	movs	r2, #0
 80006da:	2101      	movs	r1, #1
 80006dc:	4810      	ldr	r0, [pc, #64]	; (8000720 <main+0x74>)
 80006de:	f001 f89f 	bl	8001820 <HAL_FDCAN_ActivateNotification>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <main+0x40>
  {
    /* Notification Error */
    Error_Handler();
 80006e8:	f000 fa38 	bl	8000b5c <Error_Handler>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  sprintf ((char *)TxData, "CANTX%d", indx++);
 80006ec:	4b0d      	ldr	r3, [pc, #52]	; (8000724 <main+0x78>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	1c5a      	adds	r2, r3, #1
 80006f2:	490c      	ldr	r1, [pc, #48]	; (8000724 <main+0x78>)
 80006f4:	600a      	str	r2, [r1, #0]
 80006f6:	461a      	mov	r2, r3
 80006f8:	490b      	ldr	r1, [pc, #44]	; (8000728 <main+0x7c>)
 80006fa:	480c      	ldr	r0, [pc, #48]	; (800072c <main+0x80>)
 80006fc:	f006 fb42 	bl	8006d84 <siprintf>


	  /*for (int i = 0; i < 12; i++) {
	          TxData[i] = RxData[i];
	      }*/
	  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader1, TxData)!= HAL_OK)
 8000700:	4a0a      	ldr	r2, [pc, #40]	; (800072c <main+0x80>)
 8000702:	490b      	ldr	r1, [pc, #44]	; (8000730 <main+0x84>)
 8000704:	4806      	ldr	r0, [pc, #24]	; (8000720 <main+0x74>)
 8000706:	f001 f830 	bl	800176a <HAL_FDCAN_AddMessageToTxFifoQ>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <main+0x68>
	   {
	    Error_Handler();
 8000710:	f000 fa24 	bl	8000b5c <Error_Handler>
	   }

	   HAL_Delay (1000);
 8000714:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000718:	f000 fd1a 	bl	8001150 <HAL_Delay>
  {
 800071c:	e7e6      	b.n	80006ec <main+0x40>
 800071e:	bf00      	nop
 8000720:	240000ac 	.word	0x240000ac
 8000724:	240000a8 	.word	0x240000a8
 8000728:	080076e4 	.word	0x080076e4
 800072c:	240000a0 	.word	0x240000a0
 8000730:	2400007c 	.word	0x2400007c

08000734 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b09c      	sub	sp, #112	; 0x70
 8000738:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800073e:	224c      	movs	r2, #76	; 0x4c
 8000740:	2100      	movs	r1, #0
 8000742:	4618      	mov	r0, r3
 8000744:	f006 fb3e 	bl	8006dc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000748:	1d3b      	adds	r3, r7, #4
 800074a:	2220      	movs	r2, #32
 800074c:	2100      	movs	r1, #0
 800074e:	4618      	mov	r0, r3
 8000750:	f006 fb38 	bl	8006dc4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000754:	2002      	movs	r0, #2
 8000756:	f001 fca3 	bl	80020a0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800075a:	2300      	movs	r3, #0
 800075c:	603b      	str	r3, [r7, #0]
 800075e:	4b2d      	ldr	r3, [pc, #180]	; (8000814 <SystemClock_Config+0xe0>)
 8000760:	699b      	ldr	r3, [r3, #24]
 8000762:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000766:	4a2b      	ldr	r2, [pc, #172]	; (8000814 <SystemClock_Config+0xe0>)
 8000768:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800076c:	6193      	str	r3, [r2, #24]
 800076e:	4b29      	ldr	r3, [pc, #164]	; (8000814 <SystemClock_Config+0xe0>)
 8000770:	699b      	ldr	r3, [r3, #24]
 8000772:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000776:	603b      	str	r3, [r7, #0]
 8000778:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800077a:	bf00      	nop
 800077c:	4b25      	ldr	r3, [pc, #148]	; (8000814 <SystemClock_Config+0xe0>)
 800077e:	699b      	ldr	r3, [r3, #24]
 8000780:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000784:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000788:	d1f8      	bne.n	800077c <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800078a:	230a      	movs	r3, #10
 800078c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800078e:	2301      	movs	r3, #1
 8000790:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000792:	2340      	movs	r3, #64	; 0x40
 8000794:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000796:	2301      	movs	r3, #1
 8000798:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800079a:	2302      	movs	r3, #2
 800079c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800079e:	2300      	movs	r3, #0
 80007a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007a2:	2304      	movs	r3, #4
 80007a4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 80007a6:	230c      	movs	r3, #12
 80007a8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007aa:	2302      	movs	r3, #2
 80007ac:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80007ae:	2305      	movs	r3, #5
 80007b0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007b2:	2302      	movs	r3, #2
 80007b4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007b6:	230c      	movs	r3, #12
 80007b8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007ba:	2300      	movs	r3, #0
 80007bc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 80007be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007c8:	4618      	mov	r0, r3
 80007ca:	f001 fca3 	bl	8002114 <HAL_RCC_OscConfig>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80007d4:	f000 f9c2 	bl	8000b5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d8:	233f      	movs	r3, #63	; 0x3f
 80007da:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007dc:	2300      	movs	r3, #0
 80007de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007e0:	2300      	movs	r3, #0
 80007e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007e4:	2300      	movs	r3, #0
 80007e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80007e8:	2300      	movs	r3, #0
 80007ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007ec:	2340      	movs	r3, #64	; 0x40
 80007ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80007f0:	2300      	movs	r3, #0
 80007f2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80007f4:	2300      	movs	r3, #0
 80007f6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007f8:	1d3b      	adds	r3, r7, #4
 80007fa:	2101      	movs	r1, #1
 80007fc:	4618      	mov	r0, r3
 80007fe:	f002 f863 	bl	80028c8 <HAL_RCC_ClockConfig>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000808:	f000 f9a8 	bl	8000b5c <Error_Handler>
  }
}
 800080c:	bf00      	nop
 800080e:	3770      	adds	r7, #112	; 0x70
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	58024800 	.word	0x58024800

08000818 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800081c:	4b3c      	ldr	r3, [pc, #240]	; (8000910 <MX_FDCAN1_Init+0xf8>)
 800081e:	4a3d      	ldr	r2, [pc, #244]	; (8000914 <MX_FDCAN1_Init+0xfc>)
 8000820:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000822:	4b3b      	ldr	r3, [pc, #236]	; (8000910 <MX_FDCAN1_Init+0xf8>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_EXTERNAL_LOOPBACK;
 8000828:	4b39      	ldr	r3, [pc, #228]	; (8000910 <MX_FDCAN1_Init+0xf8>)
 800082a:	2204      	movs	r2, #4
 800082c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 800082e:	4b38      	ldr	r3, [pc, #224]	; (8000910 <MX_FDCAN1_Init+0xf8>)
 8000830:	2201      	movs	r2, #1
 8000832:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000834:	4b36      	ldr	r3, [pc, #216]	; (8000910 <MX_FDCAN1_Init+0xf8>)
 8000836:	2200      	movs	r2, #0
 8000838:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800083a:	4b35      	ldr	r3, [pc, #212]	; (8000910 <MX_FDCAN1_Init+0xf8>)
 800083c:	2200      	movs	r2, #0
 800083e:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 20;
 8000840:	4b33      	ldr	r3, [pc, #204]	; (8000910 <MX_FDCAN1_Init+0xf8>)
 8000842:	2214      	movs	r2, #20
 8000844:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 4;
 8000846:	4b32      	ldr	r3, [pc, #200]	; (8000910 <MX_FDCAN1_Init+0xf8>)
 8000848:	2204      	movs	r2, #4
 800084a:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 4;
 800084c:	4b30      	ldr	r3, [pc, #192]	; (8000910 <MX_FDCAN1_Init+0xf8>)
 800084e:	2204      	movs	r2, #4
 8000850:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 3;
 8000852:	4b2f      	ldr	r3, [pc, #188]	; (8000910 <MX_FDCAN1_Init+0xf8>)
 8000854:	2203      	movs	r2, #3
 8000856:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 4;
 8000858:	4b2d      	ldr	r3, [pc, #180]	; (8000910 <MX_FDCAN1_Init+0xf8>)
 800085a:	2204      	movs	r2, #4
 800085c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 800085e:	4b2c      	ldr	r3, [pc, #176]	; (8000910 <MX_FDCAN1_Init+0xf8>)
 8000860:	2204      	movs	r2, #4
 8000862:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 4;
 8000864:	4b2a      	ldr	r3, [pc, #168]	; (8000910 <MX_FDCAN1_Init+0xf8>)
 8000866:	2204      	movs	r2, #4
 8000868:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800086a:	4b29      	ldr	r3, [pc, #164]	; (8000910 <MX_FDCAN1_Init+0xf8>)
 800086c:	2201      	movs	r2, #1
 800086e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000870:	4b27      	ldr	r3, [pc, #156]	; (8000910 <MX_FDCAN1_Init+0xf8>)
 8000872:	2200      	movs	r2, #0
 8000874:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000876:	4b26      	ldr	r3, [pc, #152]	; (8000910 <MX_FDCAN1_Init+0xf8>)
 8000878:	2200      	movs	r2, #0
 800087a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 800087c:	4b24      	ldr	r3, [pc, #144]	; (8000910 <MX_FDCAN1_Init+0xf8>)
 800087e:	2200      	movs	r2, #0
 8000880:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 64;
 8000882:	4b23      	ldr	r3, [pc, #140]	; (8000910 <MX_FDCAN1_Init+0xf8>)
 8000884:	2240      	movs	r2, #64	; 0x40
 8000886:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000888:	4b21      	ldr	r3, [pc, #132]	; (8000910 <MX_FDCAN1_Init+0xf8>)
 800088a:	2204      	movs	r2, #4
 800088c:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 800088e:	4b20      	ldr	r3, [pc, #128]	; (8000910 <MX_FDCAN1_Init+0xf8>)
 8000890:	2200      	movs	r2, #0
 8000892:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000894:	4b1e      	ldr	r3, [pc, #120]	; (8000910 <MX_FDCAN1_Init+0xf8>)
 8000896:	2204      	movs	r2, #4
 8000898:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 800089a:	4b1d      	ldr	r3, [pc, #116]	; (8000910 <MX_FDCAN1_Init+0xf8>)
 800089c:	2200      	movs	r2, #0
 800089e:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80008a0:	4b1b      	ldr	r3, [pc, #108]	; (8000910 <MX_FDCAN1_Init+0xf8>)
 80008a2:	2204      	movs	r2, #4
 80008a4:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 32;
 80008a6:	4b1a      	ldr	r3, [pc, #104]	; (8000910 <MX_FDCAN1_Init+0xf8>)
 80008a8:	2220      	movs	r2, #32
 80008aa:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80008ac:	4b18      	ldr	r3, [pc, #96]	; (8000910 <MX_FDCAN1_Init+0xf8>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 80008b2:	4b17      	ldr	r3, [pc, #92]	; (8000910 <MX_FDCAN1_Init+0xf8>)
 80008b4:	2220      	movs	r2, #32
 80008b6:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80008b8:	4b15      	ldr	r3, [pc, #84]	; (8000910 <MX_FDCAN1_Init+0xf8>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80008be:	4b14      	ldr	r3, [pc, #80]	; (8000910 <MX_FDCAN1_Init+0xf8>)
 80008c0:	2204      	movs	r2, #4
 80008c2:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80008c4:	4812      	ldr	r0, [pc, #72]	; (8000910 <MX_FDCAN1_Init+0xf8>)
 80008c6:	f000 fd47 	bl	8001358 <HAL_FDCAN_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 80008d0:	f000 f944 	bl	8000b5c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  // Configure TX Header for FDCAN1
  TxHeader1.Identifier = 0x11;
 80008d4:	4b10      	ldr	r3, [pc, #64]	; (8000918 <MX_FDCAN1_Init+0x100>)
 80008d6:	2211      	movs	r2, #17
 80008d8:	601a      	str	r2, [r3, #0]
  TxHeader1.IdType = FDCAN_STANDARD_ID;
 80008da:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <MX_FDCAN1_Init+0x100>)
 80008dc:	2200      	movs	r2, #0
 80008de:	605a      	str	r2, [r3, #4]
  TxHeader1.TxFrameType = FDCAN_DATA_FRAME;
 80008e0:	4b0d      	ldr	r3, [pc, #52]	; (8000918 <MX_FDCAN1_Init+0x100>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
  TxHeader1.DataLength = FDCAN_DLC_BYTES_8;
 80008e6:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <MX_FDCAN1_Init+0x100>)
 80008e8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80008ec:	60da      	str	r2, [r3, #12]
  TxHeader1.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80008ee:	4b0a      	ldr	r3, [pc, #40]	; (8000918 <MX_FDCAN1_Init+0x100>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  TxHeader1.BitRateSwitch = FDCAN_BRS_OFF;
 80008f4:	4b08      	ldr	r3, [pc, #32]	; (8000918 <MX_FDCAN1_Init+0x100>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	615a      	str	r2, [r3, #20]
  TxHeader1.FDFormat = FDCAN_CLASSIC_CAN;
 80008fa:	4b07      	ldr	r3, [pc, #28]	; (8000918 <MX_FDCAN1_Init+0x100>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
  TxHeader1.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000900:	4b05      	ldr	r3, [pc, #20]	; (8000918 <MX_FDCAN1_Init+0x100>)
 8000902:	2200      	movs	r2, #0
 8000904:	61da      	str	r2, [r3, #28]
  TxHeader1.MessageMarker = 0;
 8000906:	4b04      	ldr	r3, [pc, #16]	; (8000918 <MX_FDCAN1_Init+0x100>)
 8000908:	2200      	movs	r2, #0
 800090a:	621a      	str	r2, [r3, #32]
  /* USER CODE END FDCAN1_Init 2 */

}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}
 8000910:	240000ac 	.word	0x240000ac
 8000914:	4000a000 	.word	0x4000a000
 8000918:	2400007c 	.word	0x2400007c

0800091c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b090      	sub	sp, #64	; 0x40
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000922:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]
 800092c:	609a      	str	r2, [r3, #8]
 800092e:	60da      	str	r2, [r3, #12]
 8000930:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000932:	2300      	movs	r3, #0
 8000934:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8000936:	463b      	mov	r3, r7
 8000938:	2228      	movs	r2, #40	; 0x28
 800093a:	2100      	movs	r1, #0
 800093c:	4618      	mov	r0, r3
 800093e:	f006 fa41 	bl	8006dc4 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000942:	4b3c      	ldr	r3, [pc, #240]	; (8000a34 <MX_RTC_Init+0x118>)
 8000944:	4a3c      	ldr	r2, [pc, #240]	; (8000a38 <MX_RTC_Init+0x11c>)
 8000946:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000948:	4b3a      	ldr	r3, [pc, #232]	; (8000a34 <MX_RTC_Init+0x118>)
 800094a:	2200      	movs	r2, #0
 800094c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800094e:	4b39      	ldr	r3, [pc, #228]	; (8000a34 <MX_RTC_Init+0x118>)
 8000950:	227f      	movs	r2, #127	; 0x7f
 8000952:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000954:	4b37      	ldr	r3, [pc, #220]	; (8000a34 <MX_RTC_Init+0x118>)
 8000956:	22ff      	movs	r2, #255	; 0xff
 8000958:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800095a:	4b36      	ldr	r3, [pc, #216]	; (8000a34 <MX_RTC_Init+0x118>)
 800095c:	2200      	movs	r2, #0
 800095e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000960:	4b34      	ldr	r3, [pc, #208]	; (8000a34 <MX_RTC_Init+0x118>)
 8000962:	2200      	movs	r2, #0
 8000964:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000966:	4b33      	ldr	r3, [pc, #204]	; (8000a34 <MX_RTC_Init+0x118>)
 8000968:	2200      	movs	r2, #0
 800096a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800096c:	4b31      	ldr	r3, [pc, #196]	; (8000a34 <MX_RTC_Init+0x118>)
 800096e:	2200      	movs	r2, #0
 8000970:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000972:	4830      	ldr	r0, [pc, #192]	; (8000a34 <MX_RTC_Init+0x118>)
 8000974:	f004 f938 	bl	8004be8 <HAL_RTC_Init>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 800097e:	f000 f8ed 	bl	8000b5c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000982:	2300      	movs	r3, #0
 8000984:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8000988:	2300      	movs	r3, #0
 800098a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 800098e:	2300      	movs	r3, #0
 8000990:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000994:	2300      	movs	r3, #0
 8000996:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000998:	2300      	movs	r3, #0
 800099a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800099c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009a0:	2201      	movs	r2, #1
 80009a2:	4619      	mov	r1, r3
 80009a4:	4823      	ldr	r0, [pc, #140]	; (8000a34 <MX_RTC_Init+0x118>)
 80009a6:	f004 f9a1 	bl	8004cec <HAL_RTC_SetTime>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 80009b0:	f000 f8d4 	bl	8000b5c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80009b4:	2301      	movs	r3, #1
 80009b6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 80009ba:	2301      	movs	r3, #1
 80009bc:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 80009c0:	2301      	movs	r3, #1
 80009c2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 80009c6:	2300      	movs	r3, #0
 80009c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80009cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009d0:	2201      	movs	r2, #1
 80009d2:	4619      	mov	r1, r3
 80009d4:	4817      	ldr	r0, [pc, #92]	; (8000a34 <MX_RTC_Init+0x118>)
 80009d6:	f004 fa27 	bl	8004e28 <HAL_RTC_SetDate>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 80009e0:	f000 f8bc 	bl	8000b5c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80009e4:	2300      	movs	r3, #0
 80009e6:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80009e8:	2300      	movs	r3, #0
 80009ea:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80009f4:	2300      	movs	r3, #0
 80009f6:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80009f8:	2300      	movs	r3, #0
 80009fa:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80009fc:	2300      	movs	r3, #0
 80009fe:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000a04:	2300      	movs	r3, #0
 8000a06:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000a0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a12:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000a14:	463b      	mov	r3, r7
 8000a16:	2201      	movs	r2, #1
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4806      	ldr	r0, [pc, #24]	; (8000a34 <MX_RTC_Init+0x118>)
 8000a1c:	f004 fa8c 	bl	8004f38 <HAL_RTC_SetAlarm_IT>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 8000a26:	f000 f899 	bl	8000b5c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a2a:	bf00      	nop
 8000a2c:	3740      	adds	r7, #64	; 0x40
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	2400014c 	.word	0x2400014c
 8000a38:	58004000 	.word	0x58004000

08000a3c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000a40:	4b22      	ldr	r3, [pc, #136]	; (8000acc <MX_UART4_Init+0x90>)
 8000a42:	4a23      	ldr	r2, [pc, #140]	; (8000ad0 <MX_UART4_Init+0x94>)
 8000a44:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000a46:	4b21      	ldr	r3, [pc, #132]	; (8000acc <MX_UART4_Init+0x90>)
 8000a48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a4c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000a4e:	4b1f      	ldr	r3, [pc, #124]	; (8000acc <MX_UART4_Init+0x90>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000a54:	4b1d      	ldr	r3, [pc, #116]	; (8000acc <MX_UART4_Init+0x90>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000a5a:	4b1c      	ldr	r3, [pc, #112]	; (8000acc <MX_UART4_Init+0x90>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000a60:	4b1a      	ldr	r3, [pc, #104]	; (8000acc <MX_UART4_Init+0x90>)
 8000a62:	220c      	movs	r2, #12
 8000a64:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a66:	4b19      	ldr	r3, [pc, #100]	; (8000acc <MX_UART4_Init+0x90>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a6c:	4b17      	ldr	r3, [pc, #92]	; (8000acc <MX_UART4_Init+0x90>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a72:	4b16      	ldr	r3, [pc, #88]	; (8000acc <MX_UART4_Init+0x90>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a78:	4b14      	ldr	r3, [pc, #80]	; (8000acc <MX_UART4_Init+0x90>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a7e:	4b13      	ldr	r3, [pc, #76]	; (8000acc <MX_UART4_Init+0x90>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000a84:	4811      	ldr	r0, [pc, #68]	; (8000acc <MX_UART4_Init+0x90>)
 8000a86:	f004 ffa3 	bl	80059d0 <HAL_UART_Init>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000a90:	f000 f864 	bl	8000b5c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a94:	2100      	movs	r1, #0
 8000a96:	480d      	ldr	r0, [pc, #52]	; (8000acc <MX_UART4_Init+0x90>)
 8000a98:	f006 f8a9 	bl	8006bee <HAL_UARTEx_SetTxFifoThreshold>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000aa2:	f000 f85b 	bl	8000b5c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	4808      	ldr	r0, [pc, #32]	; (8000acc <MX_UART4_Init+0x90>)
 8000aaa:	f006 f8de 	bl	8006c6a <HAL_UARTEx_SetRxFifoThreshold>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000ab4:	f000 f852 	bl	8000b5c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000ab8:	4804      	ldr	r0, [pc, #16]	; (8000acc <MX_UART4_Init+0x90>)
 8000aba:	f006 f85f 	bl	8006b7c <HAL_UARTEx_DisableFifoMode>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000ac4:	f000 f84a 	bl	8000b5c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000ac8:	bf00      	nop
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	24000170 	.word	0x24000170
 8000ad0:	40004c00 	.word	0x40004c00

08000ad4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b088      	sub	sp, #32
 8000ad8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ada:	f107 030c 	add.w	r3, r7, #12
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	605a      	str	r2, [r3, #4]
 8000ae4:	609a      	str	r2, [r3, #8]
 8000ae6:	60da      	str	r2, [r3, #12]
 8000ae8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aea:	4b1a      	ldr	r3, [pc, #104]	; (8000b54 <MX_GPIO_Init+0x80>)
 8000aec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af0:	4a18      	ldr	r2, [pc, #96]	; (8000b54 <MX_GPIO_Init+0x80>)
 8000af2:	f043 0301 	orr.w	r3, r3, #1
 8000af6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000afa:	4b16      	ldr	r3, [pc, #88]	; (8000b54 <MX_GPIO_Init+0x80>)
 8000afc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b00:	f003 0301 	and.w	r3, r3, #1
 8000b04:	60bb      	str	r3, [r7, #8]
 8000b06:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b08:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <MX_GPIO_Init+0x80>)
 8000b0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b0e:	4a11      	ldr	r2, [pc, #68]	; (8000b54 <MX_GPIO_Init+0x80>)
 8000b10:	f043 0302 	orr.w	r3, r3, #2
 8000b14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b18:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <MX_GPIO_Init+0x80>)
 8000b1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b1e:	f003 0302 	and.w	r3, r3, #2
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2120      	movs	r1, #32
 8000b2a:	480b      	ldr	r0, [pc, #44]	; (8000b58 <MX_GPIO_Init+0x84>)
 8000b2c:	f001 fa9e 	bl	800206c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b30:	2320      	movs	r3, #32
 8000b32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b34:	2301      	movs	r3, #1
 8000b36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b40:	f107 030c 	add.w	r3, r7, #12
 8000b44:	4619      	mov	r1, r3
 8000b46:	4804      	ldr	r0, [pc, #16]	; (8000b58 <MX_GPIO_Init+0x84>)
 8000b48:	f001 f8e8 	bl	8001d1c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b4c:	bf00      	nop
 8000b4e:	3720      	adds	r7, #32
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	58024400 	.word	0x58024400
 8000b58:	58020400 	.word	0x58020400

08000b5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b60:	b672      	cpsid	i
}
 8000b62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b64:	e7fe      	b.n	8000b64 <Error_Handler+0x8>
	...

08000b68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b6e:	4b0a      	ldr	r3, [pc, #40]	; (8000b98 <HAL_MspInit+0x30>)
 8000b70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b74:	4a08      	ldr	r2, [pc, #32]	; (8000b98 <HAL_MspInit+0x30>)
 8000b76:	f043 0302 	orr.w	r3, r3, #2
 8000b7a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b7e:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <HAL_MspInit+0x30>)
 8000b80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b84:	f003 0302 	and.w	r3, r3, #2
 8000b88:	607b      	str	r3, [r7, #4]
 8000b8a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b8c:	bf00      	nop
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	58024400 	.word	0x58024400

08000b9c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b0b8      	sub	sp, #224	; 0xe0
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bb4:	f107 0310 	add.w	r3, r7, #16
 8000bb8:	22b8      	movs	r2, #184	; 0xb8
 8000bba:	2100      	movs	r1, #0
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f006 f901 	bl	8006dc4 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4a27      	ldr	r2, [pc, #156]	; (8000c64 <HAL_FDCAN_MspInit+0xc8>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d146      	bne.n	8000c5a <HAL_FDCAN_MspInit+0xbe>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000bcc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000bd0:	f04f 0300 	mov.w	r3, #0
 8000bd4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000bd8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000bdc:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bde:	f107 0310 	add.w	r3, r7, #16
 8000be2:	4618      	mov	r0, r3
 8000be4:	f002 fa3e 	bl	8003064 <HAL_RCCEx_PeriphCLKConfig>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8000bee:	f7ff ffb5 	bl	8000b5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000bf2:	4b1d      	ldr	r3, [pc, #116]	; (8000c68 <HAL_FDCAN_MspInit+0xcc>)
 8000bf4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000bf8:	4a1b      	ldr	r2, [pc, #108]	; (8000c68 <HAL_FDCAN_MspInit+0xcc>)
 8000bfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bfe:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000c02:	4b19      	ldr	r3, [pc, #100]	; (8000c68 <HAL_FDCAN_MspInit+0xcc>)
 8000c04:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c10:	4b15      	ldr	r3, [pc, #84]	; (8000c68 <HAL_FDCAN_MspInit+0xcc>)
 8000c12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c16:	4a14      	ldr	r2, [pc, #80]	; (8000c68 <HAL_FDCAN_MspInit+0xcc>)
 8000c18:	f043 0301 	orr.w	r3, r3, #1
 8000c1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c20:	4b11      	ldr	r3, [pc, #68]	; (8000c68 <HAL_FDCAN_MspInit+0xcc>)
 8000c22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c26:	f003 0301 	and.w	r3, r3, #1
 8000c2a:	60bb      	str	r3, [r7, #8]
 8000c2c:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000c2e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000c32:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c36:	2302      	movs	r3, #2
 8000c38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c42:	2300      	movs	r3, #0
 8000c44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000c48:	2309      	movs	r3, #9
 8000c4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c52:	4619      	mov	r1, r3
 8000c54:	4805      	ldr	r0, [pc, #20]	; (8000c6c <HAL_FDCAN_MspInit+0xd0>)
 8000c56:	f001 f861 	bl	8001d1c <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000c5a:	bf00      	nop
 8000c5c:	37e0      	adds	r7, #224	; 0xe0
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	4000a000 	.word	0x4000a000
 8000c68:	58024400 	.word	0x58024400
 8000c6c:	58020000 	.word	0x58020000

08000c70 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b0b0      	sub	sp, #192	; 0xc0
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c78:	f107 0308 	add.w	r3, r7, #8
 8000c7c:	22b8      	movs	r2, #184	; 0xb8
 8000c7e:	2100      	movs	r1, #0
 8000c80:	4618      	mov	r0, r3
 8000c82:	f006 f89f 	bl	8006dc4 <memset>
  if(hrtc->Instance==RTC)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a14      	ldr	r2, [pc, #80]	; (8000cdc <HAL_RTC_MspInit+0x6c>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d121      	bne.n	8000cd4 <HAL_RTC_MspInit+0x64>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000c90:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000c9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ca0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ca4:	f107 0308 	add.w	r3, r7, #8
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f002 f9db 	bl	8003064 <HAL_RCCEx_PeriphCLKConfig>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8000cb4:	f7ff ff52 	bl	8000b5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000cb8:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <HAL_RTC_MspInit+0x70>)
 8000cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000cbc:	4a08      	ldr	r2, [pc, #32]	; (8000ce0 <HAL_RTC_MspInit+0x70>)
 8000cbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cc2:	6713      	str	r3, [r2, #112]	; 0x70
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	2029      	movs	r0, #41	; 0x29
 8000cca:	f000 fb1d 	bl	8001308 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000cce:	2029      	movs	r0, #41	; 0x29
 8000cd0:	f000 fb34 	bl	800133c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000cd4:	bf00      	nop
 8000cd6:	37c0      	adds	r7, #192	; 0xc0
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	58004000 	.word	0x58004000
 8000ce0:	58024400 	.word	0x58024400

08000ce4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b0b8      	sub	sp, #224	; 0xe0
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cec:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cfc:	f107 0310 	add.w	r3, r7, #16
 8000d00:	22b8      	movs	r2, #184	; 0xb8
 8000d02:	2100      	movs	r1, #0
 8000d04:	4618      	mov	r0, r3
 8000d06:	f006 f85d 	bl	8006dc4 <memset>
  if(huart->Instance==UART4)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a27      	ldr	r2, [pc, #156]	; (8000dac <HAL_UART_MspInit+0xc8>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d146      	bne.n	8000da2 <HAL_UART_MspInit+0xbe>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000d14:	f04f 0202 	mov.w	r2, #2
 8000d18:	f04f 0300 	mov.w	r3, #0
 8000d1c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000d20:	2300      	movs	r3, #0
 8000d22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d26:	f107 0310 	add.w	r3, r7, #16
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f002 f99a 	bl	8003064 <HAL_RCCEx_PeriphCLKConfig>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000d36:	f7ff ff11 	bl	8000b5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000d3a:	4b1d      	ldr	r3, [pc, #116]	; (8000db0 <HAL_UART_MspInit+0xcc>)
 8000d3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d40:	4a1b      	ldr	r2, [pc, #108]	; (8000db0 <HAL_UART_MspInit+0xcc>)
 8000d42:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000d46:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000d4a:	4b19      	ldr	r3, [pc, #100]	; (8000db0 <HAL_UART_MspInit+0xcc>)
 8000d4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000d54:	60fb      	str	r3, [r7, #12]
 8000d56:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d58:	4b15      	ldr	r3, [pc, #84]	; (8000db0 <HAL_UART_MspInit+0xcc>)
 8000d5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d5e:	4a14      	ldr	r2, [pc, #80]	; (8000db0 <HAL_UART_MspInit+0xcc>)
 8000d60:	f043 0302 	orr.w	r3, r3, #2
 8000d64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d68:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <HAL_UART_MspInit+0xcc>)
 8000d6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d6e:	f003 0302 	and.w	r3, r3, #2
 8000d72:	60bb      	str	r3, [r7, #8]
 8000d74:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d76:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d7a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000d90:	2308      	movs	r3, #8
 8000d92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d96:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4805      	ldr	r0, [pc, #20]	; (8000db4 <HAL_UART_MspInit+0xd0>)
 8000d9e:	f000 ffbd 	bl	8001d1c <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8000da2:	bf00      	nop
 8000da4:	37e0      	adds	r7, #224	; 0xe0
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40004c00 	.word	0x40004c00
 8000db0:	58024400 	.word	0x58024400
 8000db4:	58020400 	.word	0x58020400

08000db8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b090      	sub	sp, #64	; 0x40
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2b0f      	cmp	r3, #15
 8000dc4:	d827      	bhi.n	8000e16 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	6879      	ldr	r1, [r7, #4]
 8000dca:	2036      	movs	r0, #54	; 0x36
 8000dcc:	f000 fa9c 	bl	8001308 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000dd0:	2036      	movs	r0, #54	; 0x36
 8000dd2:	f000 fab3 	bl	800133c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000dd6:	4a29      	ldr	r2, [pc, #164]	; (8000e7c <HAL_InitTick+0xc4>)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000ddc:	4b28      	ldr	r3, [pc, #160]	; (8000e80 <HAL_InitTick+0xc8>)
 8000dde:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000de2:	4a27      	ldr	r2, [pc, #156]	; (8000e80 <HAL_InitTick+0xc8>)
 8000de4:	f043 0310 	orr.w	r3, r3, #16
 8000de8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000dec:	4b24      	ldr	r3, [pc, #144]	; (8000e80 <HAL_InitTick+0xc8>)
 8000dee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000df2:	f003 0310 	and.w	r3, r3, #16
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000dfa:	f107 0210 	add.w	r2, r7, #16
 8000dfe:	f107 0314 	add.w	r3, r7, #20
 8000e02:	4611      	mov	r1, r2
 8000e04:	4618      	mov	r0, r3
 8000e06:	f002 f8eb 	bl	8002fe0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e0c:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d106      	bne.n	8000e22 <HAL_InitTick+0x6a>
 8000e14:	e001      	b.n	8000e1a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	e02b      	b.n	8000e72 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e1a:	f002 f8b5 	bl	8002f88 <HAL_RCC_GetPCLK1Freq>
 8000e1e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000e20:	e004      	b.n	8000e2c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e22:	f002 f8b1 	bl	8002f88 <HAL_RCC_GetPCLK1Freq>
 8000e26:	4603      	mov	r3, r0
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e2e:	4a15      	ldr	r2, [pc, #84]	; (8000e84 <HAL_InitTick+0xcc>)
 8000e30:	fba2 2303 	umull	r2, r3, r2, r3
 8000e34:	0c9b      	lsrs	r3, r3, #18
 8000e36:	3b01      	subs	r3, #1
 8000e38:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e3a:	4b13      	ldr	r3, [pc, #76]	; (8000e88 <HAL_InitTick+0xd0>)
 8000e3c:	4a13      	ldr	r2, [pc, #76]	; (8000e8c <HAL_InitTick+0xd4>)
 8000e3e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e40:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <HAL_InitTick+0xd0>)
 8000e42:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e46:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e48:	4a0f      	ldr	r2, [pc, #60]	; (8000e88 <HAL_InitTick+0xd0>)
 8000e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e4c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e4e:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <HAL_InitTick+0xd0>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e54:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <HAL_InitTick+0xd0>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000e5a:	480b      	ldr	r0, [pc, #44]	; (8000e88 <HAL_InitTick+0xd0>)
 8000e5c:	f004 faba 	bl	80053d4 <HAL_TIM_Base_Init>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d104      	bne.n	8000e70 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000e66:	4808      	ldr	r0, [pc, #32]	; (8000e88 <HAL_InitTick+0xd0>)
 8000e68:	f004 fb16 	bl	8005498 <HAL_TIM_Base_Start_IT>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	e000      	b.n	8000e72 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e70:	2301      	movs	r3, #1
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3740      	adds	r7, #64	; 0x40
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	24000008 	.word	0x24000008
 8000e80:	58024400 	.word	0x58024400
 8000e84:	431bde83 	.word	0x431bde83
 8000e88:	24000204 	.word	0x24000204
 8000e8c:	40001000 	.word	0x40001000

08000e90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e94:	e7fe      	b.n	8000e94 <NMI_Handler+0x4>

08000e96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e9a:	e7fe      	b.n	8000e9a <HardFault_Handler+0x4>

08000e9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea0:	e7fe      	b.n	8000ea0 <MemManage_Handler+0x4>

08000ea2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ea6:	e7fe      	b.n	8000ea6 <BusFault_Handler+0x4>

08000ea8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eac:	e7fe      	b.n	8000eac <UsageFault_Handler+0x4>

08000eae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr

08000eca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
	...

08000ee8 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms (A and B) interrupt through EXTI line.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000eec:	4802      	ldr	r0, [pc, #8]	; (8000ef8 <RTC_Alarm_IRQHandler+0x10>)
 8000eee:	f004 f961 	bl	80051b4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	2400014c 	.word	0x2400014c

08000efc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f00:	4802      	ldr	r0, [pc, #8]	; (8000f0c <TIM6_DAC_IRQHandler+0x10>)
 8000f02:	f004 fb4f 	bl	80055a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	24000204 	.word	0x24000204

08000f10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f18:	4a14      	ldr	r2, [pc, #80]	; (8000f6c <_sbrk+0x5c>)
 8000f1a:	4b15      	ldr	r3, [pc, #84]	; (8000f70 <_sbrk+0x60>)
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f24:	4b13      	ldr	r3, [pc, #76]	; (8000f74 <_sbrk+0x64>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d102      	bne.n	8000f32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f2c:	4b11      	ldr	r3, [pc, #68]	; (8000f74 <_sbrk+0x64>)
 8000f2e:	4a12      	ldr	r2, [pc, #72]	; (8000f78 <_sbrk+0x68>)
 8000f30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f32:	4b10      	ldr	r3, [pc, #64]	; (8000f74 <_sbrk+0x64>)
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4413      	add	r3, r2
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	d207      	bcs.n	8000f50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f40:	f005 ff48 	bl	8006dd4 <__errno>
 8000f44:	4603      	mov	r3, r0
 8000f46:	220c      	movs	r2, #12
 8000f48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f4e:	e009      	b.n	8000f64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f50:	4b08      	ldr	r3, [pc, #32]	; (8000f74 <_sbrk+0x64>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f56:	4b07      	ldr	r3, [pc, #28]	; (8000f74 <_sbrk+0x64>)
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	4a05      	ldr	r2, [pc, #20]	; (8000f74 <_sbrk+0x64>)
 8000f60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f62:	68fb      	ldr	r3, [r7, #12]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3718      	adds	r7, #24
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	24050000 	.word	0x24050000
 8000f70:	00000400 	.word	0x00000400
 8000f74:	24000250 	.word	0x24000250
 8000f78:	240003a0 	.word	0x240003a0

08000f7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f80:	4b32      	ldr	r3, [pc, #200]	; (800104c <SystemInit+0xd0>)
 8000f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f86:	4a31      	ldr	r2, [pc, #196]	; (800104c <SystemInit+0xd0>)
 8000f88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f90:	4b2f      	ldr	r3, [pc, #188]	; (8001050 <SystemInit+0xd4>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f003 030f 	and.w	r3, r3, #15
 8000f98:	2b06      	cmp	r3, #6
 8000f9a:	d807      	bhi.n	8000fac <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f9c:	4b2c      	ldr	r3, [pc, #176]	; (8001050 <SystemInit+0xd4>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f023 030f 	bic.w	r3, r3, #15
 8000fa4:	4a2a      	ldr	r2, [pc, #168]	; (8001050 <SystemInit+0xd4>)
 8000fa6:	f043 0307 	orr.w	r3, r3, #7
 8000faa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000fac:	4b29      	ldr	r3, [pc, #164]	; (8001054 <SystemInit+0xd8>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a28      	ldr	r2, [pc, #160]	; (8001054 <SystemInit+0xd8>)
 8000fb2:	f043 0301 	orr.w	r3, r3, #1
 8000fb6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000fb8:	4b26      	ldr	r3, [pc, #152]	; (8001054 <SystemInit+0xd8>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000fbe:	4b25      	ldr	r3, [pc, #148]	; (8001054 <SystemInit+0xd8>)
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	4924      	ldr	r1, [pc, #144]	; (8001054 <SystemInit+0xd8>)
 8000fc4:	4b24      	ldr	r3, [pc, #144]	; (8001058 <SystemInit+0xdc>)
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000fca:	4b21      	ldr	r3, [pc, #132]	; (8001050 <SystemInit+0xd4>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f003 0308 	and.w	r3, r3, #8
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d007      	beq.n	8000fe6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000fd6:	4b1e      	ldr	r3, [pc, #120]	; (8001050 <SystemInit+0xd4>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f023 030f 	bic.w	r3, r3, #15
 8000fde:	4a1c      	ldr	r2, [pc, #112]	; (8001050 <SystemInit+0xd4>)
 8000fe0:	f043 0307 	orr.w	r3, r3, #7
 8000fe4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000fe6:	4b1b      	ldr	r3, [pc, #108]	; (8001054 <SystemInit+0xd8>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000fec:	4b19      	ldr	r3, [pc, #100]	; (8001054 <SystemInit+0xd8>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000ff2:	4b18      	ldr	r3, [pc, #96]	; (8001054 <SystemInit+0xd8>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000ff8:	4b16      	ldr	r3, [pc, #88]	; (8001054 <SystemInit+0xd8>)
 8000ffa:	4a18      	ldr	r2, [pc, #96]	; (800105c <SystemInit+0xe0>)
 8000ffc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000ffe:	4b15      	ldr	r3, [pc, #84]	; (8001054 <SystemInit+0xd8>)
 8001000:	4a17      	ldr	r2, [pc, #92]	; (8001060 <SystemInit+0xe4>)
 8001002:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001004:	4b13      	ldr	r3, [pc, #76]	; (8001054 <SystemInit+0xd8>)
 8001006:	4a17      	ldr	r2, [pc, #92]	; (8001064 <SystemInit+0xe8>)
 8001008:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800100a:	4b12      	ldr	r3, [pc, #72]	; (8001054 <SystemInit+0xd8>)
 800100c:	2200      	movs	r2, #0
 800100e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001010:	4b10      	ldr	r3, [pc, #64]	; (8001054 <SystemInit+0xd8>)
 8001012:	4a14      	ldr	r2, [pc, #80]	; (8001064 <SystemInit+0xe8>)
 8001014:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001016:	4b0f      	ldr	r3, [pc, #60]	; (8001054 <SystemInit+0xd8>)
 8001018:	2200      	movs	r2, #0
 800101a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800101c:	4b0d      	ldr	r3, [pc, #52]	; (8001054 <SystemInit+0xd8>)
 800101e:	4a11      	ldr	r2, [pc, #68]	; (8001064 <SystemInit+0xe8>)
 8001020:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001022:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <SystemInit+0xd8>)
 8001024:	2200      	movs	r2, #0
 8001026:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001028:	4b0a      	ldr	r3, [pc, #40]	; (8001054 <SystemInit+0xd8>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a09      	ldr	r2, [pc, #36]	; (8001054 <SystemInit+0xd8>)
 800102e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001032:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001034:	4b07      	ldr	r3, [pc, #28]	; (8001054 <SystemInit+0xd8>)
 8001036:	2200      	movs	r2, #0
 8001038:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800103a:	4b0b      	ldr	r3, [pc, #44]	; (8001068 <SystemInit+0xec>)
 800103c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001040:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001042:	bf00      	nop
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	e000ed00 	.word	0xe000ed00
 8001050:	52002000 	.word	0x52002000
 8001054:	58024400 	.word	0x58024400
 8001058:	eaf6ed7f 	.word	0xeaf6ed7f
 800105c:	02020200 	.word	0x02020200
 8001060:	01ff0000 	.word	0x01ff0000
 8001064:	01010280 	.word	0x01010280
 8001068:	52004000 	.word	0x52004000

0800106c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800106c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010a4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001070:	f7ff ff84 	bl	8000f7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001074:	480c      	ldr	r0, [pc, #48]	; (80010a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001076:	490d      	ldr	r1, [pc, #52]	; (80010ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001078:	4a0d      	ldr	r2, [pc, #52]	; (80010b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800107a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800107c:	e002      	b.n	8001084 <LoopCopyDataInit>

0800107e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800107e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001080:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001082:	3304      	adds	r3, #4

08001084 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001084:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001086:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001088:	d3f9      	bcc.n	800107e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800108a:	4a0a      	ldr	r2, [pc, #40]	; (80010b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800108c:	4c0a      	ldr	r4, [pc, #40]	; (80010b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800108e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001090:	e001      	b.n	8001096 <LoopFillZerobss>

08001092 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001092:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001094:	3204      	adds	r2, #4

08001096 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001096:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001098:	d3fb      	bcc.n	8001092 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800109a:	f005 fea1 	bl	8006de0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800109e:	f7ff fb05 	bl	80006ac <main>
  bx  lr
 80010a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010a4:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80010a8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80010ac:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 80010b0:	080077c4 	.word	0x080077c4
  ldr r2, =_sbss
 80010b4:	24000060 	.word	0x24000060
  ldr r4, =_ebss
 80010b8:	240003a0 	.word	0x240003a0

080010bc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010bc:	e7fe      	b.n	80010bc <ADC3_IRQHandler>
	...

080010c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010c6:	2003      	movs	r0, #3
 80010c8:	f000 f913 	bl	80012f2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80010cc:	f001 fdb2 	bl	8002c34 <HAL_RCC_GetSysClockFreq>
 80010d0:	4602      	mov	r2, r0
 80010d2:	4b15      	ldr	r3, [pc, #84]	; (8001128 <HAL_Init+0x68>)
 80010d4:	699b      	ldr	r3, [r3, #24]
 80010d6:	0a1b      	lsrs	r3, r3, #8
 80010d8:	f003 030f 	and.w	r3, r3, #15
 80010dc:	4913      	ldr	r1, [pc, #76]	; (800112c <HAL_Init+0x6c>)
 80010de:	5ccb      	ldrb	r3, [r1, r3]
 80010e0:	f003 031f 	and.w	r3, r3, #31
 80010e4:	fa22 f303 	lsr.w	r3, r2, r3
 80010e8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80010ea:	4b0f      	ldr	r3, [pc, #60]	; (8001128 <HAL_Init+0x68>)
 80010ec:	699b      	ldr	r3, [r3, #24]
 80010ee:	f003 030f 	and.w	r3, r3, #15
 80010f2:	4a0e      	ldr	r2, [pc, #56]	; (800112c <HAL_Init+0x6c>)
 80010f4:	5cd3      	ldrb	r3, [r2, r3]
 80010f6:	f003 031f 	and.w	r3, r3, #31
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001100:	4a0b      	ldr	r2, [pc, #44]	; (8001130 <HAL_Init+0x70>)
 8001102:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001104:	4a0b      	ldr	r2, [pc, #44]	; (8001134 <HAL_Init+0x74>)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800110a:	200f      	movs	r0, #15
 800110c:	f7ff fe54 	bl	8000db8 <HAL_InitTick>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e002      	b.n	8001120 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800111a:	f7ff fd25 	bl	8000b68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800111e:	2300      	movs	r3, #0
}
 8001120:	4618      	mov	r0, r3
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	58024400 	.word	0x58024400
 800112c:	08007738 	.word	0x08007738
 8001130:	24000004 	.word	0x24000004
 8001134:	24000000 	.word	0x24000000

08001138 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  return uwTick;
 800113c:	4b03      	ldr	r3, [pc, #12]	; (800114c <HAL_GetTick+0x14>)
 800113e:	681b      	ldr	r3, [r3, #0]
}
 8001140:	4618      	mov	r0, r3
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	24000254 	.word	0x24000254

08001150 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001158:	f7ff ffee 	bl	8001138 <HAL_GetTick>
 800115c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001168:	d005      	beq.n	8001176 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800116a:	4b0a      	ldr	r3, [pc, #40]	; (8001194 <HAL_Delay+0x44>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	461a      	mov	r2, r3
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	4413      	add	r3, r2
 8001174:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001176:	bf00      	nop
 8001178:	f7ff ffde 	bl	8001138 <HAL_GetTick>
 800117c:	4602      	mov	r2, r0
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	68fa      	ldr	r2, [r7, #12]
 8001184:	429a      	cmp	r2, r3
 8001186:	d8f7      	bhi.n	8001178 <HAL_Delay+0x28>
  {
  }
}
 8001188:	bf00      	nop
 800118a:	bf00      	nop
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	2400000c 	.word	0x2400000c

08001198 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f003 0307 	and.w	r3, r3, #7
 80011a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011a8:	4b0b      	ldr	r3, [pc, #44]	; (80011d8 <__NVIC_SetPriorityGrouping+0x40>)
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ae:	68ba      	ldr	r2, [r7, #8]
 80011b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011b4:	4013      	ands	r3, r2
 80011b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011c0:	4b06      	ldr	r3, [pc, #24]	; (80011dc <__NVIC_SetPriorityGrouping+0x44>)
 80011c2:	4313      	orrs	r3, r2
 80011c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011c6:	4a04      	ldr	r2, [pc, #16]	; (80011d8 <__NVIC_SetPriorityGrouping+0x40>)
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	60d3      	str	r3, [r2, #12]
}
 80011cc:	bf00      	nop
 80011ce:	3714      	adds	r7, #20
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	e000ed00 	.word	0xe000ed00
 80011dc:	05fa0000 	.word	0x05fa0000

080011e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011e4:	4b04      	ldr	r3, [pc, #16]	; (80011f8 <__NVIC_GetPriorityGrouping+0x18>)
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	0a1b      	lsrs	r3, r3, #8
 80011ea:	f003 0307 	and.w	r3, r3, #7
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001206:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800120a:	2b00      	cmp	r3, #0
 800120c:	db0b      	blt.n	8001226 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800120e:	88fb      	ldrh	r3, [r7, #6]
 8001210:	f003 021f 	and.w	r2, r3, #31
 8001214:	4907      	ldr	r1, [pc, #28]	; (8001234 <__NVIC_EnableIRQ+0x38>)
 8001216:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800121a:	095b      	lsrs	r3, r3, #5
 800121c:	2001      	movs	r0, #1
 800121e:	fa00 f202 	lsl.w	r2, r0, r2
 8001222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001226:	bf00      	nop
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	e000e100 	.word	0xe000e100

08001238 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	6039      	str	r1, [r7, #0]
 8001242:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001244:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001248:	2b00      	cmp	r3, #0
 800124a:	db0a      	blt.n	8001262 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	b2da      	uxtb	r2, r3
 8001250:	490c      	ldr	r1, [pc, #48]	; (8001284 <__NVIC_SetPriority+0x4c>)
 8001252:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001256:	0112      	lsls	r2, r2, #4
 8001258:	b2d2      	uxtb	r2, r2
 800125a:	440b      	add	r3, r1
 800125c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001260:	e00a      	b.n	8001278 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	b2da      	uxtb	r2, r3
 8001266:	4908      	ldr	r1, [pc, #32]	; (8001288 <__NVIC_SetPriority+0x50>)
 8001268:	88fb      	ldrh	r3, [r7, #6]
 800126a:	f003 030f 	and.w	r3, r3, #15
 800126e:	3b04      	subs	r3, #4
 8001270:	0112      	lsls	r2, r2, #4
 8001272:	b2d2      	uxtb	r2, r2
 8001274:	440b      	add	r3, r1
 8001276:	761a      	strb	r2, [r3, #24]
}
 8001278:	bf00      	nop
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr
 8001284:	e000e100 	.word	0xe000e100
 8001288:	e000ed00 	.word	0xe000ed00

0800128c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800128c:	b480      	push	{r7}
 800128e:	b089      	sub	sp, #36	; 0x24
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	f003 0307 	and.w	r3, r3, #7
 800129e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	f1c3 0307 	rsb	r3, r3, #7
 80012a6:	2b04      	cmp	r3, #4
 80012a8:	bf28      	it	cs
 80012aa:	2304      	movcs	r3, #4
 80012ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	3304      	adds	r3, #4
 80012b2:	2b06      	cmp	r3, #6
 80012b4:	d902      	bls.n	80012bc <NVIC_EncodePriority+0x30>
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	3b03      	subs	r3, #3
 80012ba:	e000      	b.n	80012be <NVIC_EncodePriority+0x32>
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c0:	f04f 32ff 	mov.w	r2, #4294967295
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	43da      	mvns	r2, r3
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	401a      	ands	r2, r3
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012d4:	f04f 31ff 	mov.w	r1, #4294967295
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	fa01 f303 	lsl.w	r3, r1, r3
 80012de:	43d9      	mvns	r1, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e4:	4313      	orrs	r3, r2
         );
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3724      	adds	r7, #36	; 0x24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b082      	sub	sp, #8
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f7ff ff4c 	bl	8001198 <__NVIC_SetPriorityGrouping>
}
 8001300:	bf00      	nop
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
 8001314:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001316:	f7ff ff63 	bl	80011e0 <__NVIC_GetPriorityGrouping>
 800131a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800131c:	687a      	ldr	r2, [r7, #4]
 800131e:	68b9      	ldr	r1, [r7, #8]
 8001320:	6978      	ldr	r0, [r7, #20]
 8001322:	f7ff ffb3 	bl	800128c <NVIC_EncodePriority>
 8001326:	4602      	mov	r2, r0
 8001328:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800132c:	4611      	mov	r1, r2
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff ff82 	bl	8001238 <__NVIC_SetPriority>
}
 8001334:	bf00      	nop
 8001336:	3718      	adds	r7, #24
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001346:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff ff56 	bl	80011fc <__NVIC_EnableIRQ>
}
 8001350:	bf00      	nop
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b098      	sub	sp, #96	; 0x60
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8001360:	4a84      	ldr	r2, [pc, #528]	; (8001574 <HAL_FDCAN_Init+0x21c>)
 8001362:	f107 030c 	add.w	r3, r7, #12
 8001366:	4611      	mov	r1, r2
 8001368:	224c      	movs	r2, #76	; 0x4c
 800136a:	4618      	mov	r0, r3
 800136c:	f005 fd5e 	bl	8006e2c <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d101      	bne.n	800137a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e1c6      	b.n	8001708 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a7e      	ldr	r2, [pc, #504]	; (8001578 <HAL_FDCAN_Init+0x220>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d106      	bne.n	8001392 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800138c:	461a      	mov	r2, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001398:	b2db      	uxtb	r3, r3
 800139a:	2b00      	cmp	r3, #0
 800139c:	d106      	bne.n	80013ac <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff fbf8 	bl	8000b9c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	699a      	ldr	r2, [r3, #24]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f022 0210 	bic.w	r2, r2, #16
 80013ba:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013bc:	f7ff febc 	bl	8001138 <HAL_GetTick>
 80013c0:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80013c2:	e014      	b.n	80013ee <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80013c4:	f7ff feb8 	bl	8001138 <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	2b0a      	cmp	r3, #10
 80013d0:	d90d      	bls.n	80013ee <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80013d8:	f043 0201 	orr.w	r2, r3, #1
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2203      	movs	r2, #3
 80013e6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e18c      	b.n	8001708 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	f003 0308 	and.w	r3, r3, #8
 80013f8:	2b08      	cmp	r3, #8
 80013fa:	d0e3      	beq.n	80013c4 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	699a      	ldr	r2, [r3, #24]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f042 0201 	orr.w	r2, r2, #1
 800140a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800140c:	f7ff fe94 	bl	8001138 <HAL_GetTick>
 8001410:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001412:	e014      	b.n	800143e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001414:	f7ff fe90 	bl	8001138 <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	2b0a      	cmp	r3, #10
 8001420:	d90d      	bls.n	800143e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001428:	f043 0201 	orr.w	r2, r3, #1
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2203      	movs	r2, #3
 8001436:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e164      	b.n	8001708 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	f003 0301 	and.w	r3, r3, #1
 8001448:	2b00      	cmp	r3, #0
 800144a:	d0e3      	beq.n	8001414 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	699a      	ldr	r2, [r3, #24]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f042 0202 	orr.w	r2, r2, #2
 800145a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	7c1b      	ldrb	r3, [r3, #16]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d108      	bne.n	8001476 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	699a      	ldr	r2, [r3, #24]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001472:	619a      	str	r2, [r3, #24]
 8001474:	e007      	b.n	8001486 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	699a      	ldr	r2, [r3, #24]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001484:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	7c5b      	ldrb	r3, [r3, #17]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d108      	bne.n	80014a0 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	699a      	ldr	r2, [r3, #24]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800149c:	619a      	str	r2, [r3, #24]
 800149e:	e007      	b.n	80014b0 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	699a      	ldr	r2, [r3, #24]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80014ae:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	7c9b      	ldrb	r3, [r3, #18]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d108      	bne.n	80014ca <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	699a      	ldr	r2, [r3, #24]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80014c6:	619a      	str	r2, [r3, #24]
 80014c8:	e007      	b.n	80014da <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	699a      	ldr	r2, [r3, #24]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80014d8:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	689a      	ldr	r2, [r3, #8]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	430a      	orrs	r2, r1
 80014ee:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	699a      	ldr	r2, [r3, #24]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80014fe:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	691a      	ldr	r2, [r3, #16]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f022 0210 	bic.w	r2, r2, #16
 800150e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d108      	bne.n	800152a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	699a      	ldr	r2, [r3, #24]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f042 0204 	orr.w	r2, r2, #4
 8001526:	619a      	str	r2, [r3, #24]
 8001528:	e030      	b.n	800158c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	68db      	ldr	r3, [r3, #12]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d02c      	beq.n	800158c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	68db      	ldr	r3, [r3, #12]
 8001536:	2b02      	cmp	r3, #2
 8001538:	d020      	beq.n	800157c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	699a      	ldr	r2, [r3, #24]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001548:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	691a      	ldr	r2, [r3, #16]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f042 0210 	orr.w	r2, r2, #16
 8001558:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	68db      	ldr	r3, [r3, #12]
 800155e:	2b03      	cmp	r3, #3
 8001560:	d114      	bne.n	800158c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	699a      	ldr	r2, [r3, #24]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f042 0220 	orr.w	r2, r2, #32
 8001570:	619a      	str	r2, [r3, #24]
 8001572:	e00b      	b.n	800158c <HAL_FDCAN_Init+0x234>
 8001574:	080076ec 	.word	0x080076ec
 8001578:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	699a      	ldr	r2, [r3, #24]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f042 0220 	orr.w	r2, r2, #32
 800158a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	3b01      	subs	r3, #1
 8001592:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	69db      	ldr	r3, [r3, #28]
 8001598:	3b01      	subs	r3, #1
 800159a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800159c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6a1b      	ldr	r3, [r3, #32]
 80015a2:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80015a4:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	695b      	ldr	r3, [r3, #20]
 80015ac:	3b01      	subs	r3, #1
 80015ae:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80015b4:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80015b6:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80015c0:	d115      	bne.n	80015ee <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c6:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015cc:	3b01      	subs	r3, #1
 80015ce:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80015d0:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	3b01      	subs	r3, #1
 80015d8:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80015da:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e2:	3b01      	subs	r3, #1
 80015e4:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80015ea:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80015ec:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d00a      	beq.n	800160c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	430a      	orrs	r2, r1
 8001608:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001614:	4413      	add	r3, r2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d011      	beq.n	800163e <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8001622:	f023 0107 	bic.w	r1, r3, #7
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	3360      	adds	r3, #96	; 0x60
 800162e:	443b      	add	r3, r7
 8001630:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	430a      	orrs	r2, r1
 800163a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001642:	2b00      	cmp	r3, #0
 8001644:	d011      	beq.n	800166a <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800164e:	f023 0107 	bic.w	r1, r3, #7
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	3360      	adds	r3, #96	; 0x60
 800165a:	443b      	add	r3, r7
 800165c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	430a      	orrs	r2, r1
 8001666:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800166e:	2b00      	cmp	r3, #0
 8001670:	d012      	beq.n	8001698 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800167a:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	3360      	adds	r3, #96	; 0x60
 8001686:	443b      	add	r3, r7
 8001688:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800168c:	011a      	lsls	r2, r3, #4
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	430a      	orrs	r2, r1
 8001694:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800169c:	2b00      	cmp	r3, #0
 800169e:	d012      	beq.n	80016c6 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80016a8:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	3360      	adds	r3, #96	; 0x60
 80016b4:	443b      	add	r3, r7
 80016b6:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80016ba:	021a      	lsls	r2, r3, #8
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	430a      	orrs	r2, r1
 80016c2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a11      	ldr	r2, [pc, #68]	; (8001710 <HAL_FDCAN_Init+0x3b8>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d107      	bne.n	80016e0 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	689a      	ldr	r2, [r3, #8]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f022 0203 	bic.w	r2, r2, #3
 80016de:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2200      	movs	r2, #0
 80016e4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2200      	movs	r2, #0
 80016ec:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2201      	movs	r2, #1
 80016f4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f000 f90b 	bl	8001914 <FDCAN_CalcultateRamBlockAddresses>
 80016fe:	4603      	mov	r3, r0
 8001700:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8001704:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8001708:	4618      	mov	r0, r3
 800170a:	3760      	adds	r7, #96	; 0x60
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	4000a000 	.word	0x4000a000

08001714 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001722:	b2db      	uxtb	r3, r3
 8001724:	2b01      	cmp	r3, #1
 8001726:	d111      	bne.n	800174c <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2202      	movs	r2, #2
 800172c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	699a      	ldr	r2, [r3, #24]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f022 0201 	bic.w	r2, r2, #1
 800173e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2200      	movs	r2, #0
 8001744:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8001748:	2300      	movs	r3, #0
 800174a:	e008      	b.n	800175e <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001752:	f043 0204 	orr.w	r2, r3, #4
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
  }
}
 800175e:	4618      	mov	r0, r3
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr

0800176a <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b086      	sub	sp, #24
 800176e:	af00      	add	r7, sp, #0
 8001770:	60f8      	str	r0, [r7, #12]
 8001772:	60b9      	str	r1, [r7, #8]
 8001774:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800177c:	b2db      	uxtb	r3, r3
 800177e:	2b02      	cmp	r3, #2
 8001780:	d141      	bne.n	8001806 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800178a:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d109      	bne.n	80017a6 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001798:	f043 0220 	orr.w	r2, r3, #32
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e038      	b.n	8001818 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80017ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d009      	beq.n	80017ca <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80017bc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e026      	b.n	8001818 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80017d2:	0c1b      	lsrs	r3, r3, #16
 80017d4:	f003 031f 	and.w	r3, r3, #31
 80017d8:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	68b9      	ldr	r1, [r7, #8]
 80017e0:	68f8      	ldr	r0, [r7, #12]
 80017e2:	f000 fa1d 	bl	8001c20 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2101      	movs	r1, #1
 80017ec:	697a      	ldr	r2, [r7, #20]
 80017ee:	fa01 f202 	lsl.w	r2, r1, r2
 80017f2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80017f6:	2201      	movs	r2, #1
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	409a      	lsls	r2, r3
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 8001802:	2300      	movs	r3, #0
 8001804:	e008      	b.n	8001818 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800180c:	f043 0208 	orr.w	r2, r3, #8
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
  }
}
 8001818:	4618      	mov	r0, r3
 800181a:	3718      	adds	r7, #24
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8001820:	b480      	push	{r7}
 8001822:	b087      	sub	sp, #28
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	60b9      	str	r1, [r7, #8]
 800182a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001832:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001834:	7dfb      	ldrb	r3, [r7, #23]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d002      	beq.n	8001840 <HAL_FDCAN_ActivateNotification+0x20>
 800183a:	7dfb      	ldrb	r3, [r7, #23]
 800183c:	2b02      	cmp	r3, #2
 800183e:	d155      	bne.n	80018ec <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	4013      	ands	r3, r2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d108      	bne.n	8001860 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f042 0201 	orr.w	r2, r2, #1
 800185c:	65da      	str	r2, [r3, #92]	; 0x5c
 800185e:	e014      	b.n	800188a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	4013      	ands	r3, r2
 800186a:	68ba      	ldr	r2, [r7, #8]
 800186c:	429a      	cmp	r2, r3
 800186e:	d108      	bne.n	8001882 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f042 0202 	orr.w	r2, r2, #2
 800187e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001880:	e003      	b.n	800188a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2203      	movs	r2, #3
 8001888:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001890:	2b00      	cmp	r3, #0
 8001892:	d009      	beq.n	80018a8 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	430a      	orrs	r2, r1
 80018a4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d009      	beq.n	80018c6 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	430a      	orrs	r2, r1
 80018c2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80018cc:	68ba      	ldr	r2, [r7, #8]
 80018ce:	4b0f      	ldr	r3, [pc, #60]	; (800190c <HAL_FDCAN_ActivateNotification+0xec>)
 80018d0:	4013      	ands	r3, r2
 80018d2:	68fa      	ldr	r2, [r7, #12]
 80018d4:	6812      	ldr	r2, [r2, #0]
 80018d6:	430b      	orrs	r3, r1
 80018d8:	6553      	str	r3, [r2, #84]	; 0x54
 80018da:	4b0d      	ldr	r3, [pc, #52]	; (8001910 <HAL_FDCAN_ActivateNotification+0xf0>)
 80018dc:	695a      	ldr	r2, [r3, #20]
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	0f9b      	lsrs	r3, r3, #30
 80018e2:	490b      	ldr	r1, [pc, #44]	; (8001910 <HAL_FDCAN_ActivateNotification+0xf0>)
 80018e4:	4313      	orrs	r3, r2
 80018e6:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 80018e8:	2300      	movs	r3, #0
 80018ea:	e008      	b.n	80018fe <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80018f2:	f043 0202 	orr.w	r2, r3, #2
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
  }
}
 80018fe:	4618      	mov	r0, r3
 8001900:	371c      	adds	r7, #28
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	3fcfffff 	.word	0x3fcfffff
 8001910:	4000a800 	.word	0x4000a800

08001914 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001920:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800192a:	4ba7      	ldr	r3, [pc, #668]	; (8001bc8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800192c:	4013      	ands	r3, r2
 800192e:	68ba      	ldr	r2, [r7, #8]
 8001930:	0091      	lsls	r1, r2, #2
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	6812      	ldr	r2, [r2, #0]
 8001936:	430b      	orrs	r3, r1
 8001938:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001944:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800194c:	041a      	lsls	r2, r3, #16
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	430a      	orrs	r2, r1
 8001954:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800195c:	68ba      	ldr	r2, [r7, #8]
 800195e:	4413      	add	r3, r2
 8001960:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800196a:	4b97      	ldr	r3, [pc, #604]	; (8001bc8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800196c:	4013      	ands	r3, r2
 800196e:	68ba      	ldr	r2, [r7, #8]
 8001970:	0091      	lsls	r1, r2, #2
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	6812      	ldr	r2, [r2, #0]
 8001976:	430b      	orrs	r3, r1
 8001978:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001984:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800198c:	041a      	lsls	r2, r3, #16
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	430a      	orrs	r2, r1
 8001994:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	68ba      	ldr	r2, [r7, #8]
 80019a0:	4413      	add	r3, r2
 80019a2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80019ac:	4b86      	ldr	r3, [pc, #536]	; (8001bc8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80019ae:	4013      	ands	r3, r2
 80019b0:	68ba      	ldr	r2, [r7, #8]
 80019b2:	0091      	lsls	r1, r2, #2
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	6812      	ldr	r2, [r2, #0]
 80019b8:	430b      	orrs	r3, r1
 80019ba:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80019c6:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ce:	041a      	lsls	r2, r3, #16
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	430a      	orrs	r2, r1
 80019d6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80019e2:	fb02 f303 	mul.w	r3, r2, r3
 80019e6:	68ba      	ldr	r2, [r7, #8]
 80019e8:	4413      	add	r3, r2
 80019ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80019f4:	4b74      	ldr	r3, [pc, #464]	; (8001bc8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80019f6:	4013      	ands	r3, r2
 80019f8:	68ba      	ldr	r2, [r7, #8]
 80019fa:	0091      	lsls	r1, r2, #2
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	6812      	ldr	r2, [r2, #0]
 8001a00:	430b      	orrs	r3, r1
 8001a02:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001a0e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a16:	041a      	lsls	r2, r3, #16
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001a2a:	fb02 f303 	mul.w	r3, r2, r3
 8001a2e:	68ba      	ldr	r2, [r7, #8]
 8001a30:	4413      	add	r3, r2
 8001a32:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8001a3c:	4b62      	ldr	r3, [pc, #392]	; (8001bc8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001a3e:	4013      	ands	r3, r2
 8001a40:	68ba      	ldr	r2, [r7, #8]
 8001a42:	0091      	lsls	r1, r2, #2
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	6812      	ldr	r2, [r2, #0]
 8001a48:	430b      	orrs	r3, r1
 8001a4a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001a56:	fb02 f303 	mul.w	r3, r2, r3
 8001a5a:	68ba      	ldr	r2, [r7, #8]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001a68:	4b57      	ldr	r3, [pc, #348]	; (8001bc8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	68ba      	ldr	r2, [r7, #8]
 8001a6e:	0091      	lsls	r1, r2, #2
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	6812      	ldr	r2, [r2, #0]
 8001a74:	430b      	orrs	r3, r1
 8001a76:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a82:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a8a:	041a      	lsls	r2, r3, #16
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	430a      	orrs	r2, r1
 8001a92:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	68ba      	ldr	r2, [r7, #8]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001aaa:	4b47      	ldr	r3, [pc, #284]	; (8001bc8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001aac:	4013      	ands	r3, r2
 8001aae:	68ba      	ldr	r2, [r7, #8]
 8001ab0:	0091      	lsls	r1, r2, #2
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	6812      	ldr	r2, [r2, #0]
 8001ab6:	430b      	orrs	r3, r1
 8001ab8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001ac4:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001acc:	041a      	lsls	r2, r3, #16
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001ae0:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ae8:	061a      	lsls	r2, r3, #24
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	430a      	orrs	r2, r1
 8001af0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001af8:	4b34      	ldr	r3, [pc, #208]	; (8001bcc <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8001afa:	4413      	add	r3, r2
 8001afc:	009a      	lsls	r2, r3, #2
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	441a      	add	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b1a:	00db      	lsls	r3, r3, #3
 8001b1c:	441a      	add	r2, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	6879      	ldr	r1, [r7, #4]
 8001b2c:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8001b2e:	fb01 f303 	mul.w	r3, r1, r3
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	441a      	add	r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b42:	6879      	ldr	r1, [r7, #4]
 8001b44:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8001b46:	fb01 f303 	mul.w	r3, r1, r3
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	441a      	add	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b5a:	6879      	ldr	r1, [r7, #4]
 8001b5c:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8001b5e:	fb01 f303 	mul.w	r3, r1, r3
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	441a      	add	r2, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	441a      	add	r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b8a:	6879      	ldr	r1, [r7, #4]
 8001b8c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8001b8e:	fb01 f303 	mul.w	r3, r1, r3
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	441a      	add	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ba6:	6879      	ldr	r1, [r7, #4]
 8001ba8:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8001baa:	fb01 f303 	mul.w	r3, r1, r3
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	441a      	add	r2, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bbe:	4a04      	ldr	r2, [pc, #16]	; (8001bd0 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d915      	bls.n	8001bf0 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8001bc4:	e006      	b.n	8001bd4 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8001bc6:	bf00      	nop
 8001bc8:	ffff0003 	.word	0xffff0003
 8001bcc:	10002b00 	.word	0x10002b00
 8001bd0:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001bda:	f043 0220 	orr.w	r2, r3, #32
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2203      	movs	r2, #3
 8001be8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e010      	b.n	8001c12 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	e005      	b.n	8001c04 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	3304      	adds	r3, #4
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c0a:	68fa      	ldr	r2, [r7, #12]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d3f3      	bcc.n	8001bf8 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3714      	adds	r7, #20
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop

08001c20 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b089      	sub	sp, #36	; 0x24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	60b9      	str	r1, [r7, #8]
 8001c2a:	607a      	str	r2, [r7, #4]
 8001c2c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d10a      	bne.n	8001c4c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8001c3e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001c46:	4313      	orrs	r3, r2
 8001c48:	61fb      	str	r3, [r7, #28]
 8001c4a:	e00a      	b.n	8001c62 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8001c54:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8001c5a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001c5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001c60:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	6a1b      	ldr	r3, [r3, #32]
 8001c66:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8001c6c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8001c72:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8001c78:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001c8c:	6839      	ldr	r1, [r7, #0]
 8001c8e:	fb01 f303 	mul.w	r3, r1, r3
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	4413      	add	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	69fa      	ldr	r2, [r7, #28]
 8001c9c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	3304      	adds	r3, #4
 8001ca2:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	3304      	adds	r3, #4
 8001cae:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	617b      	str	r3, [r7, #20]
 8001cb4:	e020      	b.n	8001cf8 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	3303      	adds	r3, #3
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	3302      	adds	r3, #2
 8001cc6:	6879      	ldr	r1, [r7, #4]
 8001cc8:	440b      	add	r3, r1
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8001cce:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	6879      	ldr	r1, [r7, #4]
 8001cd6:	440b      	add	r3, r1
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8001cdc:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8001cde:	6879      	ldr	r1, [r7, #4]
 8001ce0:	697a      	ldr	r2, [r7, #20]
 8001ce2:	440a      	add	r2, r1
 8001ce4:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8001ce6:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	3304      	adds	r3, #4
 8001cf0:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	3304      	adds	r3, #4
 8001cf6:	617b      	str	r3, [r7, #20]
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	0c1b      	lsrs	r3, r3, #16
 8001cfe:	4a06      	ldr	r2, [pc, #24]	; (8001d18 <FDCAN_CopyMessageToRAM+0xf8>)
 8001d00:	5cd3      	ldrb	r3, [r2, r3]
 8001d02:	461a      	mov	r2, r3
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d3d5      	bcc.n	8001cb6 <FDCAN_CopyMessageToRAM+0x96>
  }
}
 8001d0a:	bf00      	nop
 8001d0c:	bf00      	nop
 8001d0e:	3724      	adds	r7, #36	; 0x24
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr
 8001d18:	08007748 	.word	0x08007748

08001d1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b089      	sub	sp, #36	; 0x24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d26:	2300      	movs	r3, #0
 8001d28:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001d2a:	4b86      	ldr	r3, [pc, #536]	; (8001f44 <HAL_GPIO_Init+0x228>)
 8001d2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d2e:	e18c      	b.n	800204a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	2101      	movs	r1, #1
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	fa01 f303 	lsl.w	r3, r1, r3
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f000 817e 	beq.w	8002044 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f003 0303 	and.w	r3, r3, #3
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d005      	beq.n	8001d60 <HAL_GPIO_Init+0x44>
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f003 0303 	and.w	r3, r3, #3
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d130      	bne.n	8001dc2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	2203      	movs	r2, #3
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	43db      	mvns	r3, r3
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4013      	ands	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	68da      	ldr	r2, [r3, #12]
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d96:	2201      	movs	r2, #1
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	43db      	mvns	r3, r3
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	4013      	ands	r3, r2
 8001da4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	091b      	lsrs	r3, r3, #4
 8001dac:	f003 0201 	and.w	r2, r3, #1
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f003 0303 	and.w	r3, r3, #3
 8001dca:	2b03      	cmp	r3, #3
 8001dcc:	d017      	beq.n	8001dfe <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	2203      	movs	r2, #3
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	43db      	mvns	r3, r3
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	4013      	ands	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	689a      	ldr	r2, [r3, #8]
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f003 0303 	and.w	r3, r3, #3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d123      	bne.n	8001e52 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	08da      	lsrs	r2, r3, #3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	3208      	adds	r2, #8
 8001e12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	f003 0307 	and.w	r3, r3, #7
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	220f      	movs	r2, #15
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	43db      	mvns	r3, r3
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	691a      	ldr	r2, [r3, #16]
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	f003 0307 	and.w	r3, r3, #7
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	08da      	lsrs	r2, r3, #3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3208      	adds	r2, #8
 8001e4c:	69b9      	ldr	r1, [r7, #24]
 8001e4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	2203      	movs	r2, #3
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	43db      	mvns	r3, r3
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	4013      	ands	r3, r2
 8001e68:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f003 0203 	and.w	r2, r3, #3
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f000 80d8 	beq.w	8002044 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e94:	4b2c      	ldr	r3, [pc, #176]	; (8001f48 <HAL_GPIO_Init+0x22c>)
 8001e96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e9a:	4a2b      	ldr	r2, [pc, #172]	; (8001f48 <HAL_GPIO_Init+0x22c>)
 8001e9c:	f043 0302 	orr.w	r3, r3, #2
 8001ea0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001ea4:	4b28      	ldr	r3, [pc, #160]	; (8001f48 <HAL_GPIO_Init+0x22c>)
 8001ea6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001eb2:	4a26      	ldr	r2, [pc, #152]	; (8001f4c <HAL_GPIO_Init+0x230>)
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	089b      	lsrs	r3, r3, #2
 8001eb8:	3302      	adds	r3, #2
 8001eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	f003 0303 	and.w	r3, r3, #3
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	220f      	movs	r2, #15
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	43db      	mvns	r3, r3
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a1d      	ldr	r2, [pc, #116]	; (8001f50 <HAL_GPIO_Init+0x234>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d04a      	beq.n	8001f74 <HAL_GPIO_Init+0x258>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a1c      	ldr	r2, [pc, #112]	; (8001f54 <HAL_GPIO_Init+0x238>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d02b      	beq.n	8001f3e <HAL_GPIO_Init+0x222>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a1b      	ldr	r2, [pc, #108]	; (8001f58 <HAL_GPIO_Init+0x23c>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d025      	beq.n	8001f3a <HAL_GPIO_Init+0x21e>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a1a      	ldr	r2, [pc, #104]	; (8001f5c <HAL_GPIO_Init+0x240>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d01f      	beq.n	8001f36 <HAL_GPIO_Init+0x21a>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a19      	ldr	r2, [pc, #100]	; (8001f60 <HAL_GPIO_Init+0x244>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d019      	beq.n	8001f32 <HAL_GPIO_Init+0x216>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a18      	ldr	r2, [pc, #96]	; (8001f64 <HAL_GPIO_Init+0x248>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d013      	beq.n	8001f2e <HAL_GPIO_Init+0x212>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a17      	ldr	r2, [pc, #92]	; (8001f68 <HAL_GPIO_Init+0x24c>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d00d      	beq.n	8001f2a <HAL_GPIO_Init+0x20e>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a16      	ldr	r2, [pc, #88]	; (8001f6c <HAL_GPIO_Init+0x250>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d007      	beq.n	8001f26 <HAL_GPIO_Init+0x20a>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a15      	ldr	r2, [pc, #84]	; (8001f70 <HAL_GPIO_Init+0x254>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d101      	bne.n	8001f22 <HAL_GPIO_Init+0x206>
 8001f1e:	2309      	movs	r3, #9
 8001f20:	e029      	b.n	8001f76 <HAL_GPIO_Init+0x25a>
 8001f22:	230a      	movs	r3, #10
 8001f24:	e027      	b.n	8001f76 <HAL_GPIO_Init+0x25a>
 8001f26:	2307      	movs	r3, #7
 8001f28:	e025      	b.n	8001f76 <HAL_GPIO_Init+0x25a>
 8001f2a:	2306      	movs	r3, #6
 8001f2c:	e023      	b.n	8001f76 <HAL_GPIO_Init+0x25a>
 8001f2e:	2305      	movs	r3, #5
 8001f30:	e021      	b.n	8001f76 <HAL_GPIO_Init+0x25a>
 8001f32:	2304      	movs	r3, #4
 8001f34:	e01f      	b.n	8001f76 <HAL_GPIO_Init+0x25a>
 8001f36:	2303      	movs	r3, #3
 8001f38:	e01d      	b.n	8001f76 <HAL_GPIO_Init+0x25a>
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	e01b      	b.n	8001f76 <HAL_GPIO_Init+0x25a>
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e019      	b.n	8001f76 <HAL_GPIO_Init+0x25a>
 8001f42:	bf00      	nop
 8001f44:	58000080 	.word	0x58000080
 8001f48:	58024400 	.word	0x58024400
 8001f4c:	58000400 	.word	0x58000400
 8001f50:	58020000 	.word	0x58020000
 8001f54:	58020400 	.word	0x58020400
 8001f58:	58020800 	.word	0x58020800
 8001f5c:	58020c00 	.word	0x58020c00
 8001f60:	58021000 	.word	0x58021000
 8001f64:	58021400 	.word	0x58021400
 8001f68:	58021800 	.word	0x58021800
 8001f6c:	58021c00 	.word	0x58021c00
 8001f70:	58022400 	.word	0x58022400
 8001f74:	2300      	movs	r3, #0
 8001f76:	69fa      	ldr	r2, [r7, #28]
 8001f78:	f002 0203 	and.w	r2, r2, #3
 8001f7c:	0092      	lsls	r2, r2, #2
 8001f7e:	4093      	lsls	r3, r2
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f86:	4938      	ldr	r1, [pc, #224]	; (8002068 <HAL_GPIO_Init+0x34c>)
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	089b      	lsrs	r3, r3, #2
 8001f8c:	3302      	adds	r3, #2
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	43db      	mvns	r3, r3
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d003      	beq.n	8001fba <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001fba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001fc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d003      	beq.n	8001fe8 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001fe8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	43db      	mvns	r3, r3
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d003      	beq.n	8002014 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	4313      	orrs	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	43db      	mvns	r3, r3
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	4013      	ands	r3, r2
 8002028:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d003      	beq.n	800203e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	4313      	orrs	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	3301      	adds	r3, #1
 8002048:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	fa22 f303 	lsr.w	r3, r2, r3
 8002054:	2b00      	cmp	r3, #0
 8002056:	f47f ae6b 	bne.w	8001d30 <HAL_GPIO_Init+0x14>
  }
}
 800205a:	bf00      	nop
 800205c:	bf00      	nop
 800205e:	3724      	adds	r7, #36	; 0x24
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr
 8002068:	58000400 	.word	0x58000400

0800206c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	460b      	mov	r3, r1
 8002076:	807b      	strh	r3, [r7, #2]
 8002078:	4613      	mov	r3, r2
 800207a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800207c:	787b      	ldrb	r3, [r7, #1]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d003      	beq.n	800208a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002082:	887a      	ldrh	r2, [r7, #2]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002088:	e003      	b.n	8002092 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800208a:	887b      	ldrh	r3, [r7, #2]
 800208c:	041a      	lsls	r2, r3, #16
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	619a      	str	r2, [r3, #24]
}
 8002092:	bf00      	nop
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
	...

080020a0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80020a8:	4b19      	ldr	r3, [pc, #100]	; (8002110 <HAL_PWREx_ConfigSupply+0x70>)
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	f003 0304 	and.w	r3, r3, #4
 80020b0:	2b04      	cmp	r3, #4
 80020b2:	d00a      	beq.n	80020ca <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80020b4:	4b16      	ldr	r3, [pc, #88]	; (8002110 <HAL_PWREx_ConfigSupply+0x70>)
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	f003 0307 	and.w	r3, r3, #7
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d001      	beq.n	80020c6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e01f      	b.n	8002106 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80020c6:	2300      	movs	r3, #0
 80020c8:	e01d      	b.n	8002106 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80020ca:	4b11      	ldr	r3, [pc, #68]	; (8002110 <HAL_PWREx_ConfigSupply+0x70>)
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	f023 0207 	bic.w	r2, r3, #7
 80020d2:	490f      	ldr	r1, [pc, #60]	; (8002110 <HAL_PWREx_ConfigSupply+0x70>)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80020da:	f7ff f82d 	bl	8001138 <HAL_GetTick>
 80020de:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80020e0:	e009      	b.n	80020f6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80020e2:	f7ff f829 	bl	8001138 <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020f0:	d901      	bls.n	80020f6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e007      	b.n	8002106 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80020f6:	4b06      	ldr	r3, [pc, #24]	; (8002110 <HAL_PWREx_ConfigSupply+0x70>)
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002102:	d1ee      	bne.n	80020e2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	58024800 	.word	0x58024800

08002114 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b08c      	sub	sp, #48	; 0x30
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d101      	bne.n	8002126 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e3c8      	b.n	80028b8 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	2b00      	cmp	r3, #0
 8002130:	f000 8087 	beq.w	8002242 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002134:	4b88      	ldr	r3, [pc, #544]	; (8002358 <HAL_RCC_OscConfig+0x244>)
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800213c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800213e:	4b86      	ldr	r3, [pc, #536]	; (8002358 <HAL_RCC_OscConfig+0x244>)
 8002140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002142:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002146:	2b10      	cmp	r3, #16
 8002148:	d007      	beq.n	800215a <HAL_RCC_OscConfig+0x46>
 800214a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800214c:	2b18      	cmp	r3, #24
 800214e:	d110      	bne.n	8002172 <HAL_RCC_OscConfig+0x5e>
 8002150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002152:	f003 0303 	and.w	r3, r3, #3
 8002156:	2b02      	cmp	r3, #2
 8002158:	d10b      	bne.n	8002172 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800215a:	4b7f      	ldr	r3, [pc, #508]	; (8002358 <HAL_RCC_OscConfig+0x244>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d06c      	beq.n	8002240 <HAL_RCC_OscConfig+0x12c>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d168      	bne.n	8002240 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e3a2      	b.n	80028b8 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800217a:	d106      	bne.n	800218a <HAL_RCC_OscConfig+0x76>
 800217c:	4b76      	ldr	r3, [pc, #472]	; (8002358 <HAL_RCC_OscConfig+0x244>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a75      	ldr	r2, [pc, #468]	; (8002358 <HAL_RCC_OscConfig+0x244>)
 8002182:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002186:	6013      	str	r3, [r2, #0]
 8002188:	e02e      	b.n	80021e8 <HAL_RCC_OscConfig+0xd4>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d10c      	bne.n	80021ac <HAL_RCC_OscConfig+0x98>
 8002192:	4b71      	ldr	r3, [pc, #452]	; (8002358 <HAL_RCC_OscConfig+0x244>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a70      	ldr	r2, [pc, #448]	; (8002358 <HAL_RCC_OscConfig+0x244>)
 8002198:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800219c:	6013      	str	r3, [r2, #0]
 800219e:	4b6e      	ldr	r3, [pc, #440]	; (8002358 <HAL_RCC_OscConfig+0x244>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a6d      	ldr	r2, [pc, #436]	; (8002358 <HAL_RCC_OscConfig+0x244>)
 80021a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021a8:	6013      	str	r3, [r2, #0]
 80021aa:	e01d      	b.n	80021e8 <HAL_RCC_OscConfig+0xd4>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021b4:	d10c      	bne.n	80021d0 <HAL_RCC_OscConfig+0xbc>
 80021b6:	4b68      	ldr	r3, [pc, #416]	; (8002358 <HAL_RCC_OscConfig+0x244>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a67      	ldr	r2, [pc, #412]	; (8002358 <HAL_RCC_OscConfig+0x244>)
 80021bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021c0:	6013      	str	r3, [r2, #0]
 80021c2:	4b65      	ldr	r3, [pc, #404]	; (8002358 <HAL_RCC_OscConfig+0x244>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a64      	ldr	r2, [pc, #400]	; (8002358 <HAL_RCC_OscConfig+0x244>)
 80021c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021cc:	6013      	str	r3, [r2, #0]
 80021ce:	e00b      	b.n	80021e8 <HAL_RCC_OscConfig+0xd4>
 80021d0:	4b61      	ldr	r3, [pc, #388]	; (8002358 <HAL_RCC_OscConfig+0x244>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a60      	ldr	r2, [pc, #384]	; (8002358 <HAL_RCC_OscConfig+0x244>)
 80021d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021da:	6013      	str	r3, [r2, #0]
 80021dc:	4b5e      	ldr	r3, [pc, #376]	; (8002358 <HAL_RCC_OscConfig+0x244>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a5d      	ldr	r2, [pc, #372]	; (8002358 <HAL_RCC_OscConfig+0x244>)
 80021e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d013      	beq.n	8002218 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f0:	f7fe ffa2 	bl	8001138 <HAL_GetTick>
 80021f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80021f6:	e008      	b.n	800220a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021f8:	f7fe ff9e 	bl	8001138 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b64      	cmp	r3, #100	; 0x64
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e356      	b.n	80028b8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800220a:	4b53      	ldr	r3, [pc, #332]	; (8002358 <HAL_RCC_OscConfig+0x244>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d0f0      	beq.n	80021f8 <HAL_RCC_OscConfig+0xe4>
 8002216:	e014      	b.n	8002242 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002218:	f7fe ff8e 	bl	8001138 <HAL_GetTick>
 800221c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800221e:	e008      	b.n	8002232 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002220:	f7fe ff8a 	bl	8001138 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b64      	cmp	r3, #100	; 0x64
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e342      	b.n	80028b8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002232:	4b49      	ldr	r3, [pc, #292]	; (8002358 <HAL_RCC_OscConfig+0x244>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1f0      	bne.n	8002220 <HAL_RCC_OscConfig+0x10c>
 800223e:	e000      	b.n	8002242 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002240:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	f000 808c 	beq.w	8002368 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002250:	4b41      	ldr	r3, [pc, #260]	; (8002358 <HAL_RCC_OscConfig+0x244>)
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002258:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800225a:	4b3f      	ldr	r3, [pc, #252]	; (8002358 <HAL_RCC_OscConfig+0x244>)
 800225c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800225e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002260:	6a3b      	ldr	r3, [r7, #32]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d007      	beq.n	8002276 <HAL_RCC_OscConfig+0x162>
 8002266:	6a3b      	ldr	r3, [r7, #32]
 8002268:	2b18      	cmp	r3, #24
 800226a:	d137      	bne.n	80022dc <HAL_RCC_OscConfig+0x1c8>
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	f003 0303 	and.w	r3, r3, #3
 8002272:	2b00      	cmp	r3, #0
 8002274:	d132      	bne.n	80022dc <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002276:	4b38      	ldr	r3, [pc, #224]	; (8002358 <HAL_RCC_OscConfig+0x244>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0304 	and.w	r3, r3, #4
 800227e:	2b00      	cmp	r3, #0
 8002280:	d005      	beq.n	800228e <HAL_RCC_OscConfig+0x17a>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e314      	b.n	80028b8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800228e:	4b32      	ldr	r3, [pc, #200]	; (8002358 <HAL_RCC_OscConfig+0x244>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f023 0219 	bic.w	r2, r3, #25
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	492f      	ldr	r1, [pc, #188]	; (8002358 <HAL_RCC_OscConfig+0x244>)
 800229c:	4313      	orrs	r3, r2
 800229e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a0:	f7fe ff4a 	bl	8001138 <HAL_GetTick>
 80022a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022a6:	e008      	b.n	80022ba <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022a8:	f7fe ff46 	bl	8001138 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e2fe      	b.n	80028b8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022ba:	4b27      	ldr	r3, [pc, #156]	; (8002358 <HAL_RCC_OscConfig+0x244>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0304 	and.w	r3, r3, #4
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d0f0      	beq.n	80022a8 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022c6:	4b24      	ldr	r3, [pc, #144]	; (8002358 <HAL_RCC_OscConfig+0x244>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	061b      	lsls	r3, r3, #24
 80022d4:	4920      	ldr	r1, [pc, #128]	; (8002358 <HAL_RCC_OscConfig+0x244>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022da:	e045      	b.n	8002368 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d026      	beq.n	8002332 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80022e4:	4b1c      	ldr	r3, [pc, #112]	; (8002358 <HAL_RCC_OscConfig+0x244>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f023 0219 	bic.w	r2, r3, #25
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	4919      	ldr	r1, [pc, #100]	; (8002358 <HAL_RCC_OscConfig+0x244>)
 80022f2:	4313      	orrs	r3, r2
 80022f4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f6:	f7fe ff1f 	bl	8001138 <HAL_GetTick>
 80022fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022fc:	e008      	b.n	8002310 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022fe:	f7fe ff1b 	bl	8001138 <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	2b02      	cmp	r3, #2
 800230a:	d901      	bls.n	8002310 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e2d3      	b.n	80028b8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002310:	4b11      	ldr	r3, [pc, #68]	; (8002358 <HAL_RCC_OscConfig+0x244>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0304 	and.w	r3, r3, #4
 8002318:	2b00      	cmp	r3, #0
 800231a:	d0f0      	beq.n	80022fe <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800231c:	4b0e      	ldr	r3, [pc, #56]	; (8002358 <HAL_RCC_OscConfig+0x244>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	691b      	ldr	r3, [r3, #16]
 8002328:	061b      	lsls	r3, r3, #24
 800232a:	490b      	ldr	r1, [pc, #44]	; (8002358 <HAL_RCC_OscConfig+0x244>)
 800232c:	4313      	orrs	r3, r2
 800232e:	604b      	str	r3, [r1, #4]
 8002330:	e01a      	b.n	8002368 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002332:	4b09      	ldr	r3, [pc, #36]	; (8002358 <HAL_RCC_OscConfig+0x244>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a08      	ldr	r2, [pc, #32]	; (8002358 <HAL_RCC_OscConfig+0x244>)
 8002338:	f023 0301 	bic.w	r3, r3, #1
 800233c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800233e:	f7fe fefb 	bl	8001138 <HAL_GetTick>
 8002342:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002344:	e00a      	b.n	800235c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002346:	f7fe fef7 	bl	8001138 <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	2b02      	cmp	r3, #2
 8002352:	d903      	bls.n	800235c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e2af      	b.n	80028b8 <HAL_RCC_OscConfig+0x7a4>
 8002358:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800235c:	4b96      	ldr	r3, [pc, #600]	; (80025b8 <HAL_RCC_OscConfig+0x4a4>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0304 	and.w	r3, r3, #4
 8002364:	2b00      	cmp	r3, #0
 8002366:	d1ee      	bne.n	8002346 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0310 	and.w	r3, r3, #16
 8002370:	2b00      	cmp	r3, #0
 8002372:	d06a      	beq.n	800244a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002374:	4b90      	ldr	r3, [pc, #576]	; (80025b8 <HAL_RCC_OscConfig+0x4a4>)
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800237c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800237e:	4b8e      	ldr	r3, [pc, #568]	; (80025b8 <HAL_RCC_OscConfig+0x4a4>)
 8002380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002382:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	2b08      	cmp	r3, #8
 8002388:	d007      	beq.n	800239a <HAL_RCC_OscConfig+0x286>
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	2b18      	cmp	r3, #24
 800238e:	d11b      	bne.n	80023c8 <HAL_RCC_OscConfig+0x2b4>
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	f003 0303 	and.w	r3, r3, #3
 8002396:	2b01      	cmp	r3, #1
 8002398:	d116      	bne.n	80023c8 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800239a:	4b87      	ldr	r3, [pc, #540]	; (80025b8 <HAL_RCC_OscConfig+0x4a4>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d005      	beq.n	80023b2 <HAL_RCC_OscConfig+0x29e>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	69db      	ldr	r3, [r3, #28]
 80023aa:	2b80      	cmp	r3, #128	; 0x80
 80023ac:	d001      	beq.n	80023b2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e282      	b.n	80028b8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80023b2:	4b81      	ldr	r3, [pc, #516]	; (80025b8 <HAL_RCC_OscConfig+0x4a4>)
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a1b      	ldr	r3, [r3, #32]
 80023be:	061b      	lsls	r3, r3, #24
 80023c0:	497d      	ldr	r1, [pc, #500]	; (80025b8 <HAL_RCC_OscConfig+0x4a4>)
 80023c2:	4313      	orrs	r3, r2
 80023c4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80023c6:	e040      	b.n	800244a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	69db      	ldr	r3, [r3, #28]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d023      	beq.n	8002418 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80023d0:	4b79      	ldr	r3, [pc, #484]	; (80025b8 <HAL_RCC_OscConfig+0x4a4>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a78      	ldr	r2, [pc, #480]	; (80025b8 <HAL_RCC_OscConfig+0x4a4>)
 80023d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023dc:	f7fe feac 	bl	8001138 <HAL_GetTick>
 80023e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80023e2:	e008      	b.n	80023f6 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80023e4:	f7fe fea8 	bl	8001138 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e260      	b.n	80028b8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80023f6:	4b70      	ldr	r3, [pc, #448]	; (80025b8 <HAL_RCC_OscConfig+0x4a4>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d0f0      	beq.n	80023e4 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002402:	4b6d      	ldr	r3, [pc, #436]	; (80025b8 <HAL_RCC_OscConfig+0x4a4>)
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	061b      	lsls	r3, r3, #24
 8002410:	4969      	ldr	r1, [pc, #420]	; (80025b8 <HAL_RCC_OscConfig+0x4a4>)
 8002412:	4313      	orrs	r3, r2
 8002414:	60cb      	str	r3, [r1, #12]
 8002416:	e018      	b.n	800244a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002418:	4b67      	ldr	r3, [pc, #412]	; (80025b8 <HAL_RCC_OscConfig+0x4a4>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a66      	ldr	r2, [pc, #408]	; (80025b8 <HAL_RCC_OscConfig+0x4a4>)
 800241e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002422:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002424:	f7fe fe88 	bl	8001138 <HAL_GetTick>
 8002428:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800242a:	e008      	b.n	800243e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800242c:	f7fe fe84 	bl	8001138 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e23c      	b.n	80028b8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800243e:	4b5e      	ldr	r3, [pc, #376]	; (80025b8 <HAL_RCC_OscConfig+0x4a4>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002446:	2b00      	cmp	r3, #0
 8002448:	d1f0      	bne.n	800242c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0308 	and.w	r3, r3, #8
 8002452:	2b00      	cmp	r3, #0
 8002454:	d036      	beq.n	80024c4 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	695b      	ldr	r3, [r3, #20]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d019      	beq.n	8002492 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800245e:	4b56      	ldr	r3, [pc, #344]	; (80025b8 <HAL_RCC_OscConfig+0x4a4>)
 8002460:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002462:	4a55      	ldr	r2, [pc, #340]	; (80025b8 <HAL_RCC_OscConfig+0x4a4>)
 8002464:	f043 0301 	orr.w	r3, r3, #1
 8002468:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800246a:	f7fe fe65 	bl	8001138 <HAL_GetTick>
 800246e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002470:	e008      	b.n	8002484 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002472:	f7fe fe61 	bl	8001138 <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b02      	cmp	r3, #2
 800247e:	d901      	bls.n	8002484 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e219      	b.n	80028b8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002484:	4b4c      	ldr	r3, [pc, #304]	; (80025b8 <HAL_RCC_OscConfig+0x4a4>)
 8002486:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d0f0      	beq.n	8002472 <HAL_RCC_OscConfig+0x35e>
 8002490:	e018      	b.n	80024c4 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002492:	4b49      	ldr	r3, [pc, #292]	; (80025b8 <HAL_RCC_OscConfig+0x4a4>)
 8002494:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002496:	4a48      	ldr	r2, [pc, #288]	; (80025b8 <HAL_RCC_OscConfig+0x4a4>)
 8002498:	f023 0301 	bic.w	r3, r3, #1
 800249c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800249e:	f7fe fe4b 	bl	8001138 <HAL_GetTick>
 80024a2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80024a4:	e008      	b.n	80024b8 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024a6:	f7fe fe47 	bl	8001138 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d901      	bls.n	80024b8 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e1ff      	b.n	80028b8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80024b8:	4b3f      	ldr	r3, [pc, #252]	; (80025b8 <HAL_RCC_OscConfig+0x4a4>)
 80024ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024bc:	f003 0302 	and.w	r3, r3, #2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d1f0      	bne.n	80024a6 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0320 	and.w	r3, r3, #32
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d036      	beq.n	800253e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d019      	beq.n	800250c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80024d8:	4b37      	ldr	r3, [pc, #220]	; (80025b8 <HAL_RCC_OscConfig+0x4a4>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a36      	ldr	r2, [pc, #216]	; (80025b8 <HAL_RCC_OscConfig+0x4a4>)
 80024de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80024e2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80024e4:	f7fe fe28 	bl	8001138 <HAL_GetTick>
 80024e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80024ea:	e008      	b.n	80024fe <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024ec:	f7fe fe24 	bl	8001138 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e1dc      	b.n	80028b8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80024fe:	4b2e      	ldr	r3, [pc, #184]	; (80025b8 <HAL_RCC_OscConfig+0x4a4>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d0f0      	beq.n	80024ec <HAL_RCC_OscConfig+0x3d8>
 800250a:	e018      	b.n	800253e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800250c:	4b2a      	ldr	r3, [pc, #168]	; (80025b8 <HAL_RCC_OscConfig+0x4a4>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a29      	ldr	r2, [pc, #164]	; (80025b8 <HAL_RCC_OscConfig+0x4a4>)
 8002512:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002516:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002518:	f7fe fe0e 	bl	8001138 <HAL_GetTick>
 800251c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800251e:	e008      	b.n	8002532 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002520:	f7fe fe0a 	bl	8001138 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b02      	cmp	r3, #2
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e1c2      	b.n	80028b8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002532:	4b21      	ldr	r3, [pc, #132]	; (80025b8 <HAL_RCC_OscConfig+0x4a4>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d1f0      	bne.n	8002520 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0304 	and.w	r3, r3, #4
 8002546:	2b00      	cmp	r3, #0
 8002548:	f000 8086 	beq.w	8002658 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800254c:	4b1b      	ldr	r3, [pc, #108]	; (80025bc <HAL_RCC_OscConfig+0x4a8>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a1a      	ldr	r2, [pc, #104]	; (80025bc <HAL_RCC_OscConfig+0x4a8>)
 8002552:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002556:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002558:	f7fe fdee 	bl	8001138 <HAL_GetTick>
 800255c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800255e:	e008      	b.n	8002572 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002560:	f7fe fdea 	bl	8001138 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b64      	cmp	r3, #100	; 0x64
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e1a2      	b.n	80028b8 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002572:	4b12      	ldr	r3, [pc, #72]	; (80025bc <HAL_RCC_OscConfig+0x4a8>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800257a:	2b00      	cmp	r3, #0
 800257c:	d0f0      	beq.n	8002560 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d106      	bne.n	8002594 <HAL_RCC_OscConfig+0x480>
 8002586:	4b0c      	ldr	r3, [pc, #48]	; (80025b8 <HAL_RCC_OscConfig+0x4a4>)
 8002588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800258a:	4a0b      	ldr	r2, [pc, #44]	; (80025b8 <HAL_RCC_OscConfig+0x4a4>)
 800258c:	f043 0301 	orr.w	r3, r3, #1
 8002590:	6713      	str	r3, [r2, #112]	; 0x70
 8002592:	e032      	b.n	80025fa <HAL_RCC_OscConfig+0x4e6>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d111      	bne.n	80025c0 <HAL_RCC_OscConfig+0x4ac>
 800259c:	4b06      	ldr	r3, [pc, #24]	; (80025b8 <HAL_RCC_OscConfig+0x4a4>)
 800259e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a0:	4a05      	ldr	r2, [pc, #20]	; (80025b8 <HAL_RCC_OscConfig+0x4a4>)
 80025a2:	f023 0301 	bic.w	r3, r3, #1
 80025a6:	6713      	str	r3, [r2, #112]	; 0x70
 80025a8:	4b03      	ldr	r3, [pc, #12]	; (80025b8 <HAL_RCC_OscConfig+0x4a4>)
 80025aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ac:	4a02      	ldr	r2, [pc, #8]	; (80025b8 <HAL_RCC_OscConfig+0x4a4>)
 80025ae:	f023 0304 	bic.w	r3, r3, #4
 80025b2:	6713      	str	r3, [r2, #112]	; 0x70
 80025b4:	e021      	b.n	80025fa <HAL_RCC_OscConfig+0x4e6>
 80025b6:	bf00      	nop
 80025b8:	58024400 	.word	0x58024400
 80025bc:	58024800 	.word	0x58024800
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	2b05      	cmp	r3, #5
 80025c6:	d10c      	bne.n	80025e2 <HAL_RCC_OscConfig+0x4ce>
 80025c8:	4b83      	ldr	r3, [pc, #524]	; (80027d8 <HAL_RCC_OscConfig+0x6c4>)
 80025ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025cc:	4a82      	ldr	r2, [pc, #520]	; (80027d8 <HAL_RCC_OscConfig+0x6c4>)
 80025ce:	f043 0304 	orr.w	r3, r3, #4
 80025d2:	6713      	str	r3, [r2, #112]	; 0x70
 80025d4:	4b80      	ldr	r3, [pc, #512]	; (80027d8 <HAL_RCC_OscConfig+0x6c4>)
 80025d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d8:	4a7f      	ldr	r2, [pc, #508]	; (80027d8 <HAL_RCC_OscConfig+0x6c4>)
 80025da:	f043 0301 	orr.w	r3, r3, #1
 80025de:	6713      	str	r3, [r2, #112]	; 0x70
 80025e0:	e00b      	b.n	80025fa <HAL_RCC_OscConfig+0x4e6>
 80025e2:	4b7d      	ldr	r3, [pc, #500]	; (80027d8 <HAL_RCC_OscConfig+0x6c4>)
 80025e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e6:	4a7c      	ldr	r2, [pc, #496]	; (80027d8 <HAL_RCC_OscConfig+0x6c4>)
 80025e8:	f023 0301 	bic.w	r3, r3, #1
 80025ec:	6713      	str	r3, [r2, #112]	; 0x70
 80025ee:	4b7a      	ldr	r3, [pc, #488]	; (80027d8 <HAL_RCC_OscConfig+0x6c4>)
 80025f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f2:	4a79      	ldr	r2, [pc, #484]	; (80027d8 <HAL_RCC_OscConfig+0x6c4>)
 80025f4:	f023 0304 	bic.w	r3, r3, #4
 80025f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d015      	beq.n	800262e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002602:	f7fe fd99 	bl	8001138 <HAL_GetTick>
 8002606:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002608:	e00a      	b.n	8002620 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800260a:	f7fe fd95 	bl	8001138 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	f241 3288 	movw	r2, #5000	; 0x1388
 8002618:	4293      	cmp	r3, r2
 800261a:	d901      	bls.n	8002620 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e14b      	b.n	80028b8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002620:	4b6d      	ldr	r3, [pc, #436]	; (80027d8 <HAL_RCC_OscConfig+0x6c4>)
 8002622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002624:	f003 0302 	and.w	r3, r3, #2
 8002628:	2b00      	cmp	r3, #0
 800262a:	d0ee      	beq.n	800260a <HAL_RCC_OscConfig+0x4f6>
 800262c:	e014      	b.n	8002658 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800262e:	f7fe fd83 	bl	8001138 <HAL_GetTick>
 8002632:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002634:	e00a      	b.n	800264c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002636:	f7fe fd7f 	bl	8001138 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	f241 3288 	movw	r2, #5000	; 0x1388
 8002644:	4293      	cmp	r3, r2
 8002646:	d901      	bls.n	800264c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e135      	b.n	80028b8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800264c:	4b62      	ldr	r3, [pc, #392]	; (80027d8 <HAL_RCC_OscConfig+0x6c4>)
 800264e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d1ee      	bne.n	8002636 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265c:	2b00      	cmp	r3, #0
 800265e:	f000 812a 	beq.w	80028b6 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002662:	4b5d      	ldr	r3, [pc, #372]	; (80027d8 <HAL_RCC_OscConfig+0x6c4>)
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800266a:	2b18      	cmp	r3, #24
 800266c:	f000 80ba 	beq.w	80027e4 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002674:	2b02      	cmp	r3, #2
 8002676:	f040 8095 	bne.w	80027a4 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800267a:	4b57      	ldr	r3, [pc, #348]	; (80027d8 <HAL_RCC_OscConfig+0x6c4>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a56      	ldr	r2, [pc, #344]	; (80027d8 <HAL_RCC_OscConfig+0x6c4>)
 8002680:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002684:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002686:	f7fe fd57 	bl	8001138 <HAL_GetTick>
 800268a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800268c:	e008      	b.n	80026a0 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800268e:	f7fe fd53 	bl	8001138 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	2b02      	cmp	r3, #2
 800269a:	d901      	bls.n	80026a0 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e10b      	b.n	80028b8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80026a0:	4b4d      	ldr	r3, [pc, #308]	; (80027d8 <HAL_RCC_OscConfig+0x6c4>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d1f0      	bne.n	800268e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026ac:	4b4a      	ldr	r3, [pc, #296]	; (80027d8 <HAL_RCC_OscConfig+0x6c4>)
 80026ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026b0:	4b4a      	ldr	r3, [pc, #296]	; (80027dc <HAL_RCC_OscConfig+0x6c8>)
 80026b2:	4013      	ands	r3, r2
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80026bc:	0112      	lsls	r2, r2, #4
 80026be:	430a      	orrs	r2, r1
 80026c0:	4945      	ldr	r1, [pc, #276]	; (80027d8 <HAL_RCC_OscConfig+0x6c4>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	628b      	str	r3, [r1, #40]	; 0x28
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ca:	3b01      	subs	r3, #1
 80026cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026d4:	3b01      	subs	r3, #1
 80026d6:	025b      	lsls	r3, r3, #9
 80026d8:	b29b      	uxth	r3, r3
 80026da:	431a      	orrs	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e0:	3b01      	subs	r3, #1
 80026e2:	041b      	lsls	r3, r3, #16
 80026e4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80026e8:	431a      	orrs	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ee:	3b01      	subs	r3, #1
 80026f0:	061b      	lsls	r3, r3, #24
 80026f2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80026f6:	4938      	ldr	r1, [pc, #224]	; (80027d8 <HAL_RCC_OscConfig+0x6c4>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80026fc:	4b36      	ldr	r3, [pc, #216]	; (80027d8 <HAL_RCC_OscConfig+0x6c4>)
 80026fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002700:	4a35      	ldr	r2, [pc, #212]	; (80027d8 <HAL_RCC_OscConfig+0x6c4>)
 8002702:	f023 0301 	bic.w	r3, r3, #1
 8002706:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002708:	4b33      	ldr	r3, [pc, #204]	; (80027d8 <HAL_RCC_OscConfig+0x6c4>)
 800270a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800270c:	4b34      	ldr	r3, [pc, #208]	; (80027e0 <HAL_RCC_OscConfig+0x6cc>)
 800270e:	4013      	ands	r3, r2
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002714:	00d2      	lsls	r2, r2, #3
 8002716:	4930      	ldr	r1, [pc, #192]	; (80027d8 <HAL_RCC_OscConfig+0x6c4>)
 8002718:	4313      	orrs	r3, r2
 800271a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800271c:	4b2e      	ldr	r3, [pc, #184]	; (80027d8 <HAL_RCC_OscConfig+0x6c4>)
 800271e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002720:	f023 020c 	bic.w	r2, r3, #12
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002728:	492b      	ldr	r1, [pc, #172]	; (80027d8 <HAL_RCC_OscConfig+0x6c4>)
 800272a:	4313      	orrs	r3, r2
 800272c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800272e:	4b2a      	ldr	r3, [pc, #168]	; (80027d8 <HAL_RCC_OscConfig+0x6c4>)
 8002730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002732:	f023 0202 	bic.w	r2, r3, #2
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273a:	4927      	ldr	r1, [pc, #156]	; (80027d8 <HAL_RCC_OscConfig+0x6c4>)
 800273c:	4313      	orrs	r3, r2
 800273e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002740:	4b25      	ldr	r3, [pc, #148]	; (80027d8 <HAL_RCC_OscConfig+0x6c4>)
 8002742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002744:	4a24      	ldr	r2, [pc, #144]	; (80027d8 <HAL_RCC_OscConfig+0x6c4>)
 8002746:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800274a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800274c:	4b22      	ldr	r3, [pc, #136]	; (80027d8 <HAL_RCC_OscConfig+0x6c4>)
 800274e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002750:	4a21      	ldr	r2, [pc, #132]	; (80027d8 <HAL_RCC_OscConfig+0x6c4>)
 8002752:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002756:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002758:	4b1f      	ldr	r3, [pc, #124]	; (80027d8 <HAL_RCC_OscConfig+0x6c4>)
 800275a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800275c:	4a1e      	ldr	r2, [pc, #120]	; (80027d8 <HAL_RCC_OscConfig+0x6c4>)
 800275e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002762:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002764:	4b1c      	ldr	r3, [pc, #112]	; (80027d8 <HAL_RCC_OscConfig+0x6c4>)
 8002766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002768:	4a1b      	ldr	r2, [pc, #108]	; (80027d8 <HAL_RCC_OscConfig+0x6c4>)
 800276a:	f043 0301 	orr.w	r3, r3, #1
 800276e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002770:	4b19      	ldr	r3, [pc, #100]	; (80027d8 <HAL_RCC_OscConfig+0x6c4>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a18      	ldr	r2, [pc, #96]	; (80027d8 <HAL_RCC_OscConfig+0x6c4>)
 8002776:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800277a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800277c:	f7fe fcdc 	bl	8001138 <HAL_GetTick>
 8002780:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002782:	e008      	b.n	8002796 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002784:	f7fe fcd8 	bl	8001138 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b02      	cmp	r3, #2
 8002790:	d901      	bls.n	8002796 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e090      	b.n	80028b8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002796:	4b10      	ldr	r3, [pc, #64]	; (80027d8 <HAL_RCC_OscConfig+0x6c4>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d0f0      	beq.n	8002784 <HAL_RCC_OscConfig+0x670>
 80027a2:	e088      	b.n	80028b6 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027a4:	4b0c      	ldr	r3, [pc, #48]	; (80027d8 <HAL_RCC_OscConfig+0x6c4>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a0b      	ldr	r2, [pc, #44]	; (80027d8 <HAL_RCC_OscConfig+0x6c4>)
 80027aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b0:	f7fe fcc2 	bl	8001138 <HAL_GetTick>
 80027b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80027b6:	e008      	b.n	80027ca <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027b8:	f7fe fcbe 	bl	8001138 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e076      	b.n	80028b8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80027ca:	4b03      	ldr	r3, [pc, #12]	; (80027d8 <HAL_RCC_OscConfig+0x6c4>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1f0      	bne.n	80027b8 <HAL_RCC_OscConfig+0x6a4>
 80027d6:	e06e      	b.n	80028b6 <HAL_RCC_OscConfig+0x7a2>
 80027d8:	58024400 	.word	0x58024400
 80027dc:	fffffc0c 	.word	0xfffffc0c
 80027e0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80027e4:	4b36      	ldr	r3, [pc, #216]	; (80028c0 <HAL_RCC_OscConfig+0x7ac>)
 80027e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80027ea:	4b35      	ldr	r3, [pc, #212]	; (80028c0 <HAL_RCC_OscConfig+0x7ac>)
 80027ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ee:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d031      	beq.n	800285c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	f003 0203 	and.w	r2, r3, #3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002802:	429a      	cmp	r2, r3
 8002804:	d12a      	bne.n	800285c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	091b      	lsrs	r3, r3, #4
 800280a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002812:	429a      	cmp	r2, r3
 8002814:	d122      	bne.n	800285c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002820:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002822:	429a      	cmp	r2, r3
 8002824:	d11a      	bne.n	800285c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	0a5b      	lsrs	r3, r3, #9
 800282a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002832:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002834:	429a      	cmp	r2, r3
 8002836:	d111      	bne.n	800285c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	0c1b      	lsrs	r3, r3, #16
 800283c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002844:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002846:	429a      	cmp	r2, r3
 8002848:	d108      	bne.n	800285c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	0e1b      	lsrs	r3, r3, #24
 800284e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002856:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002858:	429a      	cmp	r2, r3
 800285a:	d001      	beq.n	8002860 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e02b      	b.n	80028b8 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002860:	4b17      	ldr	r3, [pc, #92]	; (80028c0 <HAL_RCC_OscConfig+0x7ac>)
 8002862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002864:	08db      	lsrs	r3, r3, #3
 8002866:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800286a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002870:	693a      	ldr	r2, [r7, #16]
 8002872:	429a      	cmp	r2, r3
 8002874:	d01f      	beq.n	80028b6 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002876:	4b12      	ldr	r3, [pc, #72]	; (80028c0 <HAL_RCC_OscConfig+0x7ac>)
 8002878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800287a:	4a11      	ldr	r2, [pc, #68]	; (80028c0 <HAL_RCC_OscConfig+0x7ac>)
 800287c:	f023 0301 	bic.w	r3, r3, #1
 8002880:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002882:	f7fe fc59 	bl	8001138 <HAL_GetTick>
 8002886:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002888:	bf00      	nop
 800288a:	f7fe fc55 	bl	8001138 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002892:	4293      	cmp	r3, r2
 8002894:	d0f9      	beq.n	800288a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002896:	4b0a      	ldr	r3, [pc, #40]	; (80028c0 <HAL_RCC_OscConfig+0x7ac>)
 8002898:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800289a:	4b0a      	ldr	r3, [pc, #40]	; (80028c4 <HAL_RCC_OscConfig+0x7b0>)
 800289c:	4013      	ands	r3, r2
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80028a2:	00d2      	lsls	r2, r2, #3
 80028a4:	4906      	ldr	r1, [pc, #24]	; (80028c0 <HAL_RCC_OscConfig+0x7ac>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80028aa:	4b05      	ldr	r3, [pc, #20]	; (80028c0 <HAL_RCC_OscConfig+0x7ac>)
 80028ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ae:	4a04      	ldr	r2, [pc, #16]	; (80028c0 <HAL_RCC_OscConfig+0x7ac>)
 80028b0:	f043 0301 	orr.w	r3, r3, #1
 80028b4:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3730      	adds	r7, #48	; 0x30
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	58024400 	.word	0x58024400
 80028c4:	ffff0007 	.word	0xffff0007

080028c8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b086      	sub	sp, #24
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e19c      	b.n	8002c16 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028dc:	4b8a      	ldr	r3, [pc, #552]	; (8002b08 <HAL_RCC_ClockConfig+0x240>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 030f 	and.w	r3, r3, #15
 80028e4:	683a      	ldr	r2, [r7, #0]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d910      	bls.n	800290c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ea:	4b87      	ldr	r3, [pc, #540]	; (8002b08 <HAL_RCC_ClockConfig+0x240>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f023 020f 	bic.w	r2, r3, #15
 80028f2:	4985      	ldr	r1, [pc, #532]	; (8002b08 <HAL_RCC_ClockConfig+0x240>)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028fa:	4b83      	ldr	r3, [pc, #524]	; (8002b08 <HAL_RCC_ClockConfig+0x240>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 030f 	and.w	r3, r3, #15
 8002902:	683a      	ldr	r2, [r7, #0]
 8002904:	429a      	cmp	r2, r3
 8002906:	d001      	beq.n	800290c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e184      	b.n	8002c16 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0304 	and.w	r3, r3, #4
 8002914:	2b00      	cmp	r3, #0
 8002916:	d010      	beq.n	800293a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	691a      	ldr	r2, [r3, #16]
 800291c:	4b7b      	ldr	r3, [pc, #492]	; (8002b0c <HAL_RCC_ClockConfig+0x244>)
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002924:	429a      	cmp	r2, r3
 8002926:	d908      	bls.n	800293a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002928:	4b78      	ldr	r3, [pc, #480]	; (8002b0c <HAL_RCC_ClockConfig+0x244>)
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	4975      	ldr	r1, [pc, #468]	; (8002b0c <HAL_RCC_ClockConfig+0x244>)
 8002936:	4313      	orrs	r3, r2
 8002938:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0308 	and.w	r3, r3, #8
 8002942:	2b00      	cmp	r3, #0
 8002944:	d010      	beq.n	8002968 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	695a      	ldr	r2, [r3, #20]
 800294a:	4b70      	ldr	r3, [pc, #448]	; (8002b0c <HAL_RCC_ClockConfig+0x244>)
 800294c:	69db      	ldr	r3, [r3, #28]
 800294e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002952:	429a      	cmp	r2, r3
 8002954:	d908      	bls.n	8002968 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002956:	4b6d      	ldr	r3, [pc, #436]	; (8002b0c <HAL_RCC_ClockConfig+0x244>)
 8002958:	69db      	ldr	r3, [r3, #28]
 800295a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	695b      	ldr	r3, [r3, #20]
 8002962:	496a      	ldr	r1, [pc, #424]	; (8002b0c <HAL_RCC_ClockConfig+0x244>)
 8002964:	4313      	orrs	r3, r2
 8002966:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0310 	and.w	r3, r3, #16
 8002970:	2b00      	cmp	r3, #0
 8002972:	d010      	beq.n	8002996 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	699a      	ldr	r2, [r3, #24]
 8002978:	4b64      	ldr	r3, [pc, #400]	; (8002b0c <HAL_RCC_ClockConfig+0x244>)
 800297a:	69db      	ldr	r3, [r3, #28]
 800297c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002980:	429a      	cmp	r2, r3
 8002982:	d908      	bls.n	8002996 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002984:	4b61      	ldr	r3, [pc, #388]	; (8002b0c <HAL_RCC_ClockConfig+0x244>)
 8002986:	69db      	ldr	r3, [r3, #28]
 8002988:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	495e      	ldr	r1, [pc, #376]	; (8002b0c <HAL_RCC_ClockConfig+0x244>)
 8002992:	4313      	orrs	r3, r2
 8002994:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0320 	and.w	r3, r3, #32
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d010      	beq.n	80029c4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	69da      	ldr	r2, [r3, #28]
 80029a6:	4b59      	ldr	r3, [pc, #356]	; (8002b0c <HAL_RCC_ClockConfig+0x244>)
 80029a8:	6a1b      	ldr	r3, [r3, #32]
 80029aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d908      	bls.n	80029c4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80029b2:	4b56      	ldr	r3, [pc, #344]	; (8002b0c <HAL_RCC_ClockConfig+0x244>)
 80029b4:	6a1b      	ldr	r3, [r3, #32]
 80029b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	69db      	ldr	r3, [r3, #28]
 80029be:	4953      	ldr	r1, [pc, #332]	; (8002b0c <HAL_RCC_ClockConfig+0x244>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0302 	and.w	r3, r3, #2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d010      	beq.n	80029f2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	68da      	ldr	r2, [r3, #12]
 80029d4:	4b4d      	ldr	r3, [pc, #308]	; (8002b0c <HAL_RCC_ClockConfig+0x244>)
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	f003 030f 	and.w	r3, r3, #15
 80029dc:	429a      	cmp	r2, r3
 80029de:	d908      	bls.n	80029f2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029e0:	4b4a      	ldr	r3, [pc, #296]	; (8002b0c <HAL_RCC_ClockConfig+0x244>)
 80029e2:	699b      	ldr	r3, [r3, #24]
 80029e4:	f023 020f 	bic.w	r2, r3, #15
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	4947      	ldr	r1, [pc, #284]	; (8002b0c <HAL_RCC_ClockConfig+0x244>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d055      	beq.n	8002aaa <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80029fe:	4b43      	ldr	r3, [pc, #268]	; (8002b0c <HAL_RCC_ClockConfig+0x244>)
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	4940      	ldr	r1, [pc, #256]	; (8002b0c <HAL_RCC_ClockConfig+0x244>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d107      	bne.n	8002a28 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a18:	4b3c      	ldr	r3, [pc, #240]	; (8002b0c <HAL_RCC_ClockConfig+0x244>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d121      	bne.n	8002a68 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e0f6      	b.n	8002c16 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	2b03      	cmp	r3, #3
 8002a2e:	d107      	bne.n	8002a40 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a30:	4b36      	ldr	r3, [pc, #216]	; (8002b0c <HAL_RCC_ClockConfig+0x244>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d115      	bne.n	8002a68 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e0ea      	b.n	8002c16 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d107      	bne.n	8002a58 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a48:	4b30      	ldr	r3, [pc, #192]	; (8002b0c <HAL_RCC_ClockConfig+0x244>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d109      	bne.n	8002a68 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e0de      	b.n	8002c16 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a58:	4b2c      	ldr	r3, [pc, #176]	; (8002b0c <HAL_RCC_ClockConfig+0x244>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0304 	and.w	r3, r3, #4
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d101      	bne.n	8002a68 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e0d6      	b.n	8002c16 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a68:	4b28      	ldr	r3, [pc, #160]	; (8002b0c <HAL_RCC_ClockConfig+0x244>)
 8002a6a:	691b      	ldr	r3, [r3, #16]
 8002a6c:	f023 0207 	bic.w	r2, r3, #7
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	4925      	ldr	r1, [pc, #148]	; (8002b0c <HAL_RCC_ClockConfig+0x244>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a7a:	f7fe fb5d 	bl	8001138 <HAL_GetTick>
 8002a7e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a80:	e00a      	b.n	8002a98 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a82:	f7fe fb59 	bl	8001138 <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d901      	bls.n	8002a98 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e0be      	b.n	8002c16 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a98:	4b1c      	ldr	r3, [pc, #112]	; (8002b0c <HAL_RCC_ClockConfig+0x244>)
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	00db      	lsls	r3, r3, #3
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d1eb      	bne.n	8002a82 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d010      	beq.n	8002ad8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	68da      	ldr	r2, [r3, #12]
 8002aba:	4b14      	ldr	r3, [pc, #80]	; (8002b0c <HAL_RCC_ClockConfig+0x244>)
 8002abc:	699b      	ldr	r3, [r3, #24]
 8002abe:	f003 030f 	and.w	r3, r3, #15
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d208      	bcs.n	8002ad8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ac6:	4b11      	ldr	r3, [pc, #68]	; (8002b0c <HAL_RCC_ClockConfig+0x244>)
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	f023 020f 	bic.w	r2, r3, #15
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	490e      	ldr	r1, [pc, #56]	; (8002b0c <HAL_RCC_ClockConfig+0x244>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ad8:	4b0b      	ldr	r3, [pc, #44]	; (8002b08 <HAL_RCC_ClockConfig+0x240>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 030f 	and.w	r3, r3, #15
 8002ae0:	683a      	ldr	r2, [r7, #0]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d214      	bcs.n	8002b10 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ae6:	4b08      	ldr	r3, [pc, #32]	; (8002b08 <HAL_RCC_ClockConfig+0x240>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f023 020f 	bic.w	r2, r3, #15
 8002aee:	4906      	ldr	r1, [pc, #24]	; (8002b08 <HAL_RCC_ClockConfig+0x240>)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002af6:	4b04      	ldr	r3, [pc, #16]	; (8002b08 <HAL_RCC_ClockConfig+0x240>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 030f 	and.w	r3, r3, #15
 8002afe:	683a      	ldr	r2, [r7, #0]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d005      	beq.n	8002b10 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e086      	b.n	8002c16 <HAL_RCC_ClockConfig+0x34e>
 8002b08:	52002000 	.word	0x52002000
 8002b0c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0304 	and.w	r3, r3, #4
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d010      	beq.n	8002b3e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	691a      	ldr	r2, [r3, #16]
 8002b20:	4b3f      	ldr	r3, [pc, #252]	; (8002c20 <HAL_RCC_ClockConfig+0x358>)
 8002b22:	699b      	ldr	r3, [r3, #24]
 8002b24:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d208      	bcs.n	8002b3e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002b2c:	4b3c      	ldr	r3, [pc, #240]	; (8002c20 <HAL_RCC_ClockConfig+0x358>)
 8002b2e:	699b      	ldr	r3, [r3, #24]
 8002b30:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	4939      	ldr	r1, [pc, #228]	; (8002c20 <HAL_RCC_ClockConfig+0x358>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0308 	and.w	r3, r3, #8
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d010      	beq.n	8002b6c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	695a      	ldr	r2, [r3, #20]
 8002b4e:	4b34      	ldr	r3, [pc, #208]	; (8002c20 <HAL_RCC_ClockConfig+0x358>)
 8002b50:	69db      	ldr	r3, [r3, #28]
 8002b52:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d208      	bcs.n	8002b6c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002b5a:	4b31      	ldr	r3, [pc, #196]	; (8002c20 <HAL_RCC_ClockConfig+0x358>)
 8002b5c:	69db      	ldr	r3, [r3, #28]
 8002b5e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	492e      	ldr	r1, [pc, #184]	; (8002c20 <HAL_RCC_ClockConfig+0x358>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0310 	and.w	r3, r3, #16
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d010      	beq.n	8002b9a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	699a      	ldr	r2, [r3, #24]
 8002b7c:	4b28      	ldr	r3, [pc, #160]	; (8002c20 <HAL_RCC_ClockConfig+0x358>)
 8002b7e:	69db      	ldr	r3, [r3, #28]
 8002b80:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d208      	bcs.n	8002b9a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002b88:	4b25      	ldr	r3, [pc, #148]	; (8002c20 <HAL_RCC_ClockConfig+0x358>)
 8002b8a:	69db      	ldr	r3, [r3, #28]
 8002b8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	699b      	ldr	r3, [r3, #24]
 8002b94:	4922      	ldr	r1, [pc, #136]	; (8002c20 <HAL_RCC_ClockConfig+0x358>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0320 	and.w	r3, r3, #32
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d010      	beq.n	8002bc8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	69da      	ldr	r2, [r3, #28]
 8002baa:	4b1d      	ldr	r3, [pc, #116]	; (8002c20 <HAL_RCC_ClockConfig+0x358>)
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d208      	bcs.n	8002bc8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002bb6:	4b1a      	ldr	r3, [pc, #104]	; (8002c20 <HAL_RCC_ClockConfig+0x358>)
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	69db      	ldr	r3, [r3, #28]
 8002bc2:	4917      	ldr	r1, [pc, #92]	; (8002c20 <HAL_RCC_ClockConfig+0x358>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002bc8:	f000 f834 	bl	8002c34 <HAL_RCC_GetSysClockFreq>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	4b14      	ldr	r3, [pc, #80]	; (8002c20 <HAL_RCC_ClockConfig+0x358>)
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	0a1b      	lsrs	r3, r3, #8
 8002bd4:	f003 030f 	and.w	r3, r3, #15
 8002bd8:	4912      	ldr	r1, [pc, #72]	; (8002c24 <HAL_RCC_ClockConfig+0x35c>)
 8002bda:	5ccb      	ldrb	r3, [r1, r3]
 8002bdc:	f003 031f 	and.w	r3, r3, #31
 8002be0:	fa22 f303 	lsr.w	r3, r2, r3
 8002be4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002be6:	4b0e      	ldr	r3, [pc, #56]	; (8002c20 <HAL_RCC_ClockConfig+0x358>)
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	f003 030f 	and.w	r3, r3, #15
 8002bee:	4a0d      	ldr	r2, [pc, #52]	; (8002c24 <HAL_RCC_ClockConfig+0x35c>)
 8002bf0:	5cd3      	ldrb	r3, [r2, r3]
 8002bf2:	f003 031f 	and.w	r3, r3, #31
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	fa22 f303 	lsr.w	r3, r2, r3
 8002bfc:	4a0a      	ldr	r2, [pc, #40]	; (8002c28 <HAL_RCC_ClockConfig+0x360>)
 8002bfe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002c00:	4a0a      	ldr	r2, [pc, #40]	; (8002c2c <HAL_RCC_ClockConfig+0x364>)
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002c06:	4b0a      	ldr	r3, [pc, #40]	; (8002c30 <HAL_RCC_ClockConfig+0x368>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7fe f8d4 	bl	8000db8 <HAL_InitTick>
 8002c10:	4603      	mov	r3, r0
 8002c12:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3718      	adds	r7, #24
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	58024400 	.word	0x58024400
 8002c24:	08007738 	.word	0x08007738
 8002c28:	24000004 	.word	0x24000004
 8002c2c:	24000000 	.word	0x24000000
 8002c30:	24000008 	.word	0x24000008

08002c34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b089      	sub	sp, #36	; 0x24
 8002c38:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c3a:	4bb3      	ldr	r3, [pc, #716]	; (8002f08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c42:	2b18      	cmp	r3, #24
 8002c44:	f200 8155 	bhi.w	8002ef2 <HAL_RCC_GetSysClockFreq+0x2be>
 8002c48:	a201      	add	r2, pc, #4	; (adr r2, 8002c50 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c4e:	bf00      	nop
 8002c50:	08002cb5 	.word	0x08002cb5
 8002c54:	08002ef3 	.word	0x08002ef3
 8002c58:	08002ef3 	.word	0x08002ef3
 8002c5c:	08002ef3 	.word	0x08002ef3
 8002c60:	08002ef3 	.word	0x08002ef3
 8002c64:	08002ef3 	.word	0x08002ef3
 8002c68:	08002ef3 	.word	0x08002ef3
 8002c6c:	08002ef3 	.word	0x08002ef3
 8002c70:	08002cdb 	.word	0x08002cdb
 8002c74:	08002ef3 	.word	0x08002ef3
 8002c78:	08002ef3 	.word	0x08002ef3
 8002c7c:	08002ef3 	.word	0x08002ef3
 8002c80:	08002ef3 	.word	0x08002ef3
 8002c84:	08002ef3 	.word	0x08002ef3
 8002c88:	08002ef3 	.word	0x08002ef3
 8002c8c:	08002ef3 	.word	0x08002ef3
 8002c90:	08002ce1 	.word	0x08002ce1
 8002c94:	08002ef3 	.word	0x08002ef3
 8002c98:	08002ef3 	.word	0x08002ef3
 8002c9c:	08002ef3 	.word	0x08002ef3
 8002ca0:	08002ef3 	.word	0x08002ef3
 8002ca4:	08002ef3 	.word	0x08002ef3
 8002ca8:	08002ef3 	.word	0x08002ef3
 8002cac:	08002ef3 	.word	0x08002ef3
 8002cb0:	08002ce7 	.word	0x08002ce7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002cb4:	4b94      	ldr	r3, [pc, #592]	; (8002f08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0320 	and.w	r3, r3, #32
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d009      	beq.n	8002cd4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002cc0:	4b91      	ldr	r3, [pc, #580]	; (8002f08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	08db      	lsrs	r3, r3, #3
 8002cc6:	f003 0303 	and.w	r3, r3, #3
 8002cca:	4a90      	ldr	r2, [pc, #576]	; (8002f0c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8002cd0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002cd2:	e111      	b.n	8002ef8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002cd4:	4b8d      	ldr	r3, [pc, #564]	; (8002f0c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002cd6:	61bb      	str	r3, [r7, #24]
      break;
 8002cd8:	e10e      	b.n	8002ef8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002cda:	4b8d      	ldr	r3, [pc, #564]	; (8002f10 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002cdc:	61bb      	str	r3, [r7, #24]
      break;
 8002cde:	e10b      	b.n	8002ef8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002ce0:	4b8c      	ldr	r3, [pc, #560]	; (8002f14 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002ce2:	61bb      	str	r3, [r7, #24]
      break;
 8002ce4:	e108      	b.n	8002ef8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002ce6:	4b88      	ldr	r3, [pc, #544]	; (8002f08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cea:	f003 0303 	and.w	r3, r3, #3
 8002cee:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002cf0:	4b85      	ldr	r3, [pc, #532]	; (8002f08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf4:	091b      	lsrs	r3, r3, #4
 8002cf6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cfa:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002cfc:	4b82      	ldr	r3, [pc, #520]	; (8002f08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d00:	f003 0301 	and.w	r3, r3, #1
 8002d04:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002d06:	4b80      	ldr	r3, [pc, #512]	; (8002f08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d0a:	08db      	lsrs	r3, r3, #3
 8002d0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002d10:	68fa      	ldr	r2, [r7, #12]
 8002d12:	fb02 f303 	mul.w	r3, r2, r3
 8002d16:	ee07 3a90 	vmov	s15, r3
 8002d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d1e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	f000 80e1 	beq.w	8002eec <HAL_RCC_GetSysClockFreq+0x2b8>
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	f000 8083 	beq.w	8002e38 <HAL_RCC_GetSysClockFreq+0x204>
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	f200 80a1 	bhi.w	8002e7c <HAL_RCC_GetSysClockFreq+0x248>
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d003      	beq.n	8002d48 <HAL_RCC_GetSysClockFreq+0x114>
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d056      	beq.n	8002df4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002d46:	e099      	b.n	8002e7c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d48:	4b6f      	ldr	r3, [pc, #444]	; (8002f08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0320 	and.w	r3, r3, #32
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d02d      	beq.n	8002db0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002d54:	4b6c      	ldr	r3, [pc, #432]	; (8002f08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	08db      	lsrs	r3, r3, #3
 8002d5a:	f003 0303 	and.w	r3, r3, #3
 8002d5e:	4a6b      	ldr	r2, [pc, #428]	; (8002f0c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002d60:	fa22 f303 	lsr.w	r3, r2, r3
 8002d64:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	ee07 3a90 	vmov	s15, r3
 8002d6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	ee07 3a90 	vmov	s15, r3
 8002d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d7e:	4b62      	ldr	r3, [pc, #392]	; (8002f08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d86:	ee07 3a90 	vmov	s15, r3
 8002d8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d92:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002f18 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002d96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002da2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002da6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002daa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002dae:	e087      	b.n	8002ec0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	ee07 3a90 	vmov	s15, r3
 8002db6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dba:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002f1c <HAL_RCC_GetSysClockFreq+0x2e8>
 8002dbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002dc2:	4b51      	ldr	r3, [pc, #324]	; (8002f08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dca:	ee07 3a90 	vmov	s15, r3
 8002dce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002dd2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002dd6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002f18 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002dda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002dde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002de2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002de6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002dea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002df2:	e065      	b.n	8002ec0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	ee07 3a90 	vmov	s15, r3
 8002dfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dfe:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002f20 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002e02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e06:	4b40      	ldr	r3, [pc, #256]	; (8002f08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e0e:	ee07 3a90 	vmov	s15, r3
 8002e12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e16:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e1a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002f18 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e32:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002e36:	e043      	b.n	8002ec0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	ee07 3a90 	vmov	s15, r3
 8002e3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e42:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002f24 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002e46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e4a:	4b2f      	ldr	r3, [pc, #188]	; (8002f08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e52:	ee07 3a90 	vmov	s15, r3
 8002e56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e5e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002f18 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e76:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002e7a:	e021      	b.n	8002ec0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	ee07 3a90 	vmov	s15, r3
 8002e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e86:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002f20 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002e8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e8e:	4b1e      	ldr	r3, [pc, #120]	; (8002f08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e96:	ee07 3a90 	vmov	s15, r3
 8002e9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ea2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002f18 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ea6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002eaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002eae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002eb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002eb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002ebe:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002ec0:	4b11      	ldr	r3, [pc, #68]	; (8002f08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec4:	0a5b      	lsrs	r3, r3, #9
 8002ec6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002eca:	3301      	adds	r3, #1
 8002ecc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	ee07 3a90 	vmov	s15, r3
 8002ed4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ed8:	edd7 6a07 	vldr	s13, [r7, #28]
 8002edc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ee0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ee4:	ee17 3a90 	vmov	r3, s15
 8002ee8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002eea:	e005      	b.n	8002ef8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002eec:	2300      	movs	r3, #0
 8002eee:	61bb      	str	r3, [r7, #24]
      break;
 8002ef0:	e002      	b.n	8002ef8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002ef2:	4b07      	ldr	r3, [pc, #28]	; (8002f10 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002ef4:	61bb      	str	r3, [r7, #24]
      break;
 8002ef6:	bf00      	nop
  }

  return sysclockfreq;
 8002ef8:	69bb      	ldr	r3, [r7, #24]
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3724      	adds	r7, #36	; 0x24
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	58024400 	.word	0x58024400
 8002f0c:	03d09000 	.word	0x03d09000
 8002f10:	003d0900 	.word	0x003d0900
 8002f14:	017d7840 	.word	0x017d7840
 8002f18:	46000000 	.word	0x46000000
 8002f1c:	4c742400 	.word	0x4c742400
 8002f20:	4a742400 	.word	0x4a742400
 8002f24:	4bbebc20 	.word	0x4bbebc20

08002f28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002f2e:	f7ff fe81 	bl	8002c34 <HAL_RCC_GetSysClockFreq>
 8002f32:	4602      	mov	r2, r0
 8002f34:	4b10      	ldr	r3, [pc, #64]	; (8002f78 <HAL_RCC_GetHCLKFreq+0x50>)
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	0a1b      	lsrs	r3, r3, #8
 8002f3a:	f003 030f 	and.w	r3, r3, #15
 8002f3e:	490f      	ldr	r1, [pc, #60]	; (8002f7c <HAL_RCC_GetHCLKFreq+0x54>)
 8002f40:	5ccb      	ldrb	r3, [r1, r3]
 8002f42:	f003 031f 	and.w	r3, r3, #31
 8002f46:	fa22 f303 	lsr.w	r3, r2, r3
 8002f4a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002f4c:	4b0a      	ldr	r3, [pc, #40]	; (8002f78 <HAL_RCC_GetHCLKFreq+0x50>)
 8002f4e:	699b      	ldr	r3, [r3, #24]
 8002f50:	f003 030f 	and.w	r3, r3, #15
 8002f54:	4a09      	ldr	r2, [pc, #36]	; (8002f7c <HAL_RCC_GetHCLKFreq+0x54>)
 8002f56:	5cd3      	ldrb	r3, [r2, r3]
 8002f58:	f003 031f 	and.w	r3, r3, #31
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f62:	4a07      	ldr	r2, [pc, #28]	; (8002f80 <HAL_RCC_GetHCLKFreq+0x58>)
 8002f64:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f66:	4a07      	ldr	r2, [pc, #28]	; (8002f84 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002f6c:	4b04      	ldr	r3, [pc, #16]	; (8002f80 <HAL_RCC_GetHCLKFreq+0x58>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3708      	adds	r7, #8
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	58024400 	.word	0x58024400
 8002f7c:	08007738 	.word	0x08007738
 8002f80:	24000004 	.word	0x24000004
 8002f84:	24000000 	.word	0x24000000

08002f88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002f8c:	f7ff ffcc 	bl	8002f28 <HAL_RCC_GetHCLKFreq>
 8002f90:	4602      	mov	r2, r0
 8002f92:	4b06      	ldr	r3, [pc, #24]	; (8002fac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f94:	69db      	ldr	r3, [r3, #28]
 8002f96:	091b      	lsrs	r3, r3, #4
 8002f98:	f003 0307 	and.w	r3, r3, #7
 8002f9c:	4904      	ldr	r1, [pc, #16]	; (8002fb0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f9e:	5ccb      	ldrb	r3, [r1, r3]
 8002fa0:	f003 031f 	and.w	r3, r3, #31
 8002fa4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	58024400 	.word	0x58024400
 8002fb0:	08007738 	.word	0x08007738

08002fb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002fb8:	f7ff ffb6 	bl	8002f28 <HAL_RCC_GetHCLKFreq>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	4b06      	ldr	r3, [pc, #24]	; (8002fd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fc0:	69db      	ldr	r3, [r3, #28]
 8002fc2:	0a1b      	lsrs	r3, r3, #8
 8002fc4:	f003 0307 	and.w	r3, r3, #7
 8002fc8:	4904      	ldr	r1, [pc, #16]	; (8002fdc <HAL_RCC_GetPCLK2Freq+0x28>)
 8002fca:	5ccb      	ldrb	r3, [r1, r3]
 8002fcc:	f003 031f 	and.w	r3, r3, #31
 8002fd0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	58024400 	.word	0x58024400
 8002fdc:	08007738 	.word	0x08007738

08002fe0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	223f      	movs	r2, #63	; 0x3f
 8002fee:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002ff0:	4b1a      	ldr	r3, [pc, #104]	; (800305c <HAL_RCC_GetClockConfig+0x7c>)
 8002ff2:	691b      	ldr	r3, [r3, #16]
 8002ff4:	f003 0207 	and.w	r2, r3, #7
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8002ffc:	4b17      	ldr	r3, [pc, #92]	; (800305c <HAL_RCC_GetClockConfig+0x7c>)
 8002ffe:	699b      	ldr	r3, [r3, #24]
 8003000:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8003008:	4b14      	ldr	r3, [pc, #80]	; (800305c <HAL_RCC_GetClockConfig+0x7c>)
 800300a:	699b      	ldr	r3, [r3, #24]
 800300c:	f003 020f 	and.w	r2, r3, #15
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8003014:	4b11      	ldr	r3, [pc, #68]	; (800305c <HAL_RCC_GetClockConfig+0x7c>)
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8003020:	4b0e      	ldr	r3, [pc, #56]	; (800305c <HAL_RCC_GetClockConfig+0x7c>)
 8003022:	69db      	ldr	r3, [r3, #28]
 8003024:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800302c:	4b0b      	ldr	r3, [pc, #44]	; (800305c <HAL_RCC_GetClockConfig+0x7c>)
 800302e:	69db      	ldr	r3, [r3, #28]
 8003030:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8003038:	4b08      	ldr	r3, [pc, #32]	; (800305c <HAL_RCC_GetClockConfig+0x7c>)
 800303a:	6a1b      	ldr	r3, [r3, #32]
 800303c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003044:	4b06      	ldr	r3, [pc, #24]	; (8003060 <HAL_RCC_GetClockConfig+0x80>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 020f 	and.w	r2, r3, #15
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	601a      	str	r2, [r3, #0]
}
 8003050:	bf00      	nop
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr
 800305c:	58024400 	.word	0x58024400
 8003060:	52002000 	.word	0x52002000

08003064 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003064:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003068:	b0c6      	sub	sp, #280	; 0x118
 800306a:	af00      	add	r7, sp, #0
 800306c:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003070:	2300      	movs	r3, #0
 8003072:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003076:	2300      	movs	r3, #0
 8003078:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800307c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003084:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003088:	2500      	movs	r5, #0
 800308a:	ea54 0305 	orrs.w	r3, r4, r5
 800308e:	d049      	beq.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003090:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003094:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003096:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800309a:	d02f      	beq.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800309c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80030a0:	d828      	bhi.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80030a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80030a6:	d01a      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80030a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80030ac:	d822      	bhi.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d003      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x56>
 80030b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030b6:	d007      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80030b8:	e01c      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030ba:	4bab      	ldr	r3, [pc, #684]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80030bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030be:	4aaa      	ldr	r2, [pc, #680]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80030c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80030c6:	e01a      	b.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80030c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80030cc:	3308      	adds	r3, #8
 80030ce:	2102      	movs	r1, #2
 80030d0:	4618      	mov	r0, r3
 80030d2:	f001 fc25 	bl	8004920 <RCCEx_PLL2_Config>
 80030d6:	4603      	mov	r3, r0
 80030d8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80030dc:	e00f      	b.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80030de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80030e2:	3328      	adds	r3, #40	; 0x28
 80030e4:	2102      	movs	r1, #2
 80030e6:	4618      	mov	r0, r3
 80030e8:	f001 fccc 	bl	8004a84 <RCCEx_PLL3_Config>
 80030ec:	4603      	mov	r3, r0
 80030ee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80030f2:	e004      	b.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80030fa:	e000      	b.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80030fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030fe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10a      	bne.n	800311c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003106:	4b98      	ldr	r3, [pc, #608]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003108:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800310a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800310e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003112:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003114:	4a94      	ldr	r2, [pc, #592]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003116:	430b      	orrs	r3, r1
 8003118:	6513      	str	r3, [r2, #80]	; 0x50
 800311a:	e003      	b.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800311c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003120:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003124:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800312c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003130:	f04f 0900 	mov.w	r9, #0
 8003134:	ea58 0309 	orrs.w	r3, r8, r9
 8003138:	d047      	beq.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800313a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800313e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003140:	2b04      	cmp	r3, #4
 8003142:	d82a      	bhi.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003144:	a201      	add	r2, pc, #4	; (adr r2, 800314c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800314a:	bf00      	nop
 800314c:	08003161 	.word	0x08003161
 8003150:	0800316f 	.word	0x0800316f
 8003154:	08003185 	.word	0x08003185
 8003158:	080031a3 	.word	0x080031a3
 800315c:	080031a3 	.word	0x080031a3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003160:	4b81      	ldr	r3, [pc, #516]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003164:	4a80      	ldr	r2, [pc, #512]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003166:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800316a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800316c:	e01a      	b.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800316e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003172:	3308      	adds	r3, #8
 8003174:	2100      	movs	r1, #0
 8003176:	4618      	mov	r0, r3
 8003178:	f001 fbd2 	bl	8004920 <RCCEx_PLL2_Config>
 800317c:	4603      	mov	r3, r0
 800317e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003182:	e00f      	b.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003184:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003188:	3328      	adds	r3, #40	; 0x28
 800318a:	2100      	movs	r1, #0
 800318c:	4618      	mov	r0, r3
 800318e:	f001 fc79 	bl	8004a84 <RCCEx_PLL3_Config>
 8003192:	4603      	mov	r3, r0
 8003194:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003198:	e004      	b.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80031a0:	e000      	b.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80031a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031a4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d10a      	bne.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80031ac:	4b6e      	ldr	r3, [pc, #440]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80031ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031b0:	f023 0107 	bic.w	r1, r3, #7
 80031b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80031b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ba:	4a6b      	ldr	r2, [pc, #428]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80031bc:	430b      	orrs	r3, r1
 80031be:	6513      	str	r3, [r2, #80]	; 0x50
 80031c0:	e003      	b.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031c2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80031c6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80031ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80031ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d2:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 80031d6:	f04f 0b00 	mov.w	fp, #0
 80031da:	ea5a 030b 	orrs.w	r3, sl, fp
 80031de:	d05b      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80031e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80031e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80031e8:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80031ec:	d03b      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80031ee:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80031f2:	d834      	bhi.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80031f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80031f8:	d037      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x206>
 80031fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80031fe:	d82e      	bhi.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003200:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003204:	d033      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003206:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800320a:	d828      	bhi.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800320c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003210:	d01a      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8003212:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003216:	d822      	bhi.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003218:	2b00      	cmp	r3, #0
 800321a:	d003      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800321c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003220:	d007      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8003222:	e01c      	b.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003224:	4b50      	ldr	r3, [pc, #320]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003228:	4a4f      	ldr	r2, [pc, #316]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800322a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800322e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003230:	e01e      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003232:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003236:	3308      	adds	r3, #8
 8003238:	2100      	movs	r1, #0
 800323a:	4618      	mov	r0, r3
 800323c:	f001 fb70 	bl	8004920 <RCCEx_PLL2_Config>
 8003240:	4603      	mov	r3, r0
 8003242:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003246:	e013      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003248:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800324c:	3328      	adds	r3, #40	; 0x28
 800324e:	2100      	movs	r1, #0
 8003250:	4618      	mov	r0, r3
 8003252:	f001 fc17 	bl	8004a84 <RCCEx_PLL3_Config>
 8003256:	4603      	mov	r3, r0
 8003258:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800325c:	e008      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003264:	e004      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003266:	bf00      	nop
 8003268:	e002      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800326a:	bf00      	nop
 800326c:	e000      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800326e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003270:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003274:	2b00      	cmp	r3, #0
 8003276:	d10b      	bne.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003278:	4b3b      	ldr	r3, [pc, #236]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800327a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800327c:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8003280:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003284:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003288:	4a37      	ldr	r2, [pc, #220]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800328a:	430b      	orrs	r3, r1
 800328c:	6593      	str	r3, [r2, #88]	; 0x58
 800328e:	e003      	b.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003290:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003294:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003298:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800329c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a0:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80032a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80032a8:	2300      	movs	r3, #0
 80032aa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80032ae:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80032b2:	460b      	mov	r3, r1
 80032b4:	4313      	orrs	r3, r2
 80032b6:	d05d      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80032b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80032bc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80032c0:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80032c4:	d03b      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80032c6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80032ca:	d834      	bhi.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80032cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032d0:	d037      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80032d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032d6:	d82e      	bhi.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80032d8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80032dc:	d033      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80032de:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80032e2:	d828      	bhi.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80032e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80032e8:	d01a      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80032ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80032ee:	d822      	bhi.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d003      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x298>
 80032f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032f8:	d007      	beq.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80032fa:	e01c      	b.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032fc:	4b1a      	ldr	r3, [pc, #104]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80032fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003300:	4a19      	ldr	r2, [pc, #100]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003302:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003306:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003308:	e01e      	b.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800330a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800330e:	3308      	adds	r3, #8
 8003310:	2100      	movs	r1, #0
 8003312:	4618      	mov	r0, r3
 8003314:	f001 fb04 	bl	8004920 <RCCEx_PLL2_Config>
 8003318:	4603      	mov	r3, r0
 800331a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800331e:	e013      	b.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003320:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003324:	3328      	adds	r3, #40	; 0x28
 8003326:	2100      	movs	r1, #0
 8003328:	4618      	mov	r0, r3
 800332a:	f001 fbab 	bl	8004a84 <RCCEx_PLL3_Config>
 800332e:	4603      	mov	r3, r0
 8003330:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003334:	e008      	b.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800333c:	e004      	b.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800333e:	bf00      	nop
 8003340:	e002      	b.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003342:	bf00      	nop
 8003344:	e000      	b.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003346:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003348:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800334c:	2b00      	cmp	r3, #0
 800334e:	d10d      	bne.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003350:	4b05      	ldr	r3, [pc, #20]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003354:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003358:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800335c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003360:	4a01      	ldr	r2, [pc, #4]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003362:	430b      	orrs	r3, r1
 8003364:	6593      	str	r3, [r2, #88]	; 0x58
 8003366:	e005      	b.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003368:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800336c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003370:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003374:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800337c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003380:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003384:	2300      	movs	r3, #0
 8003386:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800338a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800338e:	460b      	mov	r3, r1
 8003390:	4313      	orrs	r3, r2
 8003392:	d03a      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8003394:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800339a:	2b30      	cmp	r3, #48	; 0x30
 800339c:	d01f      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800339e:	2b30      	cmp	r3, #48	; 0x30
 80033a0:	d819      	bhi.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80033a2:	2b20      	cmp	r3, #32
 80033a4:	d00c      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80033a6:	2b20      	cmp	r3, #32
 80033a8:	d815      	bhi.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d019      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80033ae:	2b10      	cmp	r3, #16
 80033b0:	d111      	bne.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033b2:	4baa      	ldr	r3, [pc, #680]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80033b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b6:	4aa9      	ldr	r2, [pc, #676]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80033b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033bc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80033be:	e011      	b.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80033c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80033c4:	3308      	adds	r3, #8
 80033c6:	2102      	movs	r1, #2
 80033c8:	4618      	mov	r0, r3
 80033ca:	f001 faa9 	bl	8004920 <RCCEx_PLL2_Config>
 80033ce:	4603      	mov	r3, r0
 80033d0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80033d4:	e006      	b.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80033dc:	e002      	b.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80033de:	bf00      	nop
 80033e0:	e000      	b.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80033e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033e4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d10a      	bne.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80033ec:	4b9b      	ldr	r3, [pc, #620]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80033ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033f0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80033f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80033f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033fa:	4a98      	ldr	r2, [pc, #608]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80033fc:	430b      	orrs	r3, r1
 80033fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003400:	e003      	b.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003402:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003406:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800340a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800340e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003412:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003416:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800341a:	2300      	movs	r3, #0
 800341c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003420:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003424:	460b      	mov	r3, r1
 8003426:	4313      	orrs	r3, r2
 8003428:	d051      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800342a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800342e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003430:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003434:	d035      	beq.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8003436:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800343a:	d82e      	bhi.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800343c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003440:	d031      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8003442:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003446:	d828      	bhi.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003448:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800344c:	d01a      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800344e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003452:	d822      	bhi.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003454:	2b00      	cmp	r3, #0
 8003456:	d003      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8003458:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800345c:	d007      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800345e:	e01c      	b.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003460:	4b7e      	ldr	r3, [pc, #504]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003464:	4a7d      	ldr	r2, [pc, #500]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003466:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800346a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800346c:	e01c      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800346e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003472:	3308      	adds	r3, #8
 8003474:	2100      	movs	r1, #0
 8003476:	4618      	mov	r0, r3
 8003478:	f001 fa52 	bl	8004920 <RCCEx_PLL2_Config>
 800347c:	4603      	mov	r3, r0
 800347e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003482:	e011      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003484:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003488:	3328      	adds	r3, #40	; 0x28
 800348a:	2100      	movs	r1, #0
 800348c:	4618      	mov	r0, r3
 800348e:	f001 faf9 	bl	8004a84 <RCCEx_PLL3_Config>
 8003492:	4603      	mov	r3, r0
 8003494:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003498:	e006      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80034a0:	e002      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80034a2:	bf00      	nop
 80034a4:	e000      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80034a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034a8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d10a      	bne.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80034b0:	4b6a      	ldr	r3, [pc, #424]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80034b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034b4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80034b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80034bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034be:	4a67      	ldr	r2, [pc, #412]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80034c0:	430b      	orrs	r3, r1
 80034c2:	6513      	str	r3, [r2, #80]	; 0x50
 80034c4:	e003      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034c6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80034ca:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80034ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80034d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80034da:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80034de:	2300      	movs	r3, #0
 80034e0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80034e4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80034e8:	460b      	mov	r3, r1
 80034ea:	4313      	orrs	r3, r2
 80034ec:	d053      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80034ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80034f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034f8:	d033      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80034fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034fe:	d82c      	bhi.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003500:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003504:	d02f      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8003506:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800350a:	d826      	bhi.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800350c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003510:	d02b      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003512:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003516:	d820      	bhi.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003518:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800351c:	d012      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800351e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003522:	d81a      	bhi.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003524:	2b00      	cmp	r3, #0
 8003526:	d022      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8003528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800352c:	d115      	bne.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800352e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003532:	3308      	adds	r3, #8
 8003534:	2101      	movs	r1, #1
 8003536:	4618      	mov	r0, r3
 8003538:	f001 f9f2 	bl	8004920 <RCCEx_PLL2_Config>
 800353c:	4603      	mov	r3, r0
 800353e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003542:	e015      	b.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003544:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003548:	3328      	adds	r3, #40	; 0x28
 800354a:	2101      	movs	r1, #1
 800354c:	4618      	mov	r0, r3
 800354e:	f001 fa99 	bl	8004a84 <RCCEx_PLL3_Config>
 8003552:	4603      	mov	r3, r0
 8003554:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003558:	e00a      	b.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003560:	e006      	b.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003562:	bf00      	nop
 8003564:	e004      	b.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003566:	bf00      	nop
 8003568:	e002      	b.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800356a:	bf00      	nop
 800356c:	e000      	b.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800356e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003570:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003574:	2b00      	cmp	r3, #0
 8003576:	d10a      	bne.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003578:	4b38      	ldr	r3, [pc, #224]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800357a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800357c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003580:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003584:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003586:	4a35      	ldr	r2, [pc, #212]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003588:	430b      	orrs	r3, r1
 800358a:	6513      	str	r3, [r2, #80]	; 0x50
 800358c:	e003      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800358e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003592:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003596:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800359a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800359e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80035a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80035a6:	2300      	movs	r3, #0
 80035a8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80035ac:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80035b0:	460b      	mov	r3, r1
 80035b2:	4313      	orrs	r3, r2
 80035b4:	d058      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80035b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80035ba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80035be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035c2:	d033      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80035c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035c8:	d82c      	bhi.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80035ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035ce:	d02f      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80035d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035d4:	d826      	bhi.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80035d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80035da:	d02b      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80035dc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80035e0:	d820      	bhi.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80035e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035e6:	d012      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80035e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035ec:	d81a      	bhi.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d022      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80035f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035f6:	d115      	bne.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80035f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80035fc:	3308      	adds	r3, #8
 80035fe:	2101      	movs	r1, #1
 8003600:	4618      	mov	r0, r3
 8003602:	f001 f98d 	bl	8004920 <RCCEx_PLL2_Config>
 8003606:	4603      	mov	r3, r0
 8003608:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800360c:	e015      	b.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800360e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003612:	3328      	adds	r3, #40	; 0x28
 8003614:	2101      	movs	r1, #1
 8003616:	4618      	mov	r0, r3
 8003618:	f001 fa34 	bl	8004a84 <RCCEx_PLL3_Config>
 800361c:	4603      	mov	r3, r0
 800361e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003622:	e00a      	b.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800362a:	e006      	b.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800362c:	bf00      	nop
 800362e:	e004      	b.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003630:	bf00      	nop
 8003632:	e002      	b.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003634:	bf00      	nop
 8003636:	e000      	b.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003638:	bf00      	nop
    }

    if (ret == HAL_OK)
 800363a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800363e:	2b00      	cmp	r3, #0
 8003640:	d10e      	bne.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003642:	4b06      	ldr	r3, [pc, #24]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003646:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800364a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800364e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003652:	4a02      	ldr	r2, [pc, #8]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003654:	430b      	orrs	r3, r1
 8003656:	6593      	str	r3, [r2, #88]	; 0x58
 8003658:	e006      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800365a:	bf00      	nop
 800365c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003660:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003664:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003668:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800366c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003670:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003674:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003678:	2300      	movs	r3, #0
 800367a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800367e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003682:	460b      	mov	r3, r1
 8003684:	4313      	orrs	r3, r2
 8003686:	d037      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003688:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800368c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800368e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003692:	d00e      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003694:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003698:	d816      	bhi.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800369a:	2b00      	cmp	r3, #0
 800369c:	d018      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800369e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036a2:	d111      	bne.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036a4:	4bc4      	ldr	r3, [pc, #784]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80036a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a8:	4ac3      	ldr	r2, [pc, #780]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80036aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80036b0:	e00f      	b.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80036b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80036b6:	3308      	adds	r3, #8
 80036b8:	2101      	movs	r1, #1
 80036ba:	4618      	mov	r0, r3
 80036bc:	f001 f930 	bl	8004920 <RCCEx_PLL2_Config>
 80036c0:	4603      	mov	r3, r0
 80036c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80036c6:	e004      	b.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80036ce:	e000      	b.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80036d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036d2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10a      	bne.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80036da:	4bb7      	ldr	r3, [pc, #732]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80036dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036de:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80036e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80036e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036e8:	4ab3      	ldr	r2, [pc, #716]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80036ea:	430b      	orrs	r3, r1
 80036ec:	6513      	str	r3, [r2, #80]	; 0x50
 80036ee:	e003      	b.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036f0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80036f4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80036f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80036fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003700:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003704:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003708:	2300      	movs	r3, #0
 800370a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800370e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003712:	460b      	mov	r3, r1
 8003714:	4313      	orrs	r3, r2
 8003716:	d039      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003718:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800371c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800371e:	2b03      	cmp	r3, #3
 8003720:	d81c      	bhi.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003722:	a201      	add	r2, pc, #4	; (adr r2, 8003728 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003728:	08003765 	.word	0x08003765
 800372c:	08003739 	.word	0x08003739
 8003730:	08003747 	.word	0x08003747
 8003734:	08003765 	.word	0x08003765
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003738:	4b9f      	ldr	r3, [pc, #636]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800373a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373c:	4a9e      	ldr	r2, [pc, #632]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800373e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003742:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003744:	e00f      	b.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003746:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800374a:	3308      	adds	r3, #8
 800374c:	2102      	movs	r1, #2
 800374e:	4618      	mov	r0, r3
 8003750:	f001 f8e6 	bl	8004920 <RCCEx_PLL2_Config>
 8003754:	4603      	mov	r3, r0
 8003756:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800375a:	e004      	b.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003762:	e000      	b.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003764:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003766:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800376a:	2b00      	cmp	r3, #0
 800376c:	d10a      	bne.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800376e:	4b92      	ldr	r3, [pc, #584]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003772:	f023 0103 	bic.w	r1, r3, #3
 8003776:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800377a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800377c:	4a8e      	ldr	r2, [pc, #568]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800377e:	430b      	orrs	r3, r1
 8003780:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003782:	e003      	b.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003784:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003788:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800378c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003794:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003798:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800379c:	2300      	movs	r3, #0
 800379e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80037a2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80037a6:	460b      	mov	r3, r1
 80037a8:	4313      	orrs	r3, r2
 80037aa:	f000 8099 	beq.w	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037ae:	4b83      	ldr	r3, [pc, #524]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a82      	ldr	r2, [pc, #520]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80037b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80037ba:	f7fd fcbd 	bl	8001138 <HAL_GetTick>
 80037be:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80037c2:	e00b      	b.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037c4:	f7fd fcb8 	bl	8001138 <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	2b64      	cmp	r3, #100	; 0x64
 80037d2:	d903      	bls.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80037da:	e005      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80037dc:	4b77      	ldr	r3, [pc, #476]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d0ed      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80037e8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d173      	bne.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80037f0:	4b71      	ldr	r3, [pc, #452]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80037f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80037f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80037fc:	4053      	eors	r3, r2
 80037fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003802:	2b00      	cmp	r3, #0
 8003804:	d015      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003806:	4b6c      	ldr	r3, [pc, #432]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800380a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800380e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003812:	4b69      	ldr	r3, [pc, #420]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003816:	4a68      	ldr	r2, [pc, #416]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003818:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800381c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800381e:	4b66      	ldr	r3, [pc, #408]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003822:	4a65      	ldr	r2, [pc, #404]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003824:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003828:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800382a:	4a63      	ldr	r2, [pc, #396]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800382c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003830:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003832:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003836:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800383a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800383e:	d118      	bne.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003840:	f7fd fc7a 	bl	8001138 <HAL_GetTick>
 8003844:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003848:	e00d      	b.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800384a:	f7fd fc75 	bl	8001138 <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003854:	1ad2      	subs	r2, r2, r3
 8003856:	f241 3388 	movw	r3, #5000	; 0x1388
 800385a:	429a      	cmp	r2, r3
 800385c:	d903      	bls.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 8003864:	e005      	b.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003866:	4b54      	ldr	r3, [pc, #336]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d0eb      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003872:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003876:	2b00      	cmp	r3, #0
 8003878:	d129      	bne.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800387a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800387e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003882:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003886:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800388a:	d10e      	bne.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x846>
 800388c:	4b4a      	ldr	r3, [pc, #296]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003894:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003898:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800389c:	091a      	lsrs	r2, r3, #4
 800389e:	4b48      	ldr	r3, [pc, #288]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80038a0:	4013      	ands	r3, r2
 80038a2:	4a45      	ldr	r2, [pc, #276]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038a4:	430b      	orrs	r3, r1
 80038a6:	6113      	str	r3, [r2, #16]
 80038a8:	e005      	b.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80038aa:	4b43      	ldr	r3, [pc, #268]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	4a42      	ldr	r2, [pc, #264]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038b0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80038b4:	6113      	str	r3, [r2, #16]
 80038b6:	4b40      	ldr	r3, [pc, #256]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038b8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80038ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80038c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038c6:	4a3c      	ldr	r2, [pc, #240]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038c8:	430b      	orrs	r3, r1
 80038ca:	6713      	str	r3, [r2, #112]	; 0x70
 80038cc:	e008      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80038ce:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80038d2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 80038d6:	e003      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038d8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80038dc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80038e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e8:	f002 0301 	and.w	r3, r2, #1
 80038ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80038f0:	2300      	movs	r3, #0
 80038f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80038f6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80038fa:	460b      	mov	r3, r1
 80038fc:	4313      	orrs	r3, r2
 80038fe:	f000 808f 	beq.w	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003902:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003906:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003908:	2b28      	cmp	r3, #40	; 0x28
 800390a:	d871      	bhi.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800390c:	a201      	add	r2, pc, #4	; (adr r2, 8003914 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800390e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003912:	bf00      	nop
 8003914:	080039f9 	.word	0x080039f9
 8003918:	080039f1 	.word	0x080039f1
 800391c:	080039f1 	.word	0x080039f1
 8003920:	080039f1 	.word	0x080039f1
 8003924:	080039f1 	.word	0x080039f1
 8003928:	080039f1 	.word	0x080039f1
 800392c:	080039f1 	.word	0x080039f1
 8003930:	080039f1 	.word	0x080039f1
 8003934:	080039c5 	.word	0x080039c5
 8003938:	080039f1 	.word	0x080039f1
 800393c:	080039f1 	.word	0x080039f1
 8003940:	080039f1 	.word	0x080039f1
 8003944:	080039f1 	.word	0x080039f1
 8003948:	080039f1 	.word	0x080039f1
 800394c:	080039f1 	.word	0x080039f1
 8003950:	080039f1 	.word	0x080039f1
 8003954:	080039db 	.word	0x080039db
 8003958:	080039f1 	.word	0x080039f1
 800395c:	080039f1 	.word	0x080039f1
 8003960:	080039f1 	.word	0x080039f1
 8003964:	080039f1 	.word	0x080039f1
 8003968:	080039f1 	.word	0x080039f1
 800396c:	080039f1 	.word	0x080039f1
 8003970:	080039f1 	.word	0x080039f1
 8003974:	080039f9 	.word	0x080039f9
 8003978:	080039f1 	.word	0x080039f1
 800397c:	080039f1 	.word	0x080039f1
 8003980:	080039f1 	.word	0x080039f1
 8003984:	080039f1 	.word	0x080039f1
 8003988:	080039f1 	.word	0x080039f1
 800398c:	080039f1 	.word	0x080039f1
 8003990:	080039f1 	.word	0x080039f1
 8003994:	080039f9 	.word	0x080039f9
 8003998:	080039f1 	.word	0x080039f1
 800399c:	080039f1 	.word	0x080039f1
 80039a0:	080039f1 	.word	0x080039f1
 80039a4:	080039f1 	.word	0x080039f1
 80039a8:	080039f1 	.word	0x080039f1
 80039ac:	080039f1 	.word	0x080039f1
 80039b0:	080039f1 	.word	0x080039f1
 80039b4:	080039f9 	.word	0x080039f9
 80039b8:	58024400 	.word	0x58024400
 80039bc:	58024800 	.word	0x58024800
 80039c0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80039c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039c8:	3308      	adds	r3, #8
 80039ca:	2101      	movs	r1, #1
 80039cc:	4618      	mov	r0, r3
 80039ce:	f000 ffa7 	bl	8004920 <RCCEx_PLL2_Config>
 80039d2:	4603      	mov	r3, r0
 80039d4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80039d8:	e00f      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80039da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039de:	3328      	adds	r3, #40	; 0x28
 80039e0:	2101      	movs	r1, #1
 80039e2:	4618      	mov	r0, r3
 80039e4:	f001 f84e 	bl	8004a84 <RCCEx_PLL3_Config>
 80039e8:	4603      	mov	r3, r0
 80039ea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80039ee:	e004      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80039f6:	e000      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80039f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039fa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d10a      	bne.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003a02:	4bbf      	ldr	r3, [pc, #764]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a06:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003a0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a10:	4abb      	ldr	r2, [pc, #748]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003a12:	430b      	orrs	r3, r1
 8003a14:	6553      	str	r3, [r2, #84]	; 0x54
 8003a16:	e003      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a18:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003a1c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003a20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a28:	f002 0302 	and.w	r3, r2, #2
 8003a2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a30:	2300      	movs	r3, #0
 8003a32:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a36:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003a3a:	460b      	mov	r3, r1
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	d041      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003a40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a46:	2b05      	cmp	r3, #5
 8003a48:	d824      	bhi.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8003a4a:	a201      	add	r2, pc, #4	; (adr r2, 8003a50 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8003a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a50:	08003a9d 	.word	0x08003a9d
 8003a54:	08003a69 	.word	0x08003a69
 8003a58:	08003a7f 	.word	0x08003a7f
 8003a5c:	08003a9d 	.word	0x08003a9d
 8003a60:	08003a9d 	.word	0x08003a9d
 8003a64:	08003a9d 	.word	0x08003a9d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a6c:	3308      	adds	r3, #8
 8003a6e:	2101      	movs	r1, #1
 8003a70:	4618      	mov	r0, r3
 8003a72:	f000 ff55 	bl	8004920 <RCCEx_PLL2_Config>
 8003a76:	4603      	mov	r3, r0
 8003a78:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003a7c:	e00f      	b.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a82:	3328      	adds	r3, #40	; 0x28
 8003a84:	2101      	movs	r1, #1
 8003a86:	4618      	mov	r0, r3
 8003a88:	f000 fffc 	bl	8004a84 <RCCEx_PLL3_Config>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003a92:	e004      	b.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003a9a:	e000      	b.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8003a9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a9e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d10a      	bne.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003aa6:	4b96      	ldr	r3, [pc, #600]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aaa:	f023 0107 	bic.w	r1, r3, #7
 8003aae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ab2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ab4:	4a92      	ldr	r2, [pc, #584]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003ab6:	430b      	orrs	r3, r1
 8003ab8:	6553      	str	r3, [r2, #84]	; 0x54
 8003aba:	e003      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003abc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003ac0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003acc:	f002 0304 	and.w	r3, r2, #4
 8003ad0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003ada:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003ade:	460b      	mov	r3, r1
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	d044      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003ae4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aec:	2b05      	cmp	r3, #5
 8003aee:	d825      	bhi.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8003af0:	a201      	add	r2, pc, #4	; (adr r2, 8003af8 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8003af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af6:	bf00      	nop
 8003af8:	08003b45 	.word	0x08003b45
 8003afc:	08003b11 	.word	0x08003b11
 8003b00:	08003b27 	.word	0x08003b27
 8003b04:	08003b45 	.word	0x08003b45
 8003b08:	08003b45 	.word	0x08003b45
 8003b0c:	08003b45 	.word	0x08003b45
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b14:	3308      	adds	r3, #8
 8003b16:	2101      	movs	r1, #1
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f000 ff01 	bl	8004920 <RCCEx_PLL2_Config>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003b24:	e00f      	b.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b2a:	3328      	adds	r3, #40	; 0x28
 8003b2c:	2101      	movs	r1, #1
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f000 ffa8 	bl	8004a84 <RCCEx_PLL3_Config>
 8003b34:	4603      	mov	r3, r0
 8003b36:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003b3a:	e004      	b.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003b42:	e000      	b.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8003b44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b46:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d10b      	bne.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b4e:	4b6c      	ldr	r3, [pc, #432]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b52:	f023 0107 	bic.w	r1, r3, #7
 8003b56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b5e:	4a68      	ldr	r2, [pc, #416]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003b60:	430b      	orrs	r3, r1
 8003b62:	6593      	str	r3, [r2, #88]	; 0x58
 8003b64:	e003      	b.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b66:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003b6a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003b6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b76:	f002 0320 	and.w	r3, r2, #32
 8003b7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003b7e:	2300      	movs	r3, #0
 8003b80:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003b84:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003b88:	460b      	mov	r3, r1
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	d055      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003b8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b9a:	d033      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8003b9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ba0:	d82c      	bhi.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003ba2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ba6:	d02f      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bac:	d826      	bhi.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003bae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003bb2:	d02b      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003bb4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003bb8:	d820      	bhi.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003bba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bbe:	d012      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8003bc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bc4:	d81a      	bhi.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d022      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003bca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bce:	d115      	bne.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003bd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003bd4:	3308      	adds	r3, #8
 8003bd6:	2100      	movs	r1, #0
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f000 fea1 	bl	8004920 <RCCEx_PLL2_Config>
 8003bde:	4603      	mov	r3, r0
 8003be0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003be4:	e015      	b.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003be6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003bea:	3328      	adds	r3, #40	; 0x28
 8003bec:	2102      	movs	r1, #2
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f000 ff48 	bl	8004a84 <RCCEx_PLL3_Config>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003bfa:	e00a      	b.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003c02:	e006      	b.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003c04:	bf00      	nop
 8003c06:	e004      	b.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003c08:	bf00      	nop
 8003c0a:	e002      	b.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003c0c:	bf00      	nop
 8003c0e:	e000      	b.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003c10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c12:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d10b      	bne.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c1a:	4b39      	ldr	r3, [pc, #228]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c1e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003c22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c2a:	4a35      	ldr	r2, [pc, #212]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003c2c:	430b      	orrs	r3, r1
 8003c2e:	6553      	str	r3, [r2, #84]	; 0x54
 8003c30:	e003      	b.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c32:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003c36:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003c3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c42:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003c46:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003c50:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003c54:	460b      	mov	r3, r1
 8003c56:	4313      	orrs	r3, r2
 8003c58:	d058      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003c5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c62:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003c66:	d033      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8003c68:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003c6c:	d82c      	bhi.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003c6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c72:	d02f      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003c74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c78:	d826      	bhi.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003c7a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c7e:	d02b      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003c80:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c84:	d820      	bhi.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003c86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c8a:	d012      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8003c8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c90:	d81a      	bhi.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d022      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003c96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c9a:	d115      	bne.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ca0:	3308      	adds	r3, #8
 8003ca2:	2100      	movs	r1, #0
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f000 fe3b 	bl	8004920 <RCCEx_PLL2_Config>
 8003caa:	4603      	mov	r3, r0
 8003cac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003cb0:	e015      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003cb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003cb6:	3328      	adds	r3, #40	; 0x28
 8003cb8:	2102      	movs	r1, #2
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f000 fee2 	bl	8004a84 <RCCEx_PLL3_Config>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003cc6:	e00a      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003cce:	e006      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003cd0:	bf00      	nop
 8003cd2:	e004      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003cd4:	bf00      	nop
 8003cd6:	e002      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003cd8:	bf00      	nop
 8003cda:	e000      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003cdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cde:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d10e      	bne.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ce6:	4b06      	ldr	r3, [pc, #24]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cea:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8003cee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003cf2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cf6:	4a02      	ldr	r2, [pc, #8]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003cf8:	430b      	orrs	r3, r1
 8003cfa:	6593      	str	r3, [r2, #88]	; 0x58
 8003cfc:	e006      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8003cfe:	bf00      	nop
 8003d00:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d04:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003d08:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003d0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d14:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003d18:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003d22:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003d26:	460b      	mov	r3, r1
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	d055      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003d2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d30:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d34:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003d38:	d033      	beq.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8003d3a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003d3e:	d82c      	bhi.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003d40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d44:	d02f      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003d46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d4a:	d826      	bhi.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003d4c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003d50:	d02b      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8003d52:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003d56:	d820      	bhi.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003d58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d5c:	d012      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8003d5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d62:	d81a      	bhi.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d022      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003d68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d6c:	d115      	bne.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d72:	3308      	adds	r3, #8
 8003d74:	2100      	movs	r1, #0
 8003d76:	4618      	mov	r0, r3
 8003d78:	f000 fdd2 	bl	8004920 <RCCEx_PLL2_Config>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003d82:	e015      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d88:	3328      	adds	r3, #40	; 0x28
 8003d8a:	2102      	movs	r1, #2
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f000 fe79 	bl	8004a84 <RCCEx_PLL3_Config>
 8003d92:	4603      	mov	r3, r0
 8003d94:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003d98:	e00a      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003da0:	e006      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003da2:	bf00      	nop
 8003da4:	e004      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003da6:	bf00      	nop
 8003da8:	e002      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003daa:	bf00      	nop
 8003dac:	e000      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003dae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003db0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d10b      	bne.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003db8:	4ba0      	ldr	r3, [pc, #640]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dbc:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8003dc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003dc4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003dc8:	4a9c      	ldr	r2, [pc, #624]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003dca:	430b      	orrs	r3, r1
 8003dcc:	6593      	str	r3, [r2, #88]	; 0x58
 8003dce:	e003      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dd0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003dd4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8003dd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de0:	f002 0308 	and.w	r3, r2, #8
 8003de4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003de8:	2300      	movs	r3, #0
 8003dea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003dee:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003df2:	460b      	mov	r3, r1
 8003df4:	4313      	orrs	r3, r2
 8003df6:	d01e      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8003df8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003dfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e04:	d10c      	bne.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003e06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e0a:	3328      	adds	r3, #40	; 0x28
 8003e0c:	2102      	movs	r1, #2
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f000 fe38 	bl	8004a84 <RCCEx_PLL3_Config>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d002      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8003e20:	4b86      	ldr	r3, [pc, #536]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e24:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e30:	4a82      	ldr	r2, [pc, #520]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003e32:	430b      	orrs	r3, r1
 8003e34:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003e36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e3e:	f002 0310 	and.w	r3, r2, #16
 8003e42:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003e46:	2300      	movs	r3, #0
 8003e48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003e4c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003e50:	460b      	mov	r3, r1
 8003e52:	4313      	orrs	r3, r2
 8003e54:	d01e      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003e56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e62:	d10c      	bne.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e68:	3328      	adds	r3, #40	; 0x28
 8003e6a:	2102      	movs	r1, #2
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f000 fe09 	bl	8004a84 <RCCEx_PLL3_Config>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d002      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003e7e:	4b6f      	ldr	r3, [pc, #444]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e82:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003e86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e8e:	4a6b      	ldr	r2, [pc, #428]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003e90:	430b      	orrs	r3, r1
 8003e92:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e9c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003ea0:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003ea6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003eaa:	460b      	mov	r3, r1
 8003eac:	4313      	orrs	r3, r2
 8003eae:	d03e      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003eb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003eb4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003eb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ebc:	d022      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8003ebe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ec2:	d81b      	bhi.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d003      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8003ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ecc:	d00b      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8003ece:	e015      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ed0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ed4:	3308      	adds	r3, #8
 8003ed6:	2100      	movs	r1, #0
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f000 fd21 	bl	8004920 <RCCEx_PLL2_Config>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003ee4:	e00f      	b.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003ee6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003eea:	3328      	adds	r3, #40	; 0x28
 8003eec:	2102      	movs	r1, #2
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f000 fdc8 	bl	8004a84 <RCCEx_PLL3_Config>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003efa:	e004      	b.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003f02:	e000      	b.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8003f04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f06:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d10b      	bne.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f0e:	4b4b      	ldr	r3, [pc, #300]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f12:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003f16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f1a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003f1e:	4a47      	ldr	r2, [pc, #284]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f20:	430b      	orrs	r3, r1
 8003f22:	6593      	str	r3, [r2, #88]	; 0x58
 8003f24:	e003      	b.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f26:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003f2a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003f2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f36:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003f3a:	673b      	str	r3, [r7, #112]	; 0x70
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	677b      	str	r3, [r7, #116]	; 0x74
 8003f40:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003f44:	460b      	mov	r3, r1
 8003f46:	4313      	orrs	r3, r2
 8003f48:	d03b      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003f4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f52:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003f56:	d01f      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8003f58:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003f5c:	d818      	bhi.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8003f5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f62:	d003      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8003f64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f68:	d007      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8003f6a:	e011      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f6c:	4b33      	ldr	r3, [pc, #204]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f70:	4a32      	ldr	r2, [pc, #200]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003f78:	e00f      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f7e:	3328      	adds	r3, #40	; 0x28
 8003f80:	2101      	movs	r1, #1
 8003f82:	4618      	mov	r0, r3
 8003f84:	f000 fd7e 	bl	8004a84 <RCCEx_PLL3_Config>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8003f8e:	e004      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003f96:	e000      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8003f98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f9a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d10b      	bne.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003fa2:	4b26      	ldr	r3, [pc, #152]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fa6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003faa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fb2:	4a22      	ldr	r2, [pc, #136]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003fb4:	430b      	orrs	r3, r1
 8003fb6:	6553      	str	r3, [r2, #84]	; 0x54
 8003fb8:	e003      	b.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fba:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003fbe:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003fc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fca:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003fce:	66bb      	str	r3, [r7, #104]	; 0x68
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003fd4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003fd8:	460b      	mov	r3, r1
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	d034      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003fde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fe2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d003      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8003fe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fec:	d007      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8003fee:	e011      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ff0:	4b12      	ldr	r3, [pc, #72]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff4:	4a11      	ldr	r2, [pc, #68]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003ff6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ffa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003ffc:	e00e      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003ffe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004002:	3308      	adds	r3, #8
 8004004:	2102      	movs	r1, #2
 8004006:	4618      	mov	r0, r3
 8004008:	f000 fc8a 	bl	8004920 <RCCEx_PLL2_Config>
 800400c:	4603      	mov	r3, r0
 800400e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004012:	e003      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800401a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800401c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004020:	2b00      	cmp	r3, #0
 8004022:	d10d      	bne.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004024:	4b05      	ldr	r3, [pc, #20]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004026:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004028:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800402c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004030:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004032:	4a02      	ldr	r2, [pc, #8]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004034:	430b      	orrs	r3, r1
 8004036:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004038:	e006      	b.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800403a:	bf00      	nop
 800403c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004040:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004044:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004048:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800404c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004050:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004054:	663b      	str	r3, [r7, #96]	; 0x60
 8004056:	2300      	movs	r3, #0
 8004058:	667b      	str	r3, [r7, #100]	; 0x64
 800405a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800405e:	460b      	mov	r3, r1
 8004060:	4313      	orrs	r3, r2
 8004062:	d00c      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004064:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004068:	3328      	adds	r3, #40	; 0x28
 800406a:	2102      	movs	r1, #2
 800406c:	4618      	mov	r0, r3
 800406e:	f000 fd09 	bl	8004a84 <RCCEx_PLL3_Config>
 8004072:	4603      	mov	r3, r0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d002      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800407e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004086:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800408a:	65bb      	str	r3, [r7, #88]	; 0x58
 800408c:	2300      	movs	r3, #0
 800408e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004090:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004094:	460b      	mov	r3, r1
 8004096:	4313      	orrs	r3, r2
 8004098:	d036      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800409a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800409e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040a4:	d018      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80040a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040aa:	d811      	bhi.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80040ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040b0:	d014      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80040b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040b6:	d80b      	bhi.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d011      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80040bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040c0:	d106      	bne.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040c2:	4bb7      	ldr	r3, [pc, #732]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80040c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c6:	4ab6      	ldr	r2, [pc, #728]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80040c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80040ce:	e008      	b.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80040d6:	e004      	b.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80040d8:	bf00      	nop
 80040da:	e002      	b.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80040dc:	bf00      	nop
 80040de:	e000      	b.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80040e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040e2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d10a      	bne.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80040ea:	4bad      	ldr	r3, [pc, #692]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80040ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80040f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040f8:	4aa9      	ldr	r2, [pc, #676]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80040fa:	430b      	orrs	r3, r1
 80040fc:	6553      	str	r3, [r2, #84]	; 0x54
 80040fe:	e003      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004100:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004104:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004108:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800410c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004110:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004114:	653b      	str	r3, [r7, #80]	; 0x50
 8004116:	2300      	movs	r3, #0
 8004118:	657b      	str	r3, [r7, #84]	; 0x54
 800411a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800411e:	460b      	mov	r3, r1
 8004120:	4313      	orrs	r3, r2
 8004122:	d009      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004124:	4b9e      	ldr	r3, [pc, #632]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004126:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004128:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800412c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004132:	4a9b      	ldr	r2, [pc, #620]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004134:	430b      	orrs	r3, r1
 8004136:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004138:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800413c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004140:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004144:	64bb      	str	r3, [r7, #72]	; 0x48
 8004146:	2300      	movs	r3, #0
 8004148:	64fb      	str	r3, [r7, #76]	; 0x4c
 800414a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800414e:	460b      	mov	r3, r1
 8004150:	4313      	orrs	r3, r2
 8004152:	d009      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004154:	4b92      	ldr	r3, [pc, #584]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004156:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004158:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800415c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004160:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004162:	4a8f      	ldr	r2, [pc, #572]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004164:	430b      	orrs	r3, r1
 8004166:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004168:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800416c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004170:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004174:	643b      	str	r3, [r7, #64]	; 0x40
 8004176:	2300      	movs	r3, #0
 8004178:	647b      	str	r3, [r7, #68]	; 0x44
 800417a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800417e:	460b      	mov	r3, r1
 8004180:	4313      	orrs	r3, r2
 8004182:	d00e      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004184:	4b86      	ldr	r3, [pc, #536]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004186:	691b      	ldr	r3, [r3, #16]
 8004188:	4a85      	ldr	r2, [pc, #532]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800418a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800418e:	6113      	str	r3, [r2, #16]
 8004190:	4b83      	ldr	r3, [pc, #524]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004192:	6919      	ldr	r1, [r3, #16]
 8004194:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004198:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800419c:	4a80      	ldr	r2, [pc, #512]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800419e:	430b      	orrs	r3, r1
 80041a0:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80041a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041aa:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80041ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80041b0:	2300      	movs	r3, #0
 80041b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041b4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80041b8:	460b      	mov	r3, r1
 80041ba:	4313      	orrs	r3, r2
 80041bc:	d009      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80041be:	4b78      	ldr	r3, [pc, #480]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80041c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041c2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80041c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041cc:	4a74      	ldr	r2, [pc, #464]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80041ce:	430b      	orrs	r3, r1
 80041d0:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80041d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041da:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80041de:	633b      	str	r3, [r7, #48]	; 0x30
 80041e0:	2300      	movs	r3, #0
 80041e2:	637b      	str	r3, [r7, #52]	; 0x34
 80041e4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80041e8:	460b      	mov	r3, r1
 80041ea:	4313      	orrs	r3, r2
 80041ec:	d00a      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80041ee:	4b6c      	ldr	r3, [pc, #432]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80041f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041f2:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80041f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041fe:	4a68      	ldr	r2, [pc, #416]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004200:	430b      	orrs	r3, r1
 8004202:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004204:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800420c:	2100      	movs	r1, #0
 800420e:	62b9      	str	r1, [r7, #40]	; 0x28
 8004210:	f003 0301 	and.w	r3, r3, #1
 8004214:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004216:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800421a:	460b      	mov	r3, r1
 800421c:	4313      	orrs	r3, r2
 800421e:	d011      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004220:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004224:	3308      	adds	r3, #8
 8004226:	2100      	movs	r1, #0
 8004228:	4618      	mov	r0, r3
 800422a:	f000 fb79 	bl	8004920 <RCCEx_PLL2_Config>
 800422e:	4603      	mov	r3, r0
 8004230:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8004234:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004238:	2b00      	cmp	r3, #0
 800423a:	d003      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800423c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004240:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004244:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800424c:	2100      	movs	r1, #0
 800424e:	6239      	str	r1, [r7, #32]
 8004250:	f003 0302 	and.w	r3, r3, #2
 8004254:	627b      	str	r3, [r7, #36]	; 0x24
 8004256:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800425a:	460b      	mov	r3, r1
 800425c:	4313      	orrs	r3, r2
 800425e:	d011      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004260:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004264:	3308      	adds	r3, #8
 8004266:	2101      	movs	r1, #1
 8004268:	4618      	mov	r0, r3
 800426a:	f000 fb59 	bl	8004920 <RCCEx_PLL2_Config>
 800426e:	4603      	mov	r3, r0
 8004270:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8004274:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004278:	2b00      	cmp	r3, #0
 800427a:	d003      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800427c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004280:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004284:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800428c:	2100      	movs	r1, #0
 800428e:	61b9      	str	r1, [r7, #24]
 8004290:	f003 0304 	and.w	r3, r3, #4
 8004294:	61fb      	str	r3, [r7, #28]
 8004296:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800429a:	460b      	mov	r3, r1
 800429c:	4313      	orrs	r3, r2
 800429e:	d011      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80042a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042a4:	3308      	adds	r3, #8
 80042a6:	2102      	movs	r1, #2
 80042a8:	4618      	mov	r0, r3
 80042aa:	f000 fb39 	bl	8004920 <RCCEx_PLL2_Config>
 80042ae:	4603      	mov	r3, r0
 80042b0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80042b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d003      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80042c0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80042c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042cc:	2100      	movs	r1, #0
 80042ce:	6139      	str	r1, [r7, #16]
 80042d0:	f003 0308 	and.w	r3, r3, #8
 80042d4:	617b      	str	r3, [r7, #20]
 80042d6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80042da:	460b      	mov	r3, r1
 80042dc:	4313      	orrs	r3, r2
 80042de:	d011      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80042e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042e4:	3328      	adds	r3, #40	; 0x28
 80042e6:	2100      	movs	r1, #0
 80042e8:	4618      	mov	r0, r3
 80042ea:	f000 fbcb 	bl	8004a84 <RCCEx_PLL3_Config>
 80042ee:	4603      	mov	r3, r0
 80042f0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 80042f4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d003      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042fc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004300:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004304:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800430c:	2100      	movs	r1, #0
 800430e:	60b9      	str	r1, [r7, #8]
 8004310:	f003 0310 	and.w	r3, r3, #16
 8004314:	60fb      	str	r3, [r7, #12]
 8004316:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800431a:	460b      	mov	r3, r1
 800431c:	4313      	orrs	r3, r2
 800431e:	d011      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004320:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004324:	3328      	adds	r3, #40	; 0x28
 8004326:	2101      	movs	r1, #1
 8004328:	4618      	mov	r0, r3
 800432a:	f000 fbab 	bl	8004a84 <RCCEx_PLL3_Config>
 800432e:	4603      	mov	r3, r0
 8004330:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8004334:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004338:	2b00      	cmp	r3, #0
 800433a:	d003      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800433c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004340:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004344:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800434c:	2100      	movs	r1, #0
 800434e:	6039      	str	r1, [r7, #0]
 8004350:	f003 0320 	and.w	r3, r3, #32
 8004354:	607b      	str	r3, [r7, #4]
 8004356:	e9d7 1200 	ldrd	r1, r2, [r7]
 800435a:	460b      	mov	r3, r1
 800435c:	4313      	orrs	r3, r2
 800435e:	d011      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004360:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004364:	3328      	adds	r3, #40	; 0x28
 8004366:	2102      	movs	r1, #2
 8004368:	4618      	mov	r0, r3
 800436a:	f000 fb8b 	bl	8004a84 <RCCEx_PLL3_Config>
 800436e:	4603      	mov	r3, r0
 8004370:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8004374:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004378:	2b00      	cmp	r3, #0
 800437a:	d003      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800437c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004380:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8004384:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8004388:	2b00      	cmp	r3, #0
 800438a:	d101      	bne.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800438c:	2300      	movs	r3, #0
 800438e:	e000      	b.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
}
 8004392:	4618      	mov	r0, r3
 8004394:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8004398:	46bd      	mov	sp, r7
 800439a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800439e:	bf00      	nop
 80043a0:	58024400 	.word	0x58024400

080043a4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80043a8:	f7fe fdbe 	bl	8002f28 <HAL_RCC_GetHCLKFreq>
 80043ac:	4602      	mov	r2, r0
 80043ae:	4b06      	ldr	r3, [pc, #24]	; (80043c8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80043b0:	6a1b      	ldr	r3, [r3, #32]
 80043b2:	091b      	lsrs	r3, r3, #4
 80043b4:	f003 0307 	and.w	r3, r3, #7
 80043b8:	4904      	ldr	r1, [pc, #16]	; (80043cc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80043ba:	5ccb      	ldrb	r3, [r1, r3]
 80043bc:	f003 031f 	and.w	r3, r3, #31
 80043c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	58024400 	.word	0x58024400
 80043cc:	08007738 	.word	0x08007738

080043d0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b089      	sub	sp, #36	; 0x24
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80043d8:	4ba1      	ldr	r3, [pc, #644]	; (8004660 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043dc:	f003 0303 	and.w	r3, r3, #3
 80043e0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80043e2:	4b9f      	ldr	r3, [pc, #636]	; (8004660 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e6:	0b1b      	lsrs	r3, r3, #12
 80043e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043ec:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80043ee:	4b9c      	ldr	r3, [pc, #624]	; (8004660 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f2:	091b      	lsrs	r3, r3, #4
 80043f4:	f003 0301 	and.w	r3, r3, #1
 80043f8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80043fa:	4b99      	ldr	r3, [pc, #612]	; (8004660 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043fe:	08db      	lsrs	r3, r3, #3
 8004400:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004404:	693a      	ldr	r2, [r7, #16]
 8004406:	fb02 f303 	mul.w	r3, r2, r3
 800440a:	ee07 3a90 	vmov	s15, r3
 800440e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004412:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	2b00      	cmp	r3, #0
 800441a:	f000 8111 	beq.w	8004640 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	2b02      	cmp	r3, #2
 8004422:	f000 8083 	beq.w	800452c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	2b02      	cmp	r3, #2
 800442a:	f200 80a1 	bhi.w	8004570 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d003      	beq.n	800443c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	2b01      	cmp	r3, #1
 8004438:	d056      	beq.n	80044e8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800443a:	e099      	b.n	8004570 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800443c:	4b88      	ldr	r3, [pc, #544]	; (8004660 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0320 	and.w	r3, r3, #32
 8004444:	2b00      	cmp	r3, #0
 8004446:	d02d      	beq.n	80044a4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004448:	4b85      	ldr	r3, [pc, #532]	; (8004660 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	08db      	lsrs	r3, r3, #3
 800444e:	f003 0303 	and.w	r3, r3, #3
 8004452:	4a84      	ldr	r2, [pc, #528]	; (8004664 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004454:	fa22 f303 	lsr.w	r3, r2, r3
 8004458:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	ee07 3a90 	vmov	s15, r3
 8004460:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	ee07 3a90 	vmov	s15, r3
 800446a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800446e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004472:	4b7b      	ldr	r3, [pc, #492]	; (8004660 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800447a:	ee07 3a90 	vmov	s15, r3
 800447e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004482:	ed97 6a03 	vldr	s12, [r7, #12]
 8004486:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004668 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800448a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800448e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004492:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004496:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800449a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800449e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80044a2:	e087      	b.n	80045b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	ee07 3a90 	vmov	s15, r3
 80044aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044ae:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800466c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80044b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044b6:	4b6a      	ldr	r3, [pc, #424]	; (8004660 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044be:	ee07 3a90 	vmov	s15, r3
 80044c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80044ca:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004668 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80044ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80044e6:	e065      	b.n	80045b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	ee07 3a90 	vmov	s15, r3
 80044ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044f2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004670 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80044f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044fa:	4b59      	ldr	r3, [pc, #356]	; (8004660 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004502:	ee07 3a90 	vmov	s15, r3
 8004506:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800450a:	ed97 6a03 	vldr	s12, [r7, #12]
 800450e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004668 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004512:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004516:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800451a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800451e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004522:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004526:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800452a:	e043      	b.n	80045b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	ee07 3a90 	vmov	s15, r3
 8004532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004536:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004674 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800453a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800453e:	4b48      	ldr	r3, [pc, #288]	; (8004660 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004542:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004546:	ee07 3a90 	vmov	s15, r3
 800454a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800454e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004552:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004668 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004556:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800455a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800455e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004562:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004566:	ee67 7a27 	vmul.f32	s15, s14, s15
 800456a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800456e:	e021      	b.n	80045b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	ee07 3a90 	vmov	s15, r3
 8004576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800457a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004670 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800457e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004582:	4b37      	ldr	r3, [pc, #220]	; (8004660 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004586:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800458a:	ee07 3a90 	vmov	s15, r3
 800458e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004592:	ed97 6a03 	vldr	s12, [r7, #12]
 8004596:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004668 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800459a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800459e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80045b2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80045b4:	4b2a      	ldr	r3, [pc, #168]	; (8004660 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b8:	0a5b      	lsrs	r3, r3, #9
 80045ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045be:	ee07 3a90 	vmov	s15, r3
 80045c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80045ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80045ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80045d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045da:	ee17 2a90 	vmov	r2, s15
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80045e2:	4b1f      	ldr	r3, [pc, #124]	; (8004660 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e6:	0c1b      	lsrs	r3, r3, #16
 80045e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045ec:	ee07 3a90 	vmov	s15, r3
 80045f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80045f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80045fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8004600:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004604:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004608:	ee17 2a90 	vmov	r2, s15
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004610:	4b13      	ldr	r3, [pc, #76]	; (8004660 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004614:	0e1b      	lsrs	r3, r3, #24
 8004616:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800461a:	ee07 3a90 	vmov	s15, r3
 800461e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004622:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004626:	ee37 7a87 	vadd.f32	s14, s15, s14
 800462a:	edd7 6a07 	vldr	s13, [r7, #28]
 800462e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004632:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004636:	ee17 2a90 	vmov	r2, s15
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800463e:	e008      	b.n	8004652 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	609a      	str	r2, [r3, #8]
}
 8004652:	bf00      	nop
 8004654:	3724      	adds	r7, #36	; 0x24
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop
 8004660:	58024400 	.word	0x58024400
 8004664:	03d09000 	.word	0x03d09000
 8004668:	46000000 	.word	0x46000000
 800466c:	4c742400 	.word	0x4c742400
 8004670:	4a742400 	.word	0x4a742400
 8004674:	4bbebc20 	.word	0x4bbebc20

08004678 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004678:	b480      	push	{r7}
 800467a:	b089      	sub	sp, #36	; 0x24
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004680:	4ba1      	ldr	r3, [pc, #644]	; (8004908 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004684:	f003 0303 	and.w	r3, r3, #3
 8004688:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800468a:	4b9f      	ldr	r3, [pc, #636]	; (8004908 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800468c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800468e:	0d1b      	lsrs	r3, r3, #20
 8004690:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004694:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004696:	4b9c      	ldr	r3, [pc, #624]	; (8004908 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469a:	0a1b      	lsrs	r3, r3, #8
 800469c:	f003 0301 	and.w	r3, r3, #1
 80046a0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80046a2:	4b99      	ldr	r3, [pc, #612]	; (8004908 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046a6:	08db      	lsrs	r3, r3, #3
 80046a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80046ac:	693a      	ldr	r2, [r7, #16]
 80046ae:	fb02 f303 	mul.w	r3, r2, r3
 80046b2:	ee07 3a90 	vmov	s15, r3
 80046b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	f000 8111 	beq.w	80048e8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	f000 8083 	beq.w	80047d4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	2b02      	cmp	r3, #2
 80046d2:	f200 80a1 	bhi.w	8004818 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d003      	beq.n	80046e4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d056      	beq.n	8004790 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80046e2:	e099      	b.n	8004818 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80046e4:	4b88      	ldr	r3, [pc, #544]	; (8004908 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0320 	and.w	r3, r3, #32
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d02d      	beq.n	800474c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80046f0:	4b85      	ldr	r3, [pc, #532]	; (8004908 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	08db      	lsrs	r3, r3, #3
 80046f6:	f003 0303 	and.w	r3, r3, #3
 80046fa:	4a84      	ldr	r2, [pc, #528]	; (800490c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80046fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004700:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	ee07 3a90 	vmov	s15, r3
 8004708:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	ee07 3a90 	vmov	s15, r3
 8004712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800471a:	4b7b      	ldr	r3, [pc, #492]	; (8004908 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800471c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004722:	ee07 3a90 	vmov	s15, r3
 8004726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800472a:	ed97 6a03 	vldr	s12, [r7, #12]
 800472e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004910 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004732:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004736:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800473a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800473e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004746:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800474a:	e087      	b.n	800485c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	ee07 3a90 	vmov	s15, r3
 8004752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004756:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004914 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800475a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800475e:	4b6a      	ldr	r3, [pc, #424]	; (8004908 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004766:	ee07 3a90 	vmov	s15, r3
 800476a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800476e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004772:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004910 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004776:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800477a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800477e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004782:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800478a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800478e:	e065      	b.n	800485c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	ee07 3a90 	vmov	s15, r3
 8004796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800479a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004918 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800479e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047a2:	4b59      	ldr	r3, [pc, #356]	; (8004908 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047aa:	ee07 3a90 	vmov	s15, r3
 80047ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80047b6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004910 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80047ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047d2:	e043      	b.n	800485c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	ee07 3a90 	vmov	s15, r3
 80047da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047de:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800491c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80047e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047e6:	4b48      	ldr	r3, [pc, #288]	; (8004908 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ee:	ee07 3a90 	vmov	s15, r3
 80047f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80047fa:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004910 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80047fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004802:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004806:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800480a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800480e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004812:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004816:	e021      	b.n	800485c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	ee07 3a90 	vmov	s15, r3
 800481e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004822:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004918 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004826:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800482a:	4b37      	ldr	r3, [pc, #220]	; (8004908 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800482c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004832:	ee07 3a90 	vmov	s15, r3
 8004836:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800483a:	ed97 6a03 	vldr	s12, [r7, #12]
 800483e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004910 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004842:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004846:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800484a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800484e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004852:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004856:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800485a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800485c:	4b2a      	ldr	r3, [pc, #168]	; (8004908 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800485e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004860:	0a5b      	lsrs	r3, r3, #9
 8004862:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004866:	ee07 3a90 	vmov	s15, r3
 800486a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800486e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004872:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004876:	edd7 6a07 	vldr	s13, [r7, #28]
 800487a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800487e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004882:	ee17 2a90 	vmov	r2, s15
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800488a:	4b1f      	ldr	r3, [pc, #124]	; (8004908 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800488c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488e:	0c1b      	lsrs	r3, r3, #16
 8004890:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004894:	ee07 3a90 	vmov	s15, r3
 8004898:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800489c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80048a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80048a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80048a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048b0:	ee17 2a90 	vmov	r2, s15
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80048b8:	4b13      	ldr	r3, [pc, #76]	; (8004908 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048bc:	0e1b      	lsrs	r3, r3, #24
 80048be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048c2:	ee07 3a90 	vmov	s15, r3
 80048c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80048ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80048d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80048d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048de:	ee17 2a90 	vmov	r2, s15
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80048e6:	e008      	b.n	80048fa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	609a      	str	r2, [r3, #8]
}
 80048fa:	bf00      	nop
 80048fc:	3724      	adds	r7, #36	; 0x24
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop
 8004908:	58024400 	.word	0x58024400
 800490c:	03d09000 	.word	0x03d09000
 8004910:	46000000 	.word	0x46000000
 8004914:	4c742400 	.word	0x4c742400
 8004918:	4a742400 	.word	0x4a742400
 800491c:	4bbebc20 	.word	0x4bbebc20

08004920 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800492a:	2300      	movs	r3, #0
 800492c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800492e:	4b53      	ldr	r3, [pc, #332]	; (8004a7c <RCCEx_PLL2_Config+0x15c>)
 8004930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004932:	f003 0303 	and.w	r3, r3, #3
 8004936:	2b03      	cmp	r3, #3
 8004938:	d101      	bne.n	800493e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e099      	b.n	8004a72 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800493e:	4b4f      	ldr	r3, [pc, #316]	; (8004a7c <RCCEx_PLL2_Config+0x15c>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a4e      	ldr	r2, [pc, #312]	; (8004a7c <RCCEx_PLL2_Config+0x15c>)
 8004944:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004948:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800494a:	f7fc fbf5 	bl	8001138 <HAL_GetTick>
 800494e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004950:	e008      	b.n	8004964 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004952:	f7fc fbf1 	bl	8001138 <HAL_GetTick>
 8004956:	4602      	mov	r2, r0
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	2b02      	cmp	r3, #2
 800495e:	d901      	bls.n	8004964 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004960:	2303      	movs	r3, #3
 8004962:	e086      	b.n	8004a72 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004964:	4b45      	ldr	r3, [pc, #276]	; (8004a7c <RCCEx_PLL2_Config+0x15c>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800496c:	2b00      	cmp	r3, #0
 800496e:	d1f0      	bne.n	8004952 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004970:	4b42      	ldr	r3, [pc, #264]	; (8004a7c <RCCEx_PLL2_Config+0x15c>)
 8004972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004974:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	031b      	lsls	r3, r3, #12
 800497e:	493f      	ldr	r1, [pc, #252]	; (8004a7c <RCCEx_PLL2_Config+0x15c>)
 8004980:	4313      	orrs	r3, r2
 8004982:	628b      	str	r3, [r1, #40]	; 0x28
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	3b01      	subs	r3, #1
 800498a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	3b01      	subs	r3, #1
 8004994:	025b      	lsls	r3, r3, #9
 8004996:	b29b      	uxth	r3, r3
 8004998:	431a      	orrs	r2, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	3b01      	subs	r3, #1
 80049a0:	041b      	lsls	r3, r3, #16
 80049a2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80049a6:	431a      	orrs	r2, r3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	691b      	ldr	r3, [r3, #16]
 80049ac:	3b01      	subs	r3, #1
 80049ae:	061b      	lsls	r3, r3, #24
 80049b0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80049b4:	4931      	ldr	r1, [pc, #196]	; (8004a7c <RCCEx_PLL2_Config+0x15c>)
 80049b6:	4313      	orrs	r3, r2
 80049b8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80049ba:	4b30      	ldr	r3, [pc, #192]	; (8004a7c <RCCEx_PLL2_Config+0x15c>)
 80049bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049be:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	695b      	ldr	r3, [r3, #20]
 80049c6:	492d      	ldr	r1, [pc, #180]	; (8004a7c <RCCEx_PLL2_Config+0x15c>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80049cc:	4b2b      	ldr	r3, [pc, #172]	; (8004a7c <RCCEx_PLL2_Config+0x15c>)
 80049ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d0:	f023 0220 	bic.w	r2, r3, #32
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	699b      	ldr	r3, [r3, #24]
 80049d8:	4928      	ldr	r1, [pc, #160]	; (8004a7c <RCCEx_PLL2_Config+0x15c>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80049de:	4b27      	ldr	r3, [pc, #156]	; (8004a7c <RCCEx_PLL2_Config+0x15c>)
 80049e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e2:	4a26      	ldr	r2, [pc, #152]	; (8004a7c <RCCEx_PLL2_Config+0x15c>)
 80049e4:	f023 0310 	bic.w	r3, r3, #16
 80049e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80049ea:	4b24      	ldr	r3, [pc, #144]	; (8004a7c <RCCEx_PLL2_Config+0x15c>)
 80049ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049ee:	4b24      	ldr	r3, [pc, #144]	; (8004a80 <RCCEx_PLL2_Config+0x160>)
 80049f0:	4013      	ands	r3, r2
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	69d2      	ldr	r2, [r2, #28]
 80049f6:	00d2      	lsls	r2, r2, #3
 80049f8:	4920      	ldr	r1, [pc, #128]	; (8004a7c <RCCEx_PLL2_Config+0x15c>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80049fe:	4b1f      	ldr	r3, [pc, #124]	; (8004a7c <RCCEx_PLL2_Config+0x15c>)
 8004a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a02:	4a1e      	ldr	r2, [pc, #120]	; (8004a7c <RCCEx_PLL2_Config+0x15c>)
 8004a04:	f043 0310 	orr.w	r3, r3, #16
 8004a08:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d106      	bne.n	8004a1e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004a10:	4b1a      	ldr	r3, [pc, #104]	; (8004a7c <RCCEx_PLL2_Config+0x15c>)
 8004a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a14:	4a19      	ldr	r2, [pc, #100]	; (8004a7c <RCCEx_PLL2_Config+0x15c>)
 8004a16:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a1a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004a1c:	e00f      	b.n	8004a3e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d106      	bne.n	8004a32 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004a24:	4b15      	ldr	r3, [pc, #84]	; (8004a7c <RCCEx_PLL2_Config+0x15c>)
 8004a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a28:	4a14      	ldr	r2, [pc, #80]	; (8004a7c <RCCEx_PLL2_Config+0x15c>)
 8004a2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a2e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004a30:	e005      	b.n	8004a3e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004a32:	4b12      	ldr	r3, [pc, #72]	; (8004a7c <RCCEx_PLL2_Config+0x15c>)
 8004a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a36:	4a11      	ldr	r2, [pc, #68]	; (8004a7c <RCCEx_PLL2_Config+0x15c>)
 8004a38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004a3c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004a3e:	4b0f      	ldr	r3, [pc, #60]	; (8004a7c <RCCEx_PLL2_Config+0x15c>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a0e      	ldr	r2, [pc, #56]	; (8004a7c <RCCEx_PLL2_Config+0x15c>)
 8004a44:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a4a:	f7fc fb75 	bl	8001138 <HAL_GetTick>
 8004a4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004a50:	e008      	b.n	8004a64 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004a52:	f7fc fb71 	bl	8001138 <HAL_GetTick>
 8004a56:	4602      	mov	r2, r0
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	2b02      	cmp	r3, #2
 8004a5e:	d901      	bls.n	8004a64 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004a60:	2303      	movs	r3, #3
 8004a62:	e006      	b.n	8004a72 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004a64:	4b05      	ldr	r3, [pc, #20]	; (8004a7c <RCCEx_PLL2_Config+0x15c>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d0f0      	beq.n	8004a52 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3710      	adds	r7, #16
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	58024400 	.word	0x58024400
 8004a80:	ffff0007 	.word	0xffff0007

08004a84 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004a92:	4b53      	ldr	r3, [pc, #332]	; (8004be0 <RCCEx_PLL3_Config+0x15c>)
 8004a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a96:	f003 0303 	and.w	r3, r3, #3
 8004a9a:	2b03      	cmp	r3, #3
 8004a9c:	d101      	bne.n	8004aa2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e099      	b.n	8004bd6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004aa2:	4b4f      	ldr	r3, [pc, #316]	; (8004be0 <RCCEx_PLL3_Config+0x15c>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a4e      	ldr	r2, [pc, #312]	; (8004be0 <RCCEx_PLL3_Config+0x15c>)
 8004aa8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004aac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004aae:	f7fc fb43 	bl	8001138 <HAL_GetTick>
 8004ab2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004ab4:	e008      	b.n	8004ac8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004ab6:	f7fc fb3f 	bl	8001138 <HAL_GetTick>
 8004aba:	4602      	mov	r2, r0
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	1ad3      	subs	r3, r2, r3
 8004ac0:	2b02      	cmp	r3, #2
 8004ac2:	d901      	bls.n	8004ac8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	e086      	b.n	8004bd6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004ac8:	4b45      	ldr	r3, [pc, #276]	; (8004be0 <RCCEx_PLL3_Config+0x15c>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d1f0      	bne.n	8004ab6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004ad4:	4b42      	ldr	r3, [pc, #264]	; (8004be0 <RCCEx_PLL3_Config+0x15c>)
 8004ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	051b      	lsls	r3, r3, #20
 8004ae2:	493f      	ldr	r1, [pc, #252]	; (8004be0 <RCCEx_PLL3_Config+0x15c>)
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	628b      	str	r3, [r1, #40]	; 0x28
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	3b01      	subs	r3, #1
 8004aee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	3b01      	subs	r3, #1
 8004af8:	025b      	lsls	r3, r3, #9
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	431a      	orrs	r2, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	3b01      	subs	r3, #1
 8004b04:	041b      	lsls	r3, r3, #16
 8004b06:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004b0a:	431a      	orrs	r2, r3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	691b      	ldr	r3, [r3, #16]
 8004b10:	3b01      	subs	r3, #1
 8004b12:	061b      	lsls	r3, r3, #24
 8004b14:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004b18:	4931      	ldr	r1, [pc, #196]	; (8004be0 <RCCEx_PLL3_Config+0x15c>)
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004b1e:	4b30      	ldr	r3, [pc, #192]	; (8004be0 <RCCEx_PLL3_Config+0x15c>)
 8004b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b22:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	695b      	ldr	r3, [r3, #20]
 8004b2a:	492d      	ldr	r1, [pc, #180]	; (8004be0 <RCCEx_PLL3_Config+0x15c>)
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004b30:	4b2b      	ldr	r3, [pc, #172]	; (8004be0 <RCCEx_PLL3_Config+0x15c>)
 8004b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b34:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	699b      	ldr	r3, [r3, #24]
 8004b3c:	4928      	ldr	r1, [pc, #160]	; (8004be0 <RCCEx_PLL3_Config+0x15c>)
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004b42:	4b27      	ldr	r3, [pc, #156]	; (8004be0 <RCCEx_PLL3_Config+0x15c>)
 8004b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b46:	4a26      	ldr	r2, [pc, #152]	; (8004be0 <RCCEx_PLL3_Config+0x15c>)
 8004b48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b4c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004b4e:	4b24      	ldr	r3, [pc, #144]	; (8004be0 <RCCEx_PLL3_Config+0x15c>)
 8004b50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b52:	4b24      	ldr	r3, [pc, #144]	; (8004be4 <RCCEx_PLL3_Config+0x160>)
 8004b54:	4013      	ands	r3, r2
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	69d2      	ldr	r2, [r2, #28]
 8004b5a:	00d2      	lsls	r2, r2, #3
 8004b5c:	4920      	ldr	r1, [pc, #128]	; (8004be0 <RCCEx_PLL3_Config+0x15c>)
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004b62:	4b1f      	ldr	r3, [pc, #124]	; (8004be0 <RCCEx_PLL3_Config+0x15c>)
 8004b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b66:	4a1e      	ldr	r2, [pc, #120]	; (8004be0 <RCCEx_PLL3_Config+0x15c>)
 8004b68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b6c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d106      	bne.n	8004b82 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004b74:	4b1a      	ldr	r3, [pc, #104]	; (8004be0 <RCCEx_PLL3_Config+0x15c>)
 8004b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b78:	4a19      	ldr	r2, [pc, #100]	; (8004be0 <RCCEx_PLL3_Config+0x15c>)
 8004b7a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004b7e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b80:	e00f      	b.n	8004ba2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d106      	bne.n	8004b96 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004b88:	4b15      	ldr	r3, [pc, #84]	; (8004be0 <RCCEx_PLL3_Config+0x15c>)
 8004b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b8c:	4a14      	ldr	r2, [pc, #80]	; (8004be0 <RCCEx_PLL3_Config+0x15c>)
 8004b8e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004b92:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b94:	e005      	b.n	8004ba2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004b96:	4b12      	ldr	r3, [pc, #72]	; (8004be0 <RCCEx_PLL3_Config+0x15c>)
 8004b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b9a:	4a11      	ldr	r2, [pc, #68]	; (8004be0 <RCCEx_PLL3_Config+0x15c>)
 8004b9c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ba0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004ba2:	4b0f      	ldr	r3, [pc, #60]	; (8004be0 <RCCEx_PLL3_Config+0x15c>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a0e      	ldr	r2, [pc, #56]	; (8004be0 <RCCEx_PLL3_Config+0x15c>)
 8004ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bae:	f7fc fac3 	bl	8001138 <HAL_GetTick>
 8004bb2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004bb4:	e008      	b.n	8004bc8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004bb6:	f7fc fabf 	bl	8001138 <HAL_GetTick>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	2b02      	cmp	r3, #2
 8004bc2:	d901      	bls.n	8004bc8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	e006      	b.n	8004bd6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004bc8:	4b05      	ldr	r3, [pc, #20]	; (8004be0 <RCCEx_PLL3_Config+0x15c>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d0f0      	beq.n	8004bb6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3710      	adds	r7, #16
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	58024400 	.word	0x58024400
 8004be4:	ffff0007 	.word	0xffff0007

08004be8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d071      	beq.n	8004cde <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d106      	bne.n	8004c14 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f7fc f82e 	bl	8000c70 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2202      	movs	r2, #2
 8004c18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	f003 0310 	and.w	r3, r3, #16
 8004c26:	2b10      	cmp	r3, #16
 8004c28:	d050      	beq.n	8004ccc <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	22ca      	movs	r2, #202	; 0xca
 8004c30:	625a      	str	r2, [r3, #36]	; 0x24
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2253      	movs	r2, #83	; 0x53
 8004c38:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 fb2e 	bl	800529c <RTC_EnterInitMode>
 8004c40:	4603      	mov	r3, r0
 8004c42:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8004c44:	7bfb      	ldrb	r3, [r7, #15]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d124      	bne.n	8004c94 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	6899      	ldr	r1, [r3, #8]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	4b24      	ldr	r3, [pc, #144]	; (8004ce8 <HAL_RTC_Init+0x100>)
 8004c56:	400b      	ands	r3, r1
 8004c58:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	6899      	ldr	r1, [r3, #8]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685a      	ldr	r2, [r3, #4]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	431a      	orrs	r2, r3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	699b      	ldr	r3, [r3, #24]
 8004c6e:	431a      	orrs	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	430a      	orrs	r2, r1
 8004c76:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	0419      	lsls	r1, r3, #16
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	68da      	ldr	r2, [r3, #12]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	430a      	orrs	r2, r1
 8004c88:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f000 fb3a 	bl	8005304 <RTC_ExitInitMode>
 8004c90:	4603      	mov	r3, r0
 8004c92:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 8004c94:	7bfb      	ldrb	r3, [r7, #15]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d113      	bne.n	8004cc2 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f022 0203 	bic.w	r2, r2, #3
 8004ca8:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	69da      	ldr	r2, [r3, #28]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	695b      	ldr	r3, [r3, #20]
 8004cb8:	431a      	orrs	r2, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	430a      	orrs	r2, r1
 8004cc0:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	22ff      	movs	r2, #255	; 0xff
 8004cc8:	625a      	str	r2, [r3, #36]	; 0x24
 8004cca:	e001      	b.n	8004cd0 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004cd0:	7bfb      	ldrb	r3, [r7, #15]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d103      	bne.n	8004cde <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2201      	movs	r2, #1
 8004cda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 8004cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3710      	adds	r7, #16
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	ff8fffbf 	.word	0xff8fffbf

08004cec <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004cec:	b590      	push	{r4, r7, lr}
 8004cee:	b087      	sub	sp, #28
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d101      	bne.n	8004d06 <HAL_RTC_SetTime+0x1a>
 8004d02:	2302      	movs	r3, #2
 8004d04:	e089      	b.n	8004e1a <HAL_RTC_SetTime+0x12e>
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2201      	movs	r2, #1
 8004d0a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2202      	movs	r2, #2
 8004d12:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	22ca      	movs	r2, #202	; 0xca
 8004d1c:	625a      	str	r2, [r3, #36]	; 0x24
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	2253      	movs	r2, #83	; 0x53
 8004d24:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004d26:	68f8      	ldr	r0, [r7, #12]
 8004d28:	f000 fab8 	bl	800529c <RTC_EnterInitMode>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8004d30:	7cfb      	ldrb	r3, [r7, #19]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d161      	bne.n	8004dfa <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d126      	bne.n	8004d8a <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d102      	bne.n	8004d50 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	4618      	mov	r0, r3
 8004d56:	f000 fb13 	bl	8005380 <RTC_ByteToBcd2>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	785b      	ldrb	r3, [r3, #1]
 8004d62:	4618      	mov	r0, r3
 8004d64:	f000 fb0c 	bl	8005380 <RTC_ByteToBcd2>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004d6c:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	789b      	ldrb	r3, [r3, #2]
 8004d72:	4618      	mov	r0, r3
 8004d74:	f000 fb04 	bl	8005380 <RTC_ByteToBcd2>
 8004d78:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004d7a:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	78db      	ldrb	r3, [r3, #3]
 8004d82:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004d84:	4313      	orrs	r3, r2
 8004d86:	617b      	str	r3, [r7, #20]
 8004d88:	e018      	b.n	8004dbc <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d102      	bne.n	8004d9e <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	785b      	ldrb	r3, [r3, #1]
 8004da8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004daa:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8004dac:	68ba      	ldr	r2, [r7, #8]
 8004dae:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004db0:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	78db      	ldrb	r3, [r3, #3]
 8004db6:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004db8:	4313      	orrs	r3, r2
 8004dba:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	6979      	ldr	r1, [r7, #20]
 8004dc2:	4b18      	ldr	r3, [pc, #96]	; (8004e24 <HAL_RTC_SetTime+0x138>)
 8004dc4:	400b      	ands	r3, r1
 8004dc6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	689a      	ldr	r2, [r3, #8]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004dd6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	6899      	ldr	r1, [r3, #8]
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	68da      	ldr	r2, [r3, #12]
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	431a      	orrs	r2, r3
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	430a      	orrs	r2, r1
 8004dee:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004df0:	68f8      	ldr	r0, [r7, #12]
 8004df2:	f000 fa87 	bl	8005304 <RTC_ExitInitMode>
 8004df6:	4603      	mov	r3, r0
 8004df8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	22ff      	movs	r2, #255	; 0xff
 8004e00:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004e02:	7cfb      	ldrb	r3, [r7, #19]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d103      	bne.n	8004e10 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2200      	movs	r2, #0
 8004e14:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8004e18:	7cfb      	ldrb	r3, [r7, #19]
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	371c      	adds	r7, #28
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd90      	pop	{r4, r7, pc}
 8004e22:	bf00      	nop
 8004e24:	007f7f7f 	.word	0x007f7f7f

08004e28 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004e28:	b590      	push	{r4, r7, lr}
 8004e2a:	b087      	sub	sp, #28
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	60b9      	str	r1, [r7, #8]
 8004e32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d101      	bne.n	8004e42 <HAL_RTC_SetDate+0x1a>
 8004e3e:	2302      	movs	r3, #2
 8004e40:	e073      	b.n	8004f2a <HAL_RTC_SetDate+0x102>
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2201      	movs	r2, #1
 8004e46:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2202      	movs	r2, #2
 8004e4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d10e      	bne.n	8004e76 <HAL_RTC_SetDate+0x4e>
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	785b      	ldrb	r3, [r3, #1]
 8004e5c:	f003 0310 	and.w	r3, r3, #16
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d008      	beq.n	8004e76 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	785b      	ldrb	r3, [r3, #1]
 8004e68:	f023 0310 	bic.w	r3, r3, #16
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	330a      	adds	r3, #10
 8004e70:	b2da      	uxtb	r2, r3
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d11c      	bne.n	8004eb6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	78db      	ldrb	r3, [r3, #3]
 8004e80:	4618      	mov	r0, r3
 8004e82:	f000 fa7d 	bl	8005380 <RTC_ByteToBcd2>
 8004e86:	4603      	mov	r3, r0
 8004e88:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	785b      	ldrb	r3, [r3, #1]
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f000 fa76 	bl	8005380 <RTC_ByteToBcd2>
 8004e94:	4603      	mov	r3, r0
 8004e96:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004e98:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	789b      	ldrb	r3, [r3, #2]
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f000 fa6e 	bl	8005380 <RTC_ByteToBcd2>
 8004ea4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004ea6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	617b      	str	r3, [r7, #20]
 8004eb4:	e00e      	b.n	8004ed4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	78db      	ldrb	r3, [r3, #3]
 8004eba:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	785b      	ldrb	r3, [r3, #1]
 8004ec0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004ec2:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8004ec4:	68ba      	ldr	r2, [r7, #8]
 8004ec6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004ec8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	22ca      	movs	r2, #202	; 0xca
 8004eda:	625a      	str	r2, [r3, #36]	; 0x24
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2253      	movs	r2, #83	; 0x53
 8004ee2:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004ee4:	68f8      	ldr	r0, [r7, #12]
 8004ee6:	f000 f9d9 	bl	800529c <RTC_EnterInitMode>
 8004eea:	4603      	mov	r3, r0
 8004eec:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8004eee:	7cfb      	ldrb	r3, [r7, #19]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d10a      	bne.n	8004f0a <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	6979      	ldr	r1, [r7, #20]
 8004efa:	4b0e      	ldr	r3, [pc, #56]	; (8004f34 <HAL_RTC_SetDate+0x10c>)
 8004efc:	400b      	ands	r3, r1
 8004efe:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004f00:	68f8      	ldr	r0, [r7, #12]
 8004f02:	f000 f9ff 	bl	8005304 <RTC_ExitInitMode>
 8004f06:	4603      	mov	r3, r0
 8004f08:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	22ff      	movs	r2, #255	; 0xff
 8004f10:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004f12:	7cfb      	ldrb	r3, [r7, #19]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d103      	bne.n	8004f20 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8004f28:	7cfb      	ldrb	r3, [r7, #19]


}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	371c      	adds	r7, #28
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd90      	pop	{r4, r7, pc}
 8004f32:	bf00      	nop
 8004f34:	00ffff3f 	.word	0x00ffff3f

08004f38 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004f38:	b590      	push	{r4, r7, lr}
 8004f3a:	b089      	sub	sp, #36	; 0x24
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d101      	bne.n	8004f52 <HAL_RTC_SetAlarm_IT+0x1a>
 8004f4e:	2302      	movs	r3, #2
 8004f50:	e129      	b.n	80051a6 <HAL_RTC_SetAlarm_IT+0x26e>
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2201      	movs	r2, #1
 8004f56:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2202      	movs	r2, #2
 8004f5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if(Format == RTC_FORMAT_BIN)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d137      	bne.n	8004fd8 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d102      	bne.n	8004f7c <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	4618      	mov	r0, r3
 8004f82:	f000 f9fd 	bl	8005380 <RTC_ByteToBcd2>
 8004f86:	4603      	mov	r3, r0
 8004f88:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	785b      	ldrb	r3, [r3, #1]
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f000 f9f6 	bl	8005380 <RTC_ByteToBcd2>
 8004f94:	4603      	mov	r3, r0
 8004f96:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8004f98:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos)  | \
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	789b      	ldrb	r3, [r3, #2]
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f000 f9ee 	bl	8005380 <RTC_ByteToBcd2>
 8004fa4:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004fa6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmTime.TimeFormat              << RTC_ALRMAR_PM_Pos)  | \
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	78db      	ldrb	r3, [r3, #3]
 8004fae:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos)  | \
 8004fb0:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f000 f9e0 	bl	8005380 <RTC_ByteToBcd2>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	061b      	lsls	r3, r3, #24
              ((uint32_t)sAlarm->AlarmTime.TimeFormat              << RTC_ALRMAR_PM_Pos)  | \
 8004fc4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8004fcc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	61fb      	str	r3, [r7, #28]
 8004fd6:	e023      	b.n	8005020 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d102      	bne.n	8004fec <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	041a      	lsls	r2, r3, #16
              ((uint32_t)sAlarm->AlarmTime.Minutes     << RTC_ALRMAR_MNU_Pos) | \
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	785b      	ldrb	r3, [r3, #1]
 8004ff6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 8004ff8:	4313      	orrs	r3, r2
              ((uint32_t)sAlarm->AlarmTime.Seconds     << RTC_ALRMAR_SU_Pos)  | \
 8004ffa:	68ba      	ldr	r2, [r7, #8]
 8004ffc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)sAlarm->AlarmTime.Minutes     << RTC_ALRMAR_MNU_Pos) | \
 8004ffe:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmTime.TimeFormat  << RTC_ALRMAR_PM_Pos)  | \
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	78db      	ldrb	r3, [r3, #3]
 8005004:	059b      	lsls	r3, r3, #22
              ((uint32_t)sAlarm->AlarmTime.Seconds     << RTC_ALRMAR_SU_Pos)  | \
 8005006:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDay      << RTC_ALRMAR_DU_Pos)  | \
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800500e:	061b      	lsls	r3, r3, #24
              ((uint32_t)sAlarm->AlarmTime.TimeFormat  << RTC_ALRMAR_PM_Pos)  | \
 8005010:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                         | \
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)sAlarm->AlarmDateWeekDay      << RTC_ALRMAR_DU_Pos)  | \
 8005016:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 800501c:	4313      	orrs	r3, r2
 800501e:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	685a      	ldr	r2, [r3, #4]
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	699b      	ldr	r3, [r3, #24]
 8005028:	4313      	orrs	r3, r2
 800502a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	22ca      	movs	r2, #202	; 0xca
 8005032:	625a      	str	r2, [r3, #36]	; 0x24
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2253      	movs	r2, #83	; 0x53
 800503a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005040:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005044:	d14a      	bne.n	80050dc <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	689a      	ldr	r2, [r3, #8]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005054:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	b2da      	uxtb	r2, r3
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8005066:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005068:	f7fc f866 	bl	8001138 <HAL_GetTick>
 800506c:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
#if defined(TAMP)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRAWF) == 0U)
#else
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800506e:	e015      	b.n	800509c <HAL_RTC_SetAlarm_IT+0x164>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005070:	f7fc f862 	bl	8001138 <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800507e:	d90d      	bls.n	800509c <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	22ff      	movs	r2, #255	; 0xff
 8005086:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2203      	movs	r2, #3
 800508c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2200      	movs	r2, #0
 8005094:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8005098:	2303      	movs	r3, #3
 800509a:	e084      	b.n	80051a6 <HAL_RTC_SetAlarm_IT+0x26e>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	f003 0301 	and.w	r3, r3, #1
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d0e2      	beq.n	8005070 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	69fa      	ldr	r2, [r7, #28]
 80050b0:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	69ba      	ldr	r2, [r7, #24]
 80050b8:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	689a      	ldr	r2, [r3, #8]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050c8:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	689a      	ldr	r2, [r3, #8]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80050d8:	609a      	str	r2, [r3, #8]
 80050da:	e049      	b.n	8005170 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	689a      	ldr	r2, [r3, #8]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80050ea:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	b2da      	uxtb	r2, r3
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f462 7220 	orn	r2, r2, #640	; 0x280
 80050fc:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80050fe:	f7fc f81b 	bl	8001138 <HAL_GetTick>
 8005102:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
#if defined(TAMP)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRBWF) == 0U)
#else
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005104:	e015      	b.n	8005132 <HAL_RTC_SetAlarm_IT+0x1fa>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005106:	f7fc f817 	bl	8001138 <HAL_GetTick>
 800510a:	4602      	mov	r2, r0
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	1ad3      	subs	r3, r2, r3
 8005110:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005114:	d90d      	bls.n	8005132 <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	22ff      	movs	r2, #255	; 0xff
 800511c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2203      	movs	r2, #3
 8005122:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2200      	movs	r2, #0
 800512a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	e039      	b.n	80051a6 <HAL_RTC_SetAlarm_IT+0x26e>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	f003 0302 	and.w	r3, r3, #2
 800513c:	2b00      	cmp	r3, #0
 800513e:	d0e2      	beq.n	8005106 <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	69fa      	ldr	r2, [r7, #28]
 8005146:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	69ba      	ldr	r2, [r7, #24]
 800514e:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	689a      	ldr	r2, [r3, #8]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800515e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	689a      	ldr	r2, [r3, #8]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800516e:	609a      	str	r2, [r3, #8]
  else
  {
    __HAL_RTC_ALARM_EXTID2_ENABLE_IT();
  }
#else  /* SINGLE_CORE */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005170:	4b0f      	ldr	r3, [pc, #60]	; (80051b0 <HAL_RTC_SetAlarm_IT+0x278>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a0e      	ldr	r2, [pc, #56]	; (80051b0 <HAL_RTC_SetAlarm_IT+0x278>)
 8005176:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800517a:	6013      	str	r3, [r2, #0]
#endif

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800517c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005186:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800518a:	6013      	str	r3, [r2, #0]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	22ff      	movs	r2, #255	; 0xff
 8005192:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2200      	movs	r2, #0
 80051a0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3724      	adds	r7, #36	; 0x24
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd90      	pop	{r4, r7, pc}
 80051ae:	bf00      	nop
 80051b0:	58000080 	.word	0x58000080

080051b4 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  else
  {
    __HAL_RTC_ALARM_EXTID2_CLEAR_FLAG();
  }
#else  /* SINGLE_CORE */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80051bc:	4b1f      	ldr	r3, [pc, #124]	; (800523c <HAL_RTC_AlarmIRQHandler+0x88>)
 80051be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80051c2:	609a      	str	r2, [r3, #8]
    HAL_RTCEx_AlarmBEventCallback(hrtc);
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
  }
#else
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d012      	beq.n	80051f8 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d00b      	beq.n	80051f8 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	b2da      	uxtb	r2, r3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80051f0:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else  /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
      HAL_RTC_AlarmAEventCallback(hrtc);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 f824 	bl	8005240 <HAL_RTC_AlarmAEventCallback>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005202:	2b00      	cmp	r3, #0
 8005204:	d012      	beq.n	800522c <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005210:	2b00      	cmp	r3, #0
 8005212:	d00b      	beq.n	800522c <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	68db      	ldr	r3, [r3, #12]
 800521a:	b2da      	uxtb	r2, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f462 7220 	orn	r2, r2, #640	; 0x280
 8005224:	60da      	str	r2, [r3, #12]

      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else  /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 f8ca 	bl	80053c0 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* TAMP */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8005234:	bf00      	nop
 8005236:	3708      	adds	r7, #8
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}
 800523c:	58000080 	.word	0x58000080

08005240 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005240:	b480      	push	{r7}
 8005242:	b083      	sub	sp, #12
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8005248:	bf00      	nop
 800524a:	370c      	adds	r7, #12
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr

08005254 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a0d      	ldr	r2, [pc, #52]	; (8005298 <HAL_RTC_WaitForSynchro+0x44>)
 8005262:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8005264:	f7fb ff68 	bl	8001138 <HAL_GetTick>
 8005268:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800526a:	e009      	b.n	8005280 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800526c:	f7fb ff64 	bl	8001138 <HAL_GetTick>
 8005270:	4602      	mov	r2, r0
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800527a:	d901      	bls.n	8005280 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800527c:	2303      	movs	r3, #3
 800527e:	e007      	b.n	8005290 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	f003 0320 	and.w	r3, r3, #32
 800528a:	2b00      	cmp	r3, #0
 800528c:	d0ee      	beq.n	800526c <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800528e:	2300      	movs	r3, #0
}
 8005290:	4618      	mov	r0, r3
 8005292:	3710      	adds	r7, #16
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}
 8005298:	0003ff5f 	.word	0x0003ff5f

0800529c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80052a4:	2300      	movs	r3, #0
 80052a6:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d120      	bne.n	80052f8 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f04f 32ff 	mov.w	r2, #4294967295
 80052be:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80052c0:	f7fb ff3a 	bl	8001138 <HAL_GetTick>
 80052c4:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80052c6:	e00d      	b.n	80052e4 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80052c8:	f7fb ff36 	bl	8001138 <HAL_GetTick>
 80052cc:	4602      	mov	r2, r0
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052d6:	d905      	bls.n	80052e4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80052d8:	2303      	movs	r3, #3
 80052da:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2203      	movs	r2, #3
 80052e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d102      	bne.n	80052f8 <RTC_EnterInitMode+0x5c>
 80052f2:	7bfb      	ldrb	r3, [r7, #15]
 80052f4:	2b03      	cmp	r3, #3
 80052f6:	d1e7      	bne.n	80052c8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80052f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3710      	adds	r7, #16
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
	...

08005304 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800530c:	2300      	movs	r3, #0
 800530e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8005310:	4b1a      	ldr	r3, [pc, #104]	; (800537c <RTC_ExitInitMode+0x78>)
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	4a19      	ldr	r2, [pc, #100]	; (800537c <RTC_ExitInitMode+0x78>)
 8005316:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800531a:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800531c:	4b17      	ldr	r3, [pc, #92]	; (800537c <RTC_ExitInitMode+0x78>)
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	f003 0320 	and.w	r3, r3, #32
 8005324:	2b00      	cmp	r3, #0
 8005326:	d10c      	bne.n	8005342 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f7ff ff93 	bl	8005254 <HAL_RTC_WaitForSynchro>
 800532e:	4603      	mov	r3, r0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d01e      	beq.n	8005372 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2203      	movs	r2, #3
 8005338:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800533c:	2303      	movs	r3, #3
 800533e:	73fb      	strb	r3, [r7, #15]
 8005340:	e017      	b.n	8005372 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005342:	4b0e      	ldr	r3, [pc, #56]	; (800537c <RTC_ExitInitMode+0x78>)
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	4a0d      	ldr	r2, [pc, #52]	; (800537c <RTC_ExitInitMode+0x78>)
 8005348:	f023 0320 	bic.w	r3, r3, #32
 800534c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f7ff ff80 	bl	8005254 <HAL_RTC_WaitForSynchro>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d005      	beq.n	8005366 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2203      	movs	r2, #3
 800535e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005366:	4b05      	ldr	r3, [pc, #20]	; (800537c <RTC_ExitInitMode+0x78>)
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	4a04      	ldr	r2, [pc, #16]	; (800537c <RTC_ExitInitMode+0x78>)
 800536c:	f043 0320 	orr.w	r3, r3, #32
 8005370:	6093      	str	r3, [r2, #8]
  }

  return status;
 8005372:	7bfb      	ldrb	r3, [r7, #15]
}
 8005374:	4618      	mov	r0, r3
 8005376:	3710      	adds	r7, #16
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}
 800537c:	58004000 	.word	0x58004000

08005380 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005380:	b480      	push	{r7}
 8005382:	b085      	sub	sp, #20
 8005384:	af00      	add	r7, sp, #0
 8005386:	4603      	mov	r3, r0
 8005388:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800538a:	2300      	movs	r3, #0
 800538c:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800538e:	79fb      	ldrb	r3, [r7, #7]
 8005390:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 8005392:	e005      	b.n	80053a0 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	3301      	adds	r3, #1
 8005398:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800539a:	7afb      	ldrb	r3, [r7, #11]
 800539c:	3b0a      	subs	r3, #10
 800539e:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 80053a0:	7afb      	ldrb	r3, [r7, #11]
 80053a2:	2b09      	cmp	r3, #9
 80053a4:	d8f6      	bhi.n	8005394 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	011b      	lsls	r3, r3, #4
 80053ac:	b2da      	uxtb	r2, r3
 80053ae:	7afb      	ldrb	r3, [r7, #11]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	b2db      	uxtb	r3, r3
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3714      	adds	r7, #20
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr

080053c0 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef * hrtc)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80053c8:	bf00      	nop
 80053ca:	370c      	adds	r7, #12
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d101      	bne.n	80053e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e049      	b.n	800547a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d106      	bne.n	8005400 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f000 f841 	bl	8005482 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2202      	movs	r2, #2
 8005404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	3304      	adds	r3, #4
 8005410:	4619      	mov	r1, r3
 8005412:	4610      	mov	r0, r2
 8005414:	f000 fa18 	bl	8005848 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3708      	adds	r7, #8
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}

08005482 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005482:	b480      	push	{r7}
 8005484:	b083      	sub	sp, #12
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800548a:	bf00      	nop
 800548c:	370c      	adds	r7, #12
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr
	...

08005498 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005498:	b480      	push	{r7}
 800549a:	b085      	sub	sp, #20
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d001      	beq.n	80054b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e05e      	b.n	800556e <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2202      	movs	r2, #2
 80054b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68da      	ldr	r2, [r3, #12]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f042 0201 	orr.w	r2, r2, #1
 80054c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a2b      	ldr	r2, [pc, #172]	; (800557c <HAL_TIM_Base_Start_IT+0xe4>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d02c      	beq.n	800552c <HAL_TIM_Base_Start_IT+0x94>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054da:	d027      	beq.n	800552c <HAL_TIM_Base_Start_IT+0x94>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a27      	ldr	r2, [pc, #156]	; (8005580 <HAL_TIM_Base_Start_IT+0xe8>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d022      	beq.n	800552c <HAL_TIM_Base_Start_IT+0x94>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a26      	ldr	r2, [pc, #152]	; (8005584 <HAL_TIM_Base_Start_IT+0xec>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d01d      	beq.n	800552c <HAL_TIM_Base_Start_IT+0x94>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a24      	ldr	r2, [pc, #144]	; (8005588 <HAL_TIM_Base_Start_IT+0xf0>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d018      	beq.n	800552c <HAL_TIM_Base_Start_IT+0x94>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a23      	ldr	r2, [pc, #140]	; (800558c <HAL_TIM_Base_Start_IT+0xf4>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d013      	beq.n	800552c <HAL_TIM_Base_Start_IT+0x94>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a21      	ldr	r2, [pc, #132]	; (8005590 <HAL_TIM_Base_Start_IT+0xf8>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d00e      	beq.n	800552c <HAL_TIM_Base_Start_IT+0x94>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a20      	ldr	r2, [pc, #128]	; (8005594 <HAL_TIM_Base_Start_IT+0xfc>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d009      	beq.n	800552c <HAL_TIM_Base_Start_IT+0x94>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a1e      	ldr	r2, [pc, #120]	; (8005598 <HAL_TIM_Base_Start_IT+0x100>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d004      	beq.n	800552c <HAL_TIM_Base_Start_IT+0x94>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a1d      	ldr	r2, [pc, #116]	; (800559c <HAL_TIM_Base_Start_IT+0x104>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d115      	bne.n	8005558 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	689a      	ldr	r2, [r3, #8]
 8005532:	4b1b      	ldr	r3, [pc, #108]	; (80055a0 <HAL_TIM_Base_Start_IT+0x108>)
 8005534:	4013      	ands	r3, r2
 8005536:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2b06      	cmp	r3, #6
 800553c:	d015      	beq.n	800556a <HAL_TIM_Base_Start_IT+0xd2>
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005544:	d011      	beq.n	800556a <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f042 0201 	orr.w	r2, r2, #1
 8005554:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005556:	e008      	b.n	800556a <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f042 0201 	orr.w	r2, r2, #1
 8005566:	601a      	str	r2, [r3, #0]
 8005568:	e000      	b.n	800556c <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800556a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800556c:	2300      	movs	r3, #0
}
 800556e:	4618      	mov	r0, r3
 8005570:	3714      	adds	r7, #20
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr
 800557a:	bf00      	nop
 800557c:	40010000 	.word	0x40010000
 8005580:	40000400 	.word	0x40000400
 8005584:	40000800 	.word	0x40000800
 8005588:	40000c00 	.word	0x40000c00
 800558c:	40010400 	.word	0x40010400
 8005590:	40001800 	.word	0x40001800
 8005594:	40014000 	.word	0x40014000
 8005598:	4000e000 	.word	0x4000e000
 800559c:	4000e400 	.word	0x4000e400
 80055a0:	00010007 	.word	0x00010007

080055a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b082      	sub	sp, #8
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	f003 0302 	and.w	r3, r3, #2
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d122      	bne.n	8005600 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	f003 0302 	and.w	r3, r3, #2
 80055c4:	2b02      	cmp	r3, #2
 80055c6:	d11b      	bne.n	8005600 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f06f 0202 	mvn.w	r2, #2
 80055d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2201      	movs	r2, #1
 80055d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	699b      	ldr	r3, [r3, #24]
 80055de:	f003 0303 	and.w	r3, r3, #3
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d003      	beq.n	80055ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 f90f 	bl	800580a <HAL_TIM_IC_CaptureCallback>
 80055ec:	e005      	b.n	80055fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 f901 	bl	80057f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f000 f912 	bl	800581e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	f003 0304 	and.w	r3, r3, #4
 800560a:	2b04      	cmp	r3, #4
 800560c:	d122      	bne.n	8005654 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	f003 0304 	and.w	r3, r3, #4
 8005618:	2b04      	cmp	r3, #4
 800561a:	d11b      	bne.n	8005654 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f06f 0204 	mvn.w	r2, #4
 8005624:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2202      	movs	r2, #2
 800562a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	699b      	ldr	r3, [r3, #24]
 8005632:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005636:	2b00      	cmp	r3, #0
 8005638:	d003      	beq.n	8005642 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 f8e5 	bl	800580a <HAL_TIM_IC_CaptureCallback>
 8005640:	e005      	b.n	800564e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 f8d7 	bl	80057f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f000 f8e8 	bl	800581e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	f003 0308 	and.w	r3, r3, #8
 800565e:	2b08      	cmp	r3, #8
 8005660:	d122      	bne.n	80056a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	f003 0308 	and.w	r3, r3, #8
 800566c:	2b08      	cmp	r3, #8
 800566e:	d11b      	bne.n	80056a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f06f 0208 	mvn.w	r2, #8
 8005678:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2204      	movs	r2, #4
 800567e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	69db      	ldr	r3, [r3, #28]
 8005686:	f003 0303 	and.w	r3, r3, #3
 800568a:	2b00      	cmp	r3, #0
 800568c:	d003      	beq.n	8005696 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 f8bb 	bl	800580a <HAL_TIM_IC_CaptureCallback>
 8005694:	e005      	b.n	80056a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 f8ad 	bl	80057f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f000 f8be 	bl	800581e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	f003 0310 	and.w	r3, r3, #16
 80056b2:	2b10      	cmp	r3, #16
 80056b4:	d122      	bne.n	80056fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	f003 0310 	and.w	r3, r3, #16
 80056c0:	2b10      	cmp	r3, #16
 80056c2:	d11b      	bne.n	80056fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f06f 0210 	mvn.w	r2, #16
 80056cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2208      	movs	r2, #8
 80056d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	69db      	ldr	r3, [r3, #28]
 80056da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d003      	beq.n	80056ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 f891 	bl	800580a <HAL_TIM_IC_CaptureCallback>
 80056e8:	e005      	b.n	80056f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 f883 	bl	80057f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f000 f894 	bl	800581e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	f003 0301 	and.w	r3, r3, #1
 8005706:	2b01      	cmp	r3, #1
 8005708:	d10e      	bne.n	8005728 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	f003 0301 	and.w	r3, r3, #1
 8005714:	2b01      	cmp	r3, #1
 8005716:	d107      	bne.n	8005728 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f06f 0201 	mvn.w	r2, #1
 8005720:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 f85d 	bl	80057e2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005732:	2b80      	cmp	r3, #128	; 0x80
 8005734:	d10e      	bne.n	8005754 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005740:	2b80      	cmp	r3, #128	; 0x80
 8005742:	d107      	bne.n	8005754 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800574c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f000 f92a 	bl	80059a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800575e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005762:	d10e      	bne.n	8005782 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800576e:	2b80      	cmp	r3, #128	; 0x80
 8005770:	d107      	bne.n	8005782 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800577a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f000 f91d 	bl	80059bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	691b      	ldr	r3, [r3, #16]
 8005788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800578c:	2b40      	cmp	r3, #64	; 0x40
 800578e:	d10e      	bne.n	80057ae <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800579a:	2b40      	cmp	r3, #64	; 0x40
 800579c:	d107      	bne.n	80057ae <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80057a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f000 f842 	bl	8005832 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	f003 0320 	and.w	r3, r3, #32
 80057b8:	2b20      	cmp	r3, #32
 80057ba:	d10e      	bne.n	80057da <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	f003 0320 	and.w	r3, r3, #32
 80057c6:	2b20      	cmp	r3, #32
 80057c8:	d107      	bne.n	80057da <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f06f 0220 	mvn.w	r2, #32
 80057d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f000 f8dd 	bl	8005994 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057da:	bf00      	nop
 80057dc:	3708      	adds	r7, #8
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}

080057e2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057e2:	b480      	push	{r7}
 80057e4:	b083      	sub	sp, #12
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80057ea:	bf00      	nop
 80057ec:	370c      	adds	r7, #12
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr

080057f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057f6:	b480      	push	{r7}
 80057f8:	b083      	sub	sp, #12
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057fe:	bf00      	nop
 8005800:	370c      	adds	r7, #12
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr

0800580a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800580a:	b480      	push	{r7}
 800580c:	b083      	sub	sp, #12
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005812:	bf00      	nop
 8005814:	370c      	adds	r7, #12
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr

0800581e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800581e:	b480      	push	{r7}
 8005820:	b083      	sub	sp, #12
 8005822:	af00      	add	r7, sp, #0
 8005824:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005826:	bf00      	nop
 8005828:	370c      	adds	r7, #12
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr

08005832 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005832:	b480      	push	{r7}
 8005834:	b083      	sub	sp, #12
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800583a:	bf00      	nop
 800583c:	370c      	adds	r7, #12
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr
	...

08005848 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005848:	b480      	push	{r7}
 800584a:	b085      	sub	sp, #20
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4a44      	ldr	r2, [pc, #272]	; (800596c <TIM_Base_SetConfig+0x124>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d013      	beq.n	8005888 <TIM_Base_SetConfig+0x40>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005866:	d00f      	beq.n	8005888 <TIM_Base_SetConfig+0x40>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a41      	ldr	r2, [pc, #260]	; (8005970 <TIM_Base_SetConfig+0x128>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d00b      	beq.n	8005888 <TIM_Base_SetConfig+0x40>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a40      	ldr	r2, [pc, #256]	; (8005974 <TIM_Base_SetConfig+0x12c>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d007      	beq.n	8005888 <TIM_Base_SetConfig+0x40>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a3f      	ldr	r2, [pc, #252]	; (8005978 <TIM_Base_SetConfig+0x130>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d003      	beq.n	8005888 <TIM_Base_SetConfig+0x40>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a3e      	ldr	r2, [pc, #248]	; (800597c <TIM_Base_SetConfig+0x134>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d108      	bne.n	800589a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800588e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	68fa      	ldr	r2, [r7, #12]
 8005896:	4313      	orrs	r3, r2
 8005898:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a33      	ldr	r2, [pc, #204]	; (800596c <TIM_Base_SetConfig+0x124>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d027      	beq.n	80058f2 <TIM_Base_SetConfig+0xaa>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058a8:	d023      	beq.n	80058f2 <TIM_Base_SetConfig+0xaa>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a30      	ldr	r2, [pc, #192]	; (8005970 <TIM_Base_SetConfig+0x128>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d01f      	beq.n	80058f2 <TIM_Base_SetConfig+0xaa>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a2f      	ldr	r2, [pc, #188]	; (8005974 <TIM_Base_SetConfig+0x12c>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d01b      	beq.n	80058f2 <TIM_Base_SetConfig+0xaa>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a2e      	ldr	r2, [pc, #184]	; (8005978 <TIM_Base_SetConfig+0x130>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d017      	beq.n	80058f2 <TIM_Base_SetConfig+0xaa>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a2d      	ldr	r2, [pc, #180]	; (800597c <TIM_Base_SetConfig+0x134>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d013      	beq.n	80058f2 <TIM_Base_SetConfig+0xaa>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a2c      	ldr	r2, [pc, #176]	; (8005980 <TIM_Base_SetConfig+0x138>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d00f      	beq.n	80058f2 <TIM_Base_SetConfig+0xaa>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a2b      	ldr	r2, [pc, #172]	; (8005984 <TIM_Base_SetConfig+0x13c>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d00b      	beq.n	80058f2 <TIM_Base_SetConfig+0xaa>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a2a      	ldr	r2, [pc, #168]	; (8005988 <TIM_Base_SetConfig+0x140>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d007      	beq.n	80058f2 <TIM_Base_SetConfig+0xaa>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a29      	ldr	r2, [pc, #164]	; (800598c <TIM_Base_SetConfig+0x144>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d003      	beq.n	80058f2 <TIM_Base_SetConfig+0xaa>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a28      	ldr	r2, [pc, #160]	; (8005990 <TIM_Base_SetConfig+0x148>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d108      	bne.n	8005904 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	4313      	orrs	r3, r2
 8005902:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	695b      	ldr	r3, [r3, #20]
 800590e:	4313      	orrs	r3, r2
 8005910:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	68fa      	ldr	r2, [r7, #12]
 8005916:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	689a      	ldr	r2, [r3, #8]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4a10      	ldr	r2, [pc, #64]	; (800596c <TIM_Base_SetConfig+0x124>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d00f      	beq.n	8005950 <TIM_Base_SetConfig+0x108>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	4a12      	ldr	r2, [pc, #72]	; (800597c <TIM_Base_SetConfig+0x134>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d00b      	beq.n	8005950 <TIM_Base_SetConfig+0x108>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	4a11      	ldr	r2, [pc, #68]	; (8005980 <TIM_Base_SetConfig+0x138>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d007      	beq.n	8005950 <TIM_Base_SetConfig+0x108>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	4a10      	ldr	r2, [pc, #64]	; (8005984 <TIM_Base_SetConfig+0x13c>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d003      	beq.n	8005950 <TIM_Base_SetConfig+0x108>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4a0f      	ldr	r2, [pc, #60]	; (8005988 <TIM_Base_SetConfig+0x140>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d103      	bne.n	8005958 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	691a      	ldr	r2, [r3, #16]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	615a      	str	r2, [r3, #20]
}
 800595e:	bf00      	nop
 8005960:	3714      	adds	r7, #20
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr
 800596a:	bf00      	nop
 800596c:	40010000 	.word	0x40010000
 8005970:	40000400 	.word	0x40000400
 8005974:	40000800 	.word	0x40000800
 8005978:	40000c00 	.word	0x40000c00
 800597c:	40010400 	.word	0x40010400
 8005980:	40014000 	.word	0x40014000
 8005984:	40014400 	.word	0x40014400
 8005988:	40014800 	.word	0x40014800
 800598c:	4000e000 	.word	0x4000e000
 8005990:	4000e400 	.word	0x4000e400

08005994 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800599c:	bf00      	nop
 800599e:	370c      	adds	r7, #12
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059b0:	bf00      	nop
 80059b2:	370c      	adds	r7, #12
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr

080059bc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80059bc:	b480      	push	{r7}
 80059be:	b083      	sub	sp, #12
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80059c4:	bf00      	nop
 80059c6:	370c      	adds	r7, #12
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr

080059d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b082      	sub	sp, #8
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d101      	bne.n	80059e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	e042      	b.n	8005a68 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d106      	bne.n	80059fa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2200      	movs	r2, #0
 80059f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f7fb f975 	bl	8000ce4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2224      	movs	r2, #36	; 0x24
 80059fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f022 0201 	bic.w	r2, r2, #1
 8005a10:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 f82c 	bl	8005a70 <UART_SetConfig>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d101      	bne.n	8005a22 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e022      	b.n	8005a68 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d002      	beq.n	8005a30 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 fe8c 	bl	8006748 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	685a      	ldr	r2, [r3, #4]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	689a      	ldr	r2, [r3, #8]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f042 0201 	orr.w	r2, r2, #1
 8005a5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f000 ff13 	bl	800688c <UART_CheckIdleState>
 8005a66:	4603      	mov	r3, r0
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3708      	adds	r7, #8
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}

08005a70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a74:	b092      	sub	sp, #72	; 0x48
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	689a      	ldr	r2, [r3, #8]
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	691b      	ldr	r3, [r3, #16]
 8005a88:	431a      	orrs	r2, r3
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	695b      	ldr	r3, [r3, #20]
 8005a8e:	431a      	orrs	r2, r3
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	69db      	ldr	r3, [r3, #28]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	4bbe      	ldr	r3, [pc, #760]	; (8005d98 <UART_SetConfig+0x328>)
 8005aa0:	4013      	ands	r3, r2
 8005aa2:	697a      	ldr	r2, [r7, #20]
 8005aa4:	6812      	ldr	r2, [r2, #0]
 8005aa6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005aa8:	430b      	orrs	r3, r1
 8005aaa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	68da      	ldr	r2, [r3, #12]
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	430a      	orrs	r2, r1
 8005ac0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	699b      	ldr	r3, [r3, #24]
 8005ac6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4ab3      	ldr	r2, [pc, #716]	; (8005d9c <UART_SetConfig+0x32c>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d004      	beq.n	8005adc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	6a1b      	ldr	r3, [r3, #32]
 8005ad6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	689a      	ldr	r2, [r3, #8]
 8005ae2:	4baf      	ldr	r3, [pc, #700]	; (8005da0 <UART_SetConfig+0x330>)
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	697a      	ldr	r2, [r7, #20]
 8005ae8:	6812      	ldr	r2, [r2, #0]
 8005aea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005aec:	430b      	orrs	r3, r1
 8005aee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af6:	f023 010f 	bic.w	r1, r3, #15
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	430a      	orrs	r2, r1
 8005b04:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4aa6      	ldr	r2, [pc, #664]	; (8005da4 <UART_SetConfig+0x334>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d177      	bne.n	8005c00 <UART_SetConfig+0x190>
 8005b10:	4ba5      	ldr	r3, [pc, #660]	; (8005da8 <UART_SetConfig+0x338>)
 8005b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b18:	2b28      	cmp	r3, #40	; 0x28
 8005b1a:	d86d      	bhi.n	8005bf8 <UART_SetConfig+0x188>
 8005b1c:	a201      	add	r2, pc, #4	; (adr r2, 8005b24 <UART_SetConfig+0xb4>)
 8005b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b22:	bf00      	nop
 8005b24:	08005bc9 	.word	0x08005bc9
 8005b28:	08005bf9 	.word	0x08005bf9
 8005b2c:	08005bf9 	.word	0x08005bf9
 8005b30:	08005bf9 	.word	0x08005bf9
 8005b34:	08005bf9 	.word	0x08005bf9
 8005b38:	08005bf9 	.word	0x08005bf9
 8005b3c:	08005bf9 	.word	0x08005bf9
 8005b40:	08005bf9 	.word	0x08005bf9
 8005b44:	08005bd1 	.word	0x08005bd1
 8005b48:	08005bf9 	.word	0x08005bf9
 8005b4c:	08005bf9 	.word	0x08005bf9
 8005b50:	08005bf9 	.word	0x08005bf9
 8005b54:	08005bf9 	.word	0x08005bf9
 8005b58:	08005bf9 	.word	0x08005bf9
 8005b5c:	08005bf9 	.word	0x08005bf9
 8005b60:	08005bf9 	.word	0x08005bf9
 8005b64:	08005bd9 	.word	0x08005bd9
 8005b68:	08005bf9 	.word	0x08005bf9
 8005b6c:	08005bf9 	.word	0x08005bf9
 8005b70:	08005bf9 	.word	0x08005bf9
 8005b74:	08005bf9 	.word	0x08005bf9
 8005b78:	08005bf9 	.word	0x08005bf9
 8005b7c:	08005bf9 	.word	0x08005bf9
 8005b80:	08005bf9 	.word	0x08005bf9
 8005b84:	08005be1 	.word	0x08005be1
 8005b88:	08005bf9 	.word	0x08005bf9
 8005b8c:	08005bf9 	.word	0x08005bf9
 8005b90:	08005bf9 	.word	0x08005bf9
 8005b94:	08005bf9 	.word	0x08005bf9
 8005b98:	08005bf9 	.word	0x08005bf9
 8005b9c:	08005bf9 	.word	0x08005bf9
 8005ba0:	08005bf9 	.word	0x08005bf9
 8005ba4:	08005be9 	.word	0x08005be9
 8005ba8:	08005bf9 	.word	0x08005bf9
 8005bac:	08005bf9 	.word	0x08005bf9
 8005bb0:	08005bf9 	.word	0x08005bf9
 8005bb4:	08005bf9 	.word	0x08005bf9
 8005bb8:	08005bf9 	.word	0x08005bf9
 8005bbc:	08005bf9 	.word	0x08005bf9
 8005bc0:	08005bf9 	.word	0x08005bf9
 8005bc4:	08005bf1 	.word	0x08005bf1
 8005bc8:	2301      	movs	r3, #1
 8005bca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bce:	e326      	b.n	800621e <UART_SetConfig+0x7ae>
 8005bd0:	2304      	movs	r3, #4
 8005bd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bd6:	e322      	b.n	800621e <UART_SetConfig+0x7ae>
 8005bd8:	2308      	movs	r3, #8
 8005bda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bde:	e31e      	b.n	800621e <UART_SetConfig+0x7ae>
 8005be0:	2310      	movs	r3, #16
 8005be2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005be6:	e31a      	b.n	800621e <UART_SetConfig+0x7ae>
 8005be8:	2320      	movs	r3, #32
 8005bea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bee:	e316      	b.n	800621e <UART_SetConfig+0x7ae>
 8005bf0:	2340      	movs	r3, #64	; 0x40
 8005bf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bf6:	e312      	b.n	800621e <UART_SetConfig+0x7ae>
 8005bf8:	2380      	movs	r3, #128	; 0x80
 8005bfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bfe:	e30e      	b.n	800621e <UART_SetConfig+0x7ae>
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a69      	ldr	r2, [pc, #420]	; (8005dac <UART_SetConfig+0x33c>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d130      	bne.n	8005c6c <UART_SetConfig+0x1fc>
 8005c0a:	4b67      	ldr	r3, [pc, #412]	; (8005da8 <UART_SetConfig+0x338>)
 8005c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c0e:	f003 0307 	and.w	r3, r3, #7
 8005c12:	2b05      	cmp	r3, #5
 8005c14:	d826      	bhi.n	8005c64 <UART_SetConfig+0x1f4>
 8005c16:	a201      	add	r2, pc, #4	; (adr r2, 8005c1c <UART_SetConfig+0x1ac>)
 8005c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c1c:	08005c35 	.word	0x08005c35
 8005c20:	08005c3d 	.word	0x08005c3d
 8005c24:	08005c45 	.word	0x08005c45
 8005c28:	08005c4d 	.word	0x08005c4d
 8005c2c:	08005c55 	.word	0x08005c55
 8005c30:	08005c5d 	.word	0x08005c5d
 8005c34:	2300      	movs	r3, #0
 8005c36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c3a:	e2f0      	b.n	800621e <UART_SetConfig+0x7ae>
 8005c3c:	2304      	movs	r3, #4
 8005c3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c42:	e2ec      	b.n	800621e <UART_SetConfig+0x7ae>
 8005c44:	2308      	movs	r3, #8
 8005c46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c4a:	e2e8      	b.n	800621e <UART_SetConfig+0x7ae>
 8005c4c:	2310      	movs	r3, #16
 8005c4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c52:	e2e4      	b.n	800621e <UART_SetConfig+0x7ae>
 8005c54:	2320      	movs	r3, #32
 8005c56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c5a:	e2e0      	b.n	800621e <UART_SetConfig+0x7ae>
 8005c5c:	2340      	movs	r3, #64	; 0x40
 8005c5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c62:	e2dc      	b.n	800621e <UART_SetConfig+0x7ae>
 8005c64:	2380      	movs	r3, #128	; 0x80
 8005c66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c6a:	e2d8      	b.n	800621e <UART_SetConfig+0x7ae>
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a4f      	ldr	r2, [pc, #316]	; (8005db0 <UART_SetConfig+0x340>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d130      	bne.n	8005cd8 <UART_SetConfig+0x268>
 8005c76:	4b4c      	ldr	r3, [pc, #304]	; (8005da8 <UART_SetConfig+0x338>)
 8005c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c7a:	f003 0307 	and.w	r3, r3, #7
 8005c7e:	2b05      	cmp	r3, #5
 8005c80:	d826      	bhi.n	8005cd0 <UART_SetConfig+0x260>
 8005c82:	a201      	add	r2, pc, #4	; (adr r2, 8005c88 <UART_SetConfig+0x218>)
 8005c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c88:	08005ca1 	.word	0x08005ca1
 8005c8c:	08005ca9 	.word	0x08005ca9
 8005c90:	08005cb1 	.word	0x08005cb1
 8005c94:	08005cb9 	.word	0x08005cb9
 8005c98:	08005cc1 	.word	0x08005cc1
 8005c9c:	08005cc9 	.word	0x08005cc9
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ca6:	e2ba      	b.n	800621e <UART_SetConfig+0x7ae>
 8005ca8:	2304      	movs	r3, #4
 8005caa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cae:	e2b6      	b.n	800621e <UART_SetConfig+0x7ae>
 8005cb0:	2308      	movs	r3, #8
 8005cb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cb6:	e2b2      	b.n	800621e <UART_SetConfig+0x7ae>
 8005cb8:	2310      	movs	r3, #16
 8005cba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cbe:	e2ae      	b.n	800621e <UART_SetConfig+0x7ae>
 8005cc0:	2320      	movs	r3, #32
 8005cc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cc6:	e2aa      	b.n	800621e <UART_SetConfig+0x7ae>
 8005cc8:	2340      	movs	r3, #64	; 0x40
 8005cca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cce:	e2a6      	b.n	800621e <UART_SetConfig+0x7ae>
 8005cd0:	2380      	movs	r3, #128	; 0x80
 8005cd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cd6:	e2a2      	b.n	800621e <UART_SetConfig+0x7ae>
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a35      	ldr	r2, [pc, #212]	; (8005db4 <UART_SetConfig+0x344>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d130      	bne.n	8005d44 <UART_SetConfig+0x2d4>
 8005ce2:	4b31      	ldr	r3, [pc, #196]	; (8005da8 <UART_SetConfig+0x338>)
 8005ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ce6:	f003 0307 	and.w	r3, r3, #7
 8005cea:	2b05      	cmp	r3, #5
 8005cec:	d826      	bhi.n	8005d3c <UART_SetConfig+0x2cc>
 8005cee:	a201      	add	r2, pc, #4	; (adr r2, 8005cf4 <UART_SetConfig+0x284>)
 8005cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cf4:	08005d0d 	.word	0x08005d0d
 8005cf8:	08005d15 	.word	0x08005d15
 8005cfc:	08005d1d 	.word	0x08005d1d
 8005d00:	08005d25 	.word	0x08005d25
 8005d04:	08005d2d 	.word	0x08005d2d
 8005d08:	08005d35 	.word	0x08005d35
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d12:	e284      	b.n	800621e <UART_SetConfig+0x7ae>
 8005d14:	2304      	movs	r3, #4
 8005d16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d1a:	e280      	b.n	800621e <UART_SetConfig+0x7ae>
 8005d1c:	2308      	movs	r3, #8
 8005d1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d22:	e27c      	b.n	800621e <UART_SetConfig+0x7ae>
 8005d24:	2310      	movs	r3, #16
 8005d26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d2a:	e278      	b.n	800621e <UART_SetConfig+0x7ae>
 8005d2c:	2320      	movs	r3, #32
 8005d2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d32:	e274      	b.n	800621e <UART_SetConfig+0x7ae>
 8005d34:	2340      	movs	r3, #64	; 0x40
 8005d36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d3a:	e270      	b.n	800621e <UART_SetConfig+0x7ae>
 8005d3c:	2380      	movs	r3, #128	; 0x80
 8005d3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d42:	e26c      	b.n	800621e <UART_SetConfig+0x7ae>
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a1b      	ldr	r2, [pc, #108]	; (8005db8 <UART_SetConfig+0x348>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d142      	bne.n	8005dd4 <UART_SetConfig+0x364>
 8005d4e:	4b16      	ldr	r3, [pc, #88]	; (8005da8 <UART_SetConfig+0x338>)
 8005d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d52:	f003 0307 	and.w	r3, r3, #7
 8005d56:	2b05      	cmp	r3, #5
 8005d58:	d838      	bhi.n	8005dcc <UART_SetConfig+0x35c>
 8005d5a:	a201      	add	r2, pc, #4	; (adr r2, 8005d60 <UART_SetConfig+0x2f0>)
 8005d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d60:	08005d79 	.word	0x08005d79
 8005d64:	08005d81 	.word	0x08005d81
 8005d68:	08005d89 	.word	0x08005d89
 8005d6c:	08005d91 	.word	0x08005d91
 8005d70:	08005dbd 	.word	0x08005dbd
 8005d74:	08005dc5 	.word	0x08005dc5
 8005d78:	2300      	movs	r3, #0
 8005d7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d7e:	e24e      	b.n	800621e <UART_SetConfig+0x7ae>
 8005d80:	2304      	movs	r3, #4
 8005d82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d86:	e24a      	b.n	800621e <UART_SetConfig+0x7ae>
 8005d88:	2308      	movs	r3, #8
 8005d8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d8e:	e246      	b.n	800621e <UART_SetConfig+0x7ae>
 8005d90:	2310      	movs	r3, #16
 8005d92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d96:	e242      	b.n	800621e <UART_SetConfig+0x7ae>
 8005d98:	cfff69f3 	.word	0xcfff69f3
 8005d9c:	58000c00 	.word	0x58000c00
 8005da0:	11fff4ff 	.word	0x11fff4ff
 8005da4:	40011000 	.word	0x40011000
 8005da8:	58024400 	.word	0x58024400
 8005dac:	40004400 	.word	0x40004400
 8005db0:	40004800 	.word	0x40004800
 8005db4:	40004c00 	.word	0x40004c00
 8005db8:	40005000 	.word	0x40005000
 8005dbc:	2320      	movs	r3, #32
 8005dbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dc2:	e22c      	b.n	800621e <UART_SetConfig+0x7ae>
 8005dc4:	2340      	movs	r3, #64	; 0x40
 8005dc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dca:	e228      	b.n	800621e <UART_SetConfig+0x7ae>
 8005dcc:	2380      	movs	r3, #128	; 0x80
 8005dce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dd2:	e224      	b.n	800621e <UART_SetConfig+0x7ae>
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4ab1      	ldr	r2, [pc, #708]	; (80060a0 <UART_SetConfig+0x630>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d176      	bne.n	8005ecc <UART_SetConfig+0x45c>
 8005dde:	4bb1      	ldr	r3, [pc, #708]	; (80060a4 <UART_SetConfig+0x634>)
 8005de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005de2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005de6:	2b28      	cmp	r3, #40	; 0x28
 8005de8:	d86c      	bhi.n	8005ec4 <UART_SetConfig+0x454>
 8005dea:	a201      	add	r2, pc, #4	; (adr r2, 8005df0 <UART_SetConfig+0x380>)
 8005dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005df0:	08005e95 	.word	0x08005e95
 8005df4:	08005ec5 	.word	0x08005ec5
 8005df8:	08005ec5 	.word	0x08005ec5
 8005dfc:	08005ec5 	.word	0x08005ec5
 8005e00:	08005ec5 	.word	0x08005ec5
 8005e04:	08005ec5 	.word	0x08005ec5
 8005e08:	08005ec5 	.word	0x08005ec5
 8005e0c:	08005ec5 	.word	0x08005ec5
 8005e10:	08005e9d 	.word	0x08005e9d
 8005e14:	08005ec5 	.word	0x08005ec5
 8005e18:	08005ec5 	.word	0x08005ec5
 8005e1c:	08005ec5 	.word	0x08005ec5
 8005e20:	08005ec5 	.word	0x08005ec5
 8005e24:	08005ec5 	.word	0x08005ec5
 8005e28:	08005ec5 	.word	0x08005ec5
 8005e2c:	08005ec5 	.word	0x08005ec5
 8005e30:	08005ea5 	.word	0x08005ea5
 8005e34:	08005ec5 	.word	0x08005ec5
 8005e38:	08005ec5 	.word	0x08005ec5
 8005e3c:	08005ec5 	.word	0x08005ec5
 8005e40:	08005ec5 	.word	0x08005ec5
 8005e44:	08005ec5 	.word	0x08005ec5
 8005e48:	08005ec5 	.word	0x08005ec5
 8005e4c:	08005ec5 	.word	0x08005ec5
 8005e50:	08005ead 	.word	0x08005ead
 8005e54:	08005ec5 	.word	0x08005ec5
 8005e58:	08005ec5 	.word	0x08005ec5
 8005e5c:	08005ec5 	.word	0x08005ec5
 8005e60:	08005ec5 	.word	0x08005ec5
 8005e64:	08005ec5 	.word	0x08005ec5
 8005e68:	08005ec5 	.word	0x08005ec5
 8005e6c:	08005ec5 	.word	0x08005ec5
 8005e70:	08005eb5 	.word	0x08005eb5
 8005e74:	08005ec5 	.word	0x08005ec5
 8005e78:	08005ec5 	.word	0x08005ec5
 8005e7c:	08005ec5 	.word	0x08005ec5
 8005e80:	08005ec5 	.word	0x08005ec5
 8005e84:	08005ec5 	.word	0x08005ec5
 8005e88:	08005ec5 	.word	0x08005ec5
 8005e8c:	08005ec5 	.word	0x08005ec5
 8005e90:	08005ebd 	.word	0x08005ebd
 8005e94:	2301      	movs	r3, #1
 8005e96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e9a:	e1c0      	b.n	800621e <UART_SetConfig+0x7ae>
 8005e9c:	2304      	movs	r3, #4
 8005e9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ea2:	e1bc      	b.n	800621e <UART_SetConfig+0x7ae>
 8005ea4:	2308      	movs	r3, #8
 8005ea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005eaa:	e1b8      	b.n	800621e <UART_SetConfig+0x7ae>
 8005eac:	2310      	movs	r3, #16
 8005eae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005eb2:	e1b4      	b.n	800621e <UART_SetConfig+0x7ae>
 8005eb4:	2320      	movs	r3, #32
 8005eb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005eba:	e1b0      	b.n	800621e <UART_SetConfig+0x7ae>
 8005ebc:	2340      	movs	r3, #64	; 0x40
 8005ebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ec2:	e1ac      	b.n	800621e <UART_SetConfig+0x7ae>
 8005ec4:	2380      	movs	r3, #128	; 0x80
 8005ec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005eca:	e1a8      	b.n	800621e <UART_SetConfig+0x7ae>
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a75      	ldr	r2, [pc, #468]	; (80060a8 <UART_SetConfig+0x638>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d130      	bne.n	8005f38 <UART_SetConfig+0x4c8>
 8005ed6:	4b73      	ldr	r3, [pc, #460]	; (80060a4 <UART_SetConfig+0x634>)
 8005ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eda:	f003 0307 	and.w	r3, r3, #7
 8005ede:	2b05      	cmp	r3, #5
 8005ee0:	d826      	bhi.n	8005f30 <UART_SetConfig+0x4c0>
 8005ee2:	a201      	add	r2, pc, #4	; (adr r2, 8005ee8 <UART_SetConfig+0x478>)
 8005ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ee8:	08005f01 	.word	0x08005f01
 8005eec:	08005f09 	.word	0x08005f09
 8005ef0:	08005f11 	.word	0x08005f11
 8005ef4:	08005f19 	.word	0x08005f19
 8005ef8:	08005f21 	.word	0x08005f21
 8005efc:	08005f29 	.word	0x08005f29
 8005f00:	2300      	movs	r3, #0
 8005f02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f06:	e18a      	b.n	800621e <UART_SetConfig+0x7ae>
 8005f08:	2304      	movs	r3, #4
 8005f0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f0e:	e186      	b.n	800621e <UART_SetConfig+0x7ae>
 8005f10:	2308      	movs	r3, #8
 8005f12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f16:	e182      	b.n	800621e <UART_SetConfig+0x7ae>
 8005f18:	2310      	movs	r3, #16
 8005f1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f1e:	e17e      	b.n	800621e <UART_SetConfig+0x7ae>
 8005f20:	2320      	movs	r3, #32
 8005f22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f26:	e17a      	b.n	800621e <UART_SetConfig+0x7ae>
 8005f28:	2340      	movs	r3, #64	; 0x40
 8005f2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f2e:	e176      	b.n	800621e <UART_SetConfig+0x7ae>
 8005f30:	2380      	movs	r3, #128	; 0x80
 8005f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f36:	e172      	b.n	800621e <UART_SetConfig+0x7ae>
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a5b      	ldr	r2, [pc, #364]	; (80060ac <UART_SetConfig+0x63c>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d130      	bne.n	8005fa4 <UART_SetConfig+0x534>
 8005f42:	4b58      	ldr	r3, [pc, #352]	; (80060a4 <UART_SetConfig+0x634>)
 8005f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f46:	f003 0307 	and.w	r3, r3, #7
 8005f4a:	2b05      	cmp	r3, #5
 8005f4c:	d826      	bhi.n	8005f9c <UART_SetConfig+0x52c>
 8005f4e:	a201      	add	r2, pc, #4	; (adr r2, 8005f54 <UART_SetConfig+0x4e4>)
 8005f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f54:	08005f6d 	.word	0x08005f6d
 8005f58:	08005f75 	.word	0x08005f75
 8005f5c:	08005f7d 	.word	0x08005f7d
 8005f60:	08005f85 	.word	0x08005f85
 8005f64:	08005f8d 	.word	0x08005f8d
 8005f68:	08005f95 	.word	0x08005f95
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f72:	e154      	b.n	800621e <UART_SetConfig+0x7ae>
 8005f74:	2304      	movs	r3, #4
 8005f76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f7a:	e150      	b.n	800621e <UART_SetConfig+0x7ae>
 8005f7c:	2308      	movs	r3, #8
 8005f7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f82:	e14c      	b.n	800621e <UART_SetConfig+0x7ae>
 8005f84:	2310      	movs	r3, #16
 8005f86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f8a:	e148      	b.n	800621e <UART_SetConfig+0x7ae>
 8005f8c:	2320      	movs	r3, #32
 8005f8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f92:	e144      	b.n	800621e <UART_SetConfig+0x7ae>
 8005f94:	2340      	movs	r3, #64	; 0x40
 8005f96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f9a:	e140      	b.n	800621e <UART_SetConfig+0x7ae>
 8005f9c:	2380      	movs	r3, #128	; 0x80
 8005f9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fa2:	e13c      	b.n	800621e <UART_SetConfig+0x7ae>
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a41      	ldr	r2, [pc, #260]	; (80060b0 <UART_SetConfig+0x640>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	f040 8082 	bne.w	80060b4 <UART_SetConfig+0x644>
 8005fb0:	4b3c      	ldr	r3, [pc, #240]	; (80060a4 <UART_SetConfig+0x634>)
 8005fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fb4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005fb8:	2b28      	cmp	r3, #40	; 0x28
 8005fba:	d86d      	bhi.n	8006098 <UART_SetConfig+0x628>
 8005fbc:	a201      	add	r2, pc, #4	; (adr r2, 8005fc4 <UART_SetConfig+0x554>)
 8005fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fc2:	bf00      	nop
 8005fc4:	08006069 	.word	0x08006069
 8005fc8:	08006099 	.word	0x08006099
 8005fcc:	08006099 	.word	0x08006099
 8005fd0:	08006099 	.word	0x08006099
 8005fd4:	08006099 	.word	0x08006099
 8005fd8:	08006099 	.word	0x08006099
 8005fdc:	08006099 	.word	0x08006099
 8005fe0:	08006099 	.word	0x08006099
 8005fe4:	08006071 	.word	0x08006071
 8005fe8:	08006099 	.word	0x08006099
 8005fec:	08006099 	.word	0x08006099
 8005ff0:	08006099 	.word	0x08006099
 8005ff4:	08006099 	.word	0x08006099
 8005ff8:	08006099 	.word	0x08006099
 8005ffc:	08006099 	.word	0x08006099
 8006000:	08006099 	.word	0x08006099
 8006004:	08006079 	.word	0x08006079
 8006008:	08006099 	.word	0x08006099
 800600c:	08006099 	.word	0x08006099
 8006010:	08006099 	.word	0x08006099
 8006014:	08006099 	.word	0x08006099
 8006018:	08006099 	.word	0x08006099
 800601c:	08006099 	.word	0x08006099
 8006020:	08006099 	.word	0x08006099
 8006024:	08006081 	.word	0x08006081
 8006028:	08006099 	.word	0x08006099
 800602c:	08006099 	.word	0x08006099
 8006030:	08006099 	.word	0x08006099
 8006034:	08006099 	.word	0x08006099
 8006038:	08006099 	.word	0x08006099
 800603c:	08006099 	.word	0x08006099
 8006040:	08006099 	.word	0x08006099
 8006044:	08006089 	.word	0x08006089
 8006048:	08006099 	.word	0x08006099
 800604c:	08006099 	.word	0x08006099
 8006050:	08006099 	.word	0x08006099
 8006054:	08006099 	.word	0x08006099
 8006058:	08006099 	.word	0x08006099
 800605c:	08006099 	.word	0x08006099
 8006060:	08006099 	.word	0x08006099
 8006064:	08006091 	.word	0x08006091
 8006068:	2301      	movs	r3, #1
 800606a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800606e:	e0d6      	b.n	800621e <UART_SetConfig+0x7ae>
 8006070:	2304      	movs	r3, #4
 8006072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006076:	e0d2      	b.n	800621e <UART_SetConfig+0x7ae>
 8006078:	2308      	movs	r3, #8
 800607a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800607e:	e0ce      	b.n	800621e <UART_SetConfig+0x7ae>
 8006080:	2310      	movs	r3, #16
 8006082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006086:	e0ca      	b.n	800621e <UART_SetConfig+0x7ae>
 8006088:	2320      	movs	r3, #32
 800608a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800608e:	e0c6      	b.n	800621e <UART_SetConfig+0x7ae>
 8006090:	2340      	movs	r3, #64	; 0x40
 8006092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006096:	e0c2      	b.n	800621e <UART_SetConfig+0x7ae>
 8006098:	2380      	movs	r3, #128	; 0x80
 800609a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800609e:	e0be      	b.n	800621e <UART_SetConfig+0x7ae>
 80060a0:	40011400 	.word	0x40011400
 80060a4:	58024400 	.word	0x58024400
 80060a8:	40007800 	.word	0x40007800
 80060ac:	40007c00 	.word	0x40007c00
 80060b0:	40011800 	.word	0x40011800
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4aad      	ldr	r2, [pc, #692]	; (8006370 <UART_SetConfig+0x900>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d176      	bne.n	80061ac <UART_SetConfig+0x73c>
 80060be:	4bad      	ldr	r3, [pc, #692]	; (8006374 <UART_SetConfig+0x904>)
 80060c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80060c6:	2b28      	cmp	r3, #40	; 0x28
 80060c8:	d86c      	bhi.n	80061a4 <UART_SetConfig+0x734>
 80060ca:	a201      	add	r2, pc, #4	; (adr r2, 80060d0 <UART_SetConfig+0x660>)
 80060cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060d0:	08006175 	.word	0x08006175
 80060d4:	080061a5 	.word	0x080061a5
 80060d8:	080061a5 	.word	0x080061a5
 80060dc:	080061a5 	.word	0x080061a5
 80060e0:	080061a5 	.word	0x080061a5
 80060e4:	080061a5 	.word	0x080061a5
 80060e8:	080061a5 	.word	0x080061a5
 80060ec:	080061a5 	.word	0x080061a5
 80060f0:	0800617d 	.word	0x0800617d
 80060f4:	080061a5 	.word	0x080061a5
 80060f8:	080061a5 	.word	0x080061a5
 80060fc:	080061a5 	.word	0x080061a5
 8006100:	080061a5 	.word	0x080061a5
 8006104:	080061a5 	.word	0x080061a5
 8006108:	080061a5 	.word	0x080061a5
 800610c:	080061a5 	.word	0x080061a5
 8006110:	08006185 	.word	0x08006185
 8006114:	080061a5 	.word	0x080061a5
 8006118:	080061a5 	.word	0x080061a5
 800611c:	080061a5 	.word	0x080061a5
 8006120:	080061a5 	.word	0x080061a5
 8006124:	080061a5 	.word	0x080061a5
 8006128:	080061a5 	.word	0x080061a5
 800612c:	080061a5 	.word	0x080061a5
 8006130:	0800618d 	.word	0x0800618d
 8006134:	080061a5 	.word	0x080061a5
 8006138:	080061a5 	.word	0x080061a5
 800613c:	080061a5 	.word	0x080061a5
 8006140:	080061a5 	.word	0x080061a5
 8006144:	080061a5 	.word	0x080061a5
 8006148:	080061a5 	.word	0x080061a5
 800614c:	080061a5 	.word	0x080061a5
 8006150:	08006195 	.word	0x08006195
 8006154:	080061a5 	.word	0x080061a5
 8006158:	080061a5 	.word	0x080061a5
 800615c:	080061a5 	.word	0x080061a5
 8006160:	080061a5 	.word	0x080061a5
 8006164:	080061a5 	.word	0x080061a5
 8006168:	080061a5 	.word	0x080061a5
 800616c:	080061a5 	.word	0x080061a5
 8006170:	0800619d 	.word	0x0800619d
 8006174:	2301      	movs	r3, #1
 8006176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800617a:	e050      	b.n	800621e <UART_SetConfig+0x7ae>
 800617c:	2304      	movs	r3, #4
 800617e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006182:	e04c      	b.n	800621e <UART_SetConfig+0x7ae>
 8006184:	2308      	movs	r3, #8
 8006186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800618a:	e048      	b.n	800621e <UART_SetConfig+0x7ae>
 800618c:	2310      	movs	r3, #16
 800618e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006192:	e044      	b.n	800621e <UART_SetConfig+0x7ae>
 8006194:	2320      	movs	r3, #32
 8006196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800619a:	e040      	b.n	800621e <UART_SetConfig+0x7ae>
 800619c:	2340      	movs	r3, #64	; 0x40
 800619e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061a2:	e03c      	b.n	800621e <UART_SetConfig+0x7ae>
 80061a4:	2380      	movs	r3, #128	; 0x80
 80061a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061aa:	e038      	b.n	800621e <UART_SetConfig+0x7ae>
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a71      	ldr	r2, [pc, #452]	; (8006378 <UART_SetConfig+0x908>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d130      	bne.n	8006218 <UART_SetConfig+0x7a8>
 80061b6:	4b6f      	ldr	r3, [pc, #444]	; (8006374 <UART_SetConfig+0x904>)
 80061b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061ba:	f003 0307 	and.w	r3, r3, #7
 80061be:	2b05      	cmp	r3, #5
 80061c0:	d826      	bhi.n	8006210 <UART_SetConfig+0x7a0>
 80061c2:	a201      	add	r2, pc, #4	; (adr r2, 80061c8 <UART_SetConfig+0x758>)
 80061c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c8:	080061e1 	.word	0x080061e1
 80061cc:	080061e9 	.word	0x080061e9
 80061d0:	080061f1 	.word	0x080061f1
 80061d4:	080061f9 	.word	0x080061f9
 80061d8:	08006201 	.word	0x08006201
 80061dc:	08006209 	.word	0x08006209
 80061e0:	2302      	movs	r3, #2
 80061e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061e6:	e01a      	b.n	800621e <UART_SetConfig+0x7ae>
 80061e8:	2304      	movs	r3, #4
 80061ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061ee:	e016      	b.n	800621e <UART_SetConfig+0x7ae>
 80061f0:	2308      	movs	r3, #8
 80061f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061f6:	e012      	b.n	800621e <UART_SetConfig+0x7ae>
 80061f8:	2310      	movs	r3, #16
 80061fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061fe:	e00e      	b.n	800621e <UART_SetConfig+0x7ae>
 8006200:	2320      	movs	r3, #32
 8006202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006206:	e00a      	b.n	800621e <UART_SetConfig+0x7ae>
 8006208:	2340      	movs	r3, #64	; 0x40
 800620a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800620e:	e006      	b.n	800621e <UART_SetConfig+0x7ae>
 8006210:	2380      	movs	r3, #128	; 0x80
 8006212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006216:	e002      	b.n	800621e <UART_SetConfig+0x7ae>
 8006218:	2380      	movs	r3, #128	; 0x80
 800621a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a55      	ldr	r2, [pc, #340]	; (8006378 <UART_SetConfig+0x908>)
 8006224:	4293      	cmp	r3, r2
 8006226:	f040 80f8 	bne.w	800641a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800622a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800622e:	2b20      	cmp	r3, #32
 8006230:	dc46      	bgt.n	80062c0 <UART_SetConfig+0x850>
 8006232:	2b02      	cmp	r3, #2
 8006234:	db75      	blt.n	8006322 <UART_SetConfig+0x8b2>
 8006236:	3b02      	subs	r3, #2
 8006238:	2b1e      	cmp	r3, #30
 800623a:	d872      	bhi.n	8006322 <UART_SetConfig+0x8b2>
 800623c:	a201      	add	r2, pc, #4	; (adr r2, 8006244 <UART_SetConfig+0x7d4>)
 800623e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006242:	bf00      	nop
 8006244:	080062c7 	.word	0x080062c7
 8006248:	08006323 	.word	0x08006323
 800624c:	080062cf 	.word	0x080062cf
 8006250:	08006323 	.word	0x08006323
 8006254:	08006323 	.word	0x08006323
 8006258:	08006323 	.word	0x08006323
 800625c:	080062df 	.word	0x080062df
 8006260:	08006323 	.word	0x08006323
 8006264:	08006323 	.word	0x08006323
 8006268:	08006323 	.word	0x08006323
 800626c:	08006323 	.word	0x08006323
 8006270:	08006323 	.word	0x08006323
 8006274:	08006323 	.word	0x08006323
 8006278:	08006323 	.word	0x08006323
 800627c:	080062ef 	.word	0x080062ef
 8006280:	08006323 	.word	0x08006323
 8006284:	08006323 	.word	0x08006323
 8006288:	08006323 	.word	0x08006323
 800628c:	08006323 	.word	0x08006323
 8006290:	08006323 	.word	0x08006323
 8006294:	08006323 	.word	0x08006323
 8006298:	08006323 	.word	0x08006323
 800629c:	08006323 	.word	0x08006323
 80062a0:	08006323 	.word	0x08006323
 80062a4:	08006323 	.word	0x08006323
 80062a8:	08006323 	.word	0x08006323
 80062ac:	08006323 	.word	0x08006323
 80062b0:	08006323 	.word	0x08006323
 80062b4:	08006323 	.word	0x08006323
 80062b8:	08006323 	.word	0x08006323
 80062bc:	08006315 	.word	0x08006315
 80062c0:	2b40      	cmp	r3, #64	; 0x40
 80062c2:	d02a      	beq.n	800631a <UART_SetConfig+0x8aa>
 80062c4:	e02d      	b.n	8006322 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80062c6:	f7fe f86d 	bl	80043a4 <HAL_RCCEx_GetD3PCLK1Freq>
 80062ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80062cc:	e02f      	b.n	800632e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80062d2:	4618      	mov	r0, r3
 80062d4:	f7fe f87c 	bl	80043d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80062d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80062dc:	e027      	b.n	800632e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80062de:	f107 0318 	add.w	r3, r7, #24
 80062e2:	4618      	mov	r0, r3
 80062e4:	f7fe f9c8 	bl	8004678 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80062e8:	69fb      	ldr	r3, [r7, #28]
 80062ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80062ec:	e01f      	b.n	800632e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062ee:	4b21      	ldr	r3, [pc, #132]	; (8006374 <UART_SetConfig+0x904>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f003 0320 	and.w	r3, r3, #32
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d009      	beq.n	800630e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80062fa:	4b1e      	ldr	r3, [pc, #120]	; (8006374 <UART_SetConfig+0x904>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	08db      	lsrs	r3, r3, #3
 8006300:	f003 0303 	and.w	r3, r3, #3
 8006304:	4a1d      	ldr	r2, [pc, #116]	; (800637c <UART_SetConfig+0x90c>)
 8006306:	fa22 f303 	lsr.w	r3, r2, r3
 800630a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800630c:	e00f      	b.n	800632e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800630e:	4b1b      	ldr	r3, [pc, #108]	; (800637c <UART_SetConfig+0x90c>)
 8006310:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006312:	e00c      	b.n	800632e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006314:	4b1a      	ldr	r3, [pc, #104]	; (8006380 <UART_SetConfig+0x910>)
 8006316:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006318:	e009      	b.n	800632e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800631a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800631e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006320:	e005      	b.n	800632e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006322:	2300      	movs	r3, #0
 8006324:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800632c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800632e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006330:	2b00      	cmp	r3, #0
 8006332:	f000 81ee 	beq.w	8006712 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633a:	4a12      	ldr	r2, [pc, #72]	; (8006384 <UART_SetConfig+0x914>)
 800633c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006340:	461a      	mov	r2, r3
 8006342:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006344:	fbb3 f3f2 	udiv	r3, r3, r2
 8006348:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	685a      	ldr	r2, [r3, #4]
 800634e:	4613      	mov	r3, r2
 8006350:	005b      	lsls	r3, r3, #1
 8006352:	4413      	add	r3, r2
 8006354:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006356:	429a      	cmp	r2, r3
 8006358:	d305      	bcc.n	8006366 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006360:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006362:	429a      	cmp	r2, r3
 8006364:	d910      	bls.n	8006388 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800636c:	e1d1      	b.n	8006712 <UART_SetConfig+0xca2>
 800636e:	bf00      	nop
 8006370:	40011c00 	.word	0x40011c00
 8006374:	58024400 	.word	0x58024400
 8006378:	58000c00 	.word	0x58000c00
 800637c:	03d09000 	.word	0x03d09000
 8006380:	003d0900 	.word	0x003d0900
 8006384:	08007758 	.word	0x08007758
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006388:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800638a:	2200      	movs	r2, #0
 800638c:	60bb      	str	r3, [r7, #8]
 800638e:	60fa      	str	r2, [r7, #12]
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006394:	4ac0      	ldr	r2, [pc, #768]	; (8006698 <UART_SetConfig+0xc28>)
 8006396:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800639a:	b29b      	uxth	r3, r3
 800639c:	2200      	movs	r2, #0
 800639e:	603b      	str	r3, [r7, #0]
 80063a0:	607a      	str	r2, [r7, #4]
 80063a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80063aa:	f7fa f801 	bl	80003b0 <__aeabi_uldivmod>
 80063ae:	4602      	mov	r2, r0
 80063b0:	460b      	mov	r3, r1
 80063b2:	4610      	mov	r0, r2
 80063b4:	4619      	mov	r1, r3
 80063b6:	f04f 0200 	mov.w	r2, #0
 80063ba:	f04f 0300 	mov.w	r3, #0
 80063be:	020b      	lsls	r3, r1, #8
 80063c0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80063c4:	0202      	lsls	r2, r0, #8
 80063c6:	6979      	ldr	r1, [r7, #20]
 80063c8:	6849      	ldr	r1, [r1, #4]
 80063ca:	0849      	lsrs	r1, r1, #1
 80063cc:	2000      	movs	r0, #0
 80063ce:	460c      	mov	r4, r1
 80063d0:	4605      	mov	r5, r0
 80063d2:	eb12 0804 	adds.w	r8, r2, r4
 80063d6:	eb43 0905 	adc.w	r9, r3, r5
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	469a      	mov	sl, r3
 80063e2:	4693      	mov	fp, r2
 80063e4:	4652      	mov	r2, sl
 80063e6:	465b      	mov	r3, fp
 80063e8:	4640      	mov	r0, r8
 80063ea:	4649      	mov	r1, r9
 80063ec:	f7f9 ffe0 	bl	80003b0 <__aeabi_uldivmod>
 80063f0:	4602      	mov	r2, r0
 80063f2:	460b      	mov	r3, r1
 80063f4:	4613      	mov	r3, r2
 80063f6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80063f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063fe:	d308      	bcc.n	8006412 <UART_SetConfig+0x9a2>
 8006400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006402:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006406:	d204      	bcs.n	8006412 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800640e:	60da      	str	r2, [r3, #12]
 8006410:	e17f      	b.n	8006712 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006418:	e17b      	b.n	8006712 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	69db      	ldr	r3, [r3, #28]
 800641e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006422:	f040 80bd 	bne.w	80065a0 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8006426:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800642a:	2b20      	cmp	r3, #32
 800642c:	dc48      	bgt.n	80064c0 <UART_SetConfig+0xa50>
 800642e:	2b00      	cmp	r3, #0
 8006430:	db7b      	blt.n	800652a <UART_SetConfig+0xaba>
 8006432:	2b20      	cmp	r3, #32
 8006434:	d879      	bhi.n	800652a <UART_SetConfig+0xaba>
 8006436:	a201      	add	r2, pc, #4	; (adr r2, 800643c <UART_SetConfig+0x9cc>)
 8006438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800643c:	080064c7 	.word	0x080064c7
 8006440:	080064cf 	.word	0x080064cf
 8006444:	0800652b 	.word	0x0800652b
 8006448:	0800652b 	.word	0x0800652b
 800644c:	080064d7 	.word	0x080064d7
 8006450:	0800652b 	.word	0x0800652b
 8006454:	0800652b 	.word	0x0800652b
 8006458:	0800652b 	.word	0x0800652b
 800645c:	080064e7 	.word	0x080064e7
 8006460:	0800652b 	.word	0x0800652b
 8006464:	0800652b 	.word	0x0800652b
 8006468:	0800652b 	.word	0x0800652b
 800646c:	0800652b 	.word	0x0800652b
 8006470:	0800652b 	.word	0x0800652b
 8006474:	0800652b 	.word	0x0800652b
 8006478:	0800652b 	.word	0x0800652b
 800647c:	080064f7 	.word	0x080064f7
 8006480:	0800652b 	.word	0x0800652b
 8006484:	0800652b 	.word	0x0800652b
 8006488:	0800652b 	.word	0x0800652b
 800648c:	0800652b 	.word	0x0800652b
 8006490:	0800652b 	.word	0x0800652b
 8006494:	0800652b 	.word	0x0800652b
 8006498:	0800652b 	.word	0x0800652b
 800649c:	0800652b 	.word	0x0800652b
 80064a0:	0800652b 	.word	0x0800652b
 80064a4:	0800652b 	.word	0x0800652b
 80064a8:	0800652b 	.word	0x0800652b
 80064ac:	0800652b 	.word	0x0800652b
 80064b0:	0800652b 	.word	0x0800652b
 80064b4:	0800652b 	.word	0x0800652b
 80064b8:	0800652b 	.word	0x0800652b
 80064bc:	0800651d 	.word	0x0800651d
 80064c0:	2b40      	cmp	r3, #64	; 0x40
 80064c2:	d02e      	beq.n	8006522 <UART_SetConfig+0xab2>
 80064c4:	e031      	b.n	800652a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064c6:	f7fc fd5f 	bl	8002f88 <HAL_RCC_GetPCLK1Freq>
 80064ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80064cc:	e033      	b.n	8006536 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064ce:	f7fc fd71 	bl	8002fb4 <HAL_RCC_GetPCLK2Freq>
 80064d2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80064d4:	e02f      	b.n	8006536 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064da:	4618      	mov	r0, r3
 80064dc:	f7fd ff78 	bl	80043d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80064e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80064e4:	e027      	b.n	8006536 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80064e6:	f107 0318 	add.w	r3, r7, #24
 80064ea:	4618      	mov	r0, r3
 80064ec:	f7fe f8c4 	bl	8004678 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80064f4:	e01f      	b.n	8006536 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80064f6:	4b69      	ldr	r3, [pc, #420]	; (800669c <UART_SetConfig+0xc2c>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f003 0320 	and.w	r3, r3, #32
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d009      	beq.n	8006516 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006502:	4b66      	ldr	r3, [pc, #408]	; (800669c <UART_SetConfig+0xc2c>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	08db      	lsrs	r3, r3, #3
 8006508:	f003 0303 	and.w	r3, r3, #3
 800650c:	4a64      	ldr	r2, [pc, #400]	; (80066a0 <UART_SetConfig+0xc30>)
 800650e:	fa22 f303 	lsr.w	r3, r2, r3
 8006512:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006514:	e00f      	b.n	8006536 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8006516:	4b62      	ldr	r3, [pc, #392]	; (80066a0 <UART_SetConfig+0xc30>)
 8006518:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800651a:	e00c      	b.n	8006536 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800651c:	4b61      	ldr	r3, [pc, #388]	; (80066a4 <UART_SetConfig+0xc34>)
 800651e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006520:	e009      	b.n	8006536 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006522:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006526:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006528:	e005      	b.n	8006536 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800652a:	2300      	movs	r3, #0
 800652c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006534:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006536:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006538:	2b00      	cmp	r3, #0
 800653a:	f000 80ea 	beq.w	8006712 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006542:	4a55      	ldr	r2, [pc, #340]	; (8006698 <UART_SetConfig+0xc28>)
 8006544:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006548:	461a      	mov	r2, r3
 800654a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800654c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006550:	005a      	lsls	r2, r3, #1
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	085b      	lsrs	r3, r3, #1
 8006558:	441a      	add	r2, r3
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006562:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006566:	2b0f      	cmp	r3, #15
 8006568:	d916      	bls.n	8006598 <UART_SetConfig+0xb28>
 800656a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800656c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006570:	d212      	bcs.n	8006598 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006574:	b29b      	uxth	r3, r3
 8006576:	f023 030f 	bic.w	r3, r3, #15
 800657a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800657c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800657e:	085b      	lsrs	r3, r3, #1
 8006580:	b29b      	uxth	r3, r3
 8006582:	f003 0307 	and.w	r3, r3, #7
 8006586:	b29a      	uxth	r2, r3
 8006588:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800658a:	4313      	orrs	r3, r2
 800658c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006594:	60da      	str	r2, [r3, #12]
 8006596:	e0bc      	b.n	8006712 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800659e:	e0b8      	b.n	8006712 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80065a0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80065a4:	2b20      	cmp	r3, #32
 80065a6:	dc4b      	bgt.n	8006640 <UART_SetConfig+0xbd0>
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	f2c0 8087 	blt.w	80066bc <UART_SetConfig+0xc4c>
 80065ae:	2b20      	cmp	r3, #32
 80065b0:	f200 8084 	bhi.w	80066bc <UART_SetConfig+0xc4c>
 80065b4:	a201      	add	r2, pc, #4	; (adr r2, 80065bc <UART_SetConfig+0xb4c>)
 80065b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ba:	bf00      	nop
 80065bc:	08006647 	.word	0x08006647
 80065c0:	0800664f 	.word	0x0800664f
 80065c4:	080066bd 	.word	0x080066bd
 80065c8:	080066bd 	.word	0x080066bd
 80065cc:	08006657 	.word	0x08006657
 80065d0:	080066bd 	.word	0x080066bd
 80065d4:	080066bd 	.word	0x080066bd
 80065d8:	080066bd 	.word	0x080066bd
 80065dc:	08006667 	.word	0x08006667
 80065e0:	080066bd 	.word	0x080066bd
 80065e4:	080066bd 	.word	0x080066bd
 80065e8:	080066bd 	.word	0x080066bd
 80065ec:	080066bd 	.word	0x080066bd
 80065f0:	080066bd 	.word	0x080066bd
 80065f4:	080066bd 	.word	0x080066bd
 80065f8:	080066bd 	.word	0x080066bd
 80065fc:	08006677 	.word	0x08006677
 8006600:	080066bd 	.word	0x080066bd
 8006604:	080066bd 	.word	0x080066bd
 8006608:	080066bd 	.word	0x080066bd
 800660c:	080066bd 	.word	0x080066bd
 8006610:	080066bd 	.word	0x080066bd
 8006614:	080066bd 	.word	0x080066bd
 8006618:	080066bd 	.word	0x080066bd
 800661c:	080066bd 	.word	0x080066bd
 8006620:	080066bd 	.word	0x080066bd
 8006624:	080066bd 	.word	0x080066bd
 8006628:	080066bd 	.word	0x080066bd
 800662c:	080066bd 	.word	0x080066bd
 8006630:	080066bd 	.word	0x080066bd
 8006634:	080066bd 	.word	0x080066bd
 8006638:	080066bd 	.word	0x080066bd
 800663c:	080066af 	.word	0x080066af
 8006640:	2b40      	cmp	r3, #64	; 0x40
 8006642:	d037      	beq.n	80066b4 <UART_SetConfig+0xc44>
 8006644:	e03a      	b.n	80066bc <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006646:	f7fc fc9f 	bl	8002f88 <HAL_RCC_GetPCLK1Freq>
 800664a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800664c:	e03c      	b.n	80066c8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800664e:	f7fc fcb1 	bl	8002fb4 <HAL_RCC_GetPCLK2Freq>
 8006652:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006654:	e038      	b.n	80066c8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006656:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800665a:	4618      	mov	r0, r3
 800665c:	f7fd feb8 	bl	80043d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006662:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006664:	e030      	b.n	80066c8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006666:	f107 0318 	add.w	r3, r7, #24
 800666a:	4618      	mov	r0, r3
 800666c:	f7fe f804 	bl	8004678 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006670:	69fb      	ldr	r3, [r7, #28]
 8006672:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006674:	e028      	b.n	80066c8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006676:	4b09      	ldr	r3, [pc, #36]	; (800669c <UART_SetConfig+0xc2c>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f003 0320 	and.w	r3, r3, #32
 800667e:	2b00      	cmp	r3, #0
 8006680:	d012      	beq.n	80066a8 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006682:	4b06      	ldr	r3, [pc, #24]	; (800669c <UART_SetConfig+0xc2c>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	08db      	lsrs	r3, r3, #3
 8006688:	f003 0303 	and.w	r3, r3, #3
 800668c:	4a04      	ldr	r2, [pc, #16]	; (80066a0 <UART_SetConfig+0xc30>)
 800668e:	fa22 f303 	lsr.w	r3, r2, r3
 8006692:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006694:	e018      	b.n	80066c8 <UART_SetConfig+0xc58>
 8006696:	bf00      	nop
 8006698:	08007758 	.word	0x08007758
 800669c:	58024400 	.word	0x58024400
 80066a0:	03d09000 	.word	0x03d09000
 80066a4:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80066a8:	4b24      	ldr	r3, [pc, #144]	; (800673c <UART_SetConfig+0xccc>)
 80066aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80066ac:	e00c      	b.n	80066c8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80066ae:	4b24      	ldr	r3, [pc, #144]	; (8006740 <UART_SetConfig+0xcd0>)
 80066b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80066b2:	e009      	b.n	80066c8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80066ba:	e005      	b.n	80066c8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80066bc:	2300      	movs	r3, #0
 80066be:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80066c6:	bf00      	nop
    }

    if (pclk != 0U)
 80066c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d021      	beq.n	8006712 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d2:	4a1c      	ldr	r2, [pc, #112]	; (8006744 <UART_SetConfig+0xcd4>)
 80066d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066d8:	461a      	mov	r2, r3
 80066da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066dc:	fbb3 f2f2 	udiv	r2, r3, r2
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	085b      	lsrs	r3, r3, #1
 80066e6:	441a      	add	r2, r3
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80066f0:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f4:	2b0f      	cmp	r3, #15
 80066f6:	d909      	bls.n	800670c <UART_SetConfig+0xc9c>
 80066f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066fe:	d205      	bcs.n	800670c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006702:	b29a      	uxth	r2, r3
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	60da      	str	r2, [r3, #12]
 800670a:	e002      	b.n	8006712 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	2201      	movs	r2, #1
 8006716:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	2201      	movs	r2, #1
 800671e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	2200      	movs	r2, #0
 8006726:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	2200      	movs	r2, #0
 800672c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800672e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8006732:	4618      	mov	r0, r3
 8006734:	3748      	adds	r7, #72	; 0x48
 8006736:	46bd      	mov	sp, r7
 8006738:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800673c:	03d09000 	.word	0x03d09000
 8006740:	003d0900 	.word	0x003d0900
 8006744:	08007758 	.word	0x08007758

08006748 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006748:	b480      	push	{r7}
 800674a:	b083      	sub	sp, #12
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006754:	f003 0301 	and.w	r3, r3, #1
 8006758:	2b00      	cmp	r3, #0
 800675a:	d00a      	beq.n	8006772 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	430a      	orrs	r2, r1
 8006770:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006776:	f003 0302 	and.w	r3, r3, #2
 800677a:	2b00      	cmp	r3, #0
 800677c:	d00a      	beq.n	8006794 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	430a      	orrs	r2, r1
 8006792:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006798:	f003 0304 	and.w	r3, r3, #4
 800679c:	2b00      	cmp	r3, #0
 800679e:	d00a      	beq.n	80067b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	430a      	orrs	r2, r1
 80067b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ba:	f003 0308 	and.w	r3, r3, #8
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d00a      	beq.n	80067d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	430a      	orrs	r2, r1
 80067d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067dc:	f003 0310 	and.w	r3, r3, #16
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d00a      	beq.n	80067fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	430a      	orrs	r2, r1
 80067f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067fe:	f003 0320 	and.w	r3, r3, #32
 8006802:	2b00      	cmp	r3, #0
 8006804:	d00a      	beq.n	800681c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	430a      	orrs	r2, r1
 800681a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006824:	2b00      	cmp	r3, #0
 8006826:	d01a      	beq.n	800685e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	430a      	orrs	r2, r1
 800683c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006842:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006846:	d10a      	bne.n	800685e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	430a      	orrs	r2, r1
 800685c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006866:	2b00      	cmp	r3, #0
 8006868:	d00a      	beq.n	8006880 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	430a      	orrs	r2, r1
 800687e:	605a      	str	r2, [r3, #4]
  }
}
 8006880:	bf00      	nop
 8006882:	370c      	adds	r7, #12
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr

0800688c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b098      	sub	sp, #96	; 0x60
 8006890:	af02      	add	r7, sp, #8
 8006892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800689c:	f7fa fc4c 	bl	8001138 <HAL_GetTick>
 80068a0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f003 0308 	and.w	r3, r3, #8
 80068ac:	2b08      	cmp	r3, #8
 80068ae:	d12f      	bne.n	8006910 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80068b4:	9300      	str	r3, [sp, #0]
 80068b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068b8:	2200      	movs	r2, #0
 80068ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 f88e 	bl	80069e0 <UART_WaitOnFlagUntilTimeout>
 80068c4:	4603      	mov	r3, r0
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d022      	beq.n	8006910 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d2:	e853 3f00 	ldrex	r3, [r3]
 80068d6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80068d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068de:	653b      	str	r3, [r7, #80]	; 0x50
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	461a      	mov	r2, r3
 80068e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068e8:	647b      	str	r3, [r7, #68]	; 0x44
 80068ea:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80068ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80068f0:	e841 2300 	strex	r3, r2, [r1]
 80068f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80068f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d1e6      	bne.n	80068ca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2220      	movs	r2, #32
 8006900:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800690c:	2303      	movs	r3, #3
 800690e:	e063      	b.n	80069d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f003 0304 	and.w	r3, r3, #4
 800691a:	2b04      	cmp	r3, #4
 800691c:	d149      	bne.n	80069b2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800691e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006922:	9300      	str	r3, [sp, #0]
 8006924:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006926:	2200      	movs	r2, #0
 8006928:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f000 f857 	bl	80069e0 <UART_WaitOnFlagUntilTimeout>
 8006932:	4603      	mov	r3, r0
 8006934:	2b00      	cmp	r3, #0
 8006936:	d03c      	beq.n	80069b2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800693e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006940:	e853 3f00 	ldrex	r3, [r3]
 8006944:	623b      	str	r3, [r7, #32]
   return(result);
 8006946:	6a3b      	ldr	r3, [r7, #32]
 8006948:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800694c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	461a      	mov	r2, r3
 8006954:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006956:	633b      	str	r3, [r7, #48]	; 0x30
 8006958:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800695a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800695c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800695e:	e841 2300 	strex	r3, r2, [r1]
 8006962:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006966:	2b00      	cmp	r3, #0
 8006968:	d1e6      	bne.n	8006938 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	3308      	adds	r3, #8
 8006970:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	e853 3f00 	ldrex	r3, [r3]
 8006978:	60fb      	str	r3, [r7, #12]
   return(result);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f023 0301 	bic.w	r3, r3, #1
 8006980:	64bb      	str	r3, [r7, #72]	; 0x48
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	3308      	adds	r3, #8
 8006988:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800698a:	61fa      	str	r2, [r7, #28]
 800698c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800698e:	69b9      	ldr	r1, [r7, #24]
 8006990:	69fa      	ldr	r2, [r7, #28]
 8006992:	e841 2300 	strex	r3, r2, [r1]
 8006996:	617b      	str	r3, [r7, #20]
   return(result);
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d1e5      	bne.n	800696a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2220      	movs	r2, #32
 80069a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069ae:	2303      	movs	r3, #3
 80069b0:	e012      	b.n	80069d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2220      	movs	r2, #32
 80069b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2220      	movs	r2, #32
 80069be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2200      	movs	r2, #0
 80069c6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2200      	movs	r2, #0
 80069d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80069d6:	2300      	movs	r3, #0
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3758      	adds	r7, #88	; 0x58
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}

080069e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b084      	sub	sp, #16
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	60f8      	str	r0, [r7, #12]
 80069e8:	60b9      	str	r1, [r7, #8]
 80069ea:	603b      	str	r3, [r7, #0]
 80069ec:	4613      	mov	r3, r2
 80069ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069f0:	e049      	b.n	8006a86 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069f2:	69bb      	ldr	r3, [r7, #24]
 80069f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069f8:	d045      	beq.n	8006a86 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069fa:	f7fa fb9d 	bl	8001138 <HAL_GetTick>
 80069fe:	4602      	mov	r2, r0
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	1ad3      	subs	r3, r2, r3
 8006a04:	69ba      	ldr	r2, [r7, #24]
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d302      	bcc.n	8006a10 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a0a:	69bb      	ldr	r3, [r7, #24]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d101      	bne.n	8006a14 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006a10:	2303      	movs	r3, #3
 8006a12:	e048      	b.n	8006aa6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f003 0304 	and.w	r3, r3, #4
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d031      	beq.n	8006a86 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	69db      	ldr	r3, [r3, #28]
 8006a28:	f003 0308 	and.w	r3, r3, #8
 8006a2c:	2b08      	cmp	r3, #8
 8006a2e:	d110      	bne.n	8006a52 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	2208      	movs	r2, #8
 8006a36:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006a38:	68f8      	ldr	r0, [r7, #12]
 8006a3a:	f000 f839 	bl	8006ab0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2208      	movs	r2, #8
 8006a42:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	e029      	b.n	8006aa6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	69db      	ldr	r3, [r3, #28]
 8006a58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a60:	d111      	bne.n	8006a86 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a6a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a6c:	68f8      	ldr	r0, [r7, #12]
 8006a6e:	f000 f81f 	bl	8006ab0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2220      	movs	r2, #32
 8006a76:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006a82:	2303      	movs	r3, #3
 8006a84:	e00f      	b.n	8006aa6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	69da      	ldr	r2, [r3, #28]
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	4013      	ands	r3, r2
 8006a90:	68ba      	ldr	r2, [r7, #8]
 8006a92:	429a      	cmp	r2, r3
 8006a94:	bf0c      	ite	eq
 8006a96:	2301      	moveq	r3, #1
 8006a98:	2300      	movne	r3, #0
 8006a9a:	b2db      	uxtb	r3, r3
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	79fb      	ldrb	r3, [r7, #7]
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d0a6      	beq.n	80069f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006aa4:	2300      	movs	r3, #0
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3710      	adds	r7, #16
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
	...

08006ab0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b095      	sub	sp, #84	; 0x54
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ac0:	e853 3f00 	ldrex	r3, [r3]
 8006ac4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006acc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ad6:	643b      	str	r3, [r7, #64]	; 0x40
 8006ad8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ada:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006adc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ade:	e841 2300 	strex	r3, r2, [r1]
 8006ae2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d1e6      	bne.n	8006ab8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	3308      	adds	r3, #8
 8006af0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af2:	6a3b      	ldr	r3, [r7, #32]
 8006af4:	e853 3f00 	ldrex	r3, [r3]
 8006af8:	61fb      	str	r3, [r7, #28]
   return(result);
 8006afa:	69fa      	ldr	r2, [r7, #28]
 8006afc:	4b1e      	ldr	r3, [pc, #120]	; (8006b78 <UART_EndRxTransfer+0xc8>)
 8006afe:	4013      	ands	r3, r2
 8006b00:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	3308      	adds	r3, #8
 8006b08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b0c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b12:	e841 2300 	strex	r3, r2, [r1]
 8006b16:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d1e5      	bne.n	8006aea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d118      	bne.n	8006b58 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	e853 3f00 	ldrex	r3, [r3]
 8006b32:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	f023 0310 	bic.w	r3, r3, #16
 8006b3a:	647b      	str	r3, [r7, #68]	; 0x44
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	461a      	mov	r2, r3
 8006b42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b44:	61bb      	str	r3, [r7, #24]
 8006b46:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b48:	6979      	ldr	r1, [r7, #20]
 8006b4a:	69ba      	ldr	r2, [r7, #24]
 8006b4c:	e841 2300 	strex	r3, r2, [r1]
 8006b50:	613b      	str	r3, [r7, #16]
   return(result);
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d1e6      	bne.n	8006b26 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2220      	movs	r2, #32
 8006b5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006b6c:	bf00      	nop
 8006b6e:	3754      	adds	r7, #84	; 0x54
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr
 8006b78:	effffffe 	.word	0xeffffffe

08006b7c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b085      	sub	sp, #20
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d101      	bne.n	8006b92 <HAL_UARTEx_DisableFifoMode+0x16>
 8006b8e:	2302      	movs	r3, #2
 8006b90:	e027      	b.n	8006be2 <HAL_UARTEx_DisableFifoMode+0x66>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2201      	movs	r2, #1
 8006b96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2224      	movs	r2, #36	; 0x24
 8006b9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f022 0201 	bic.w	r2, r2, #1
 8006bb8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006bc0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	68fa      	ldr	r2, [r7, #12]
 8006bce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2220      	movs	r2, #32
 8006bd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006be0:	2300      	movs	r3, #0
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3714      	adds	r7, #20
 8006be6:	46bd      	mov	sp, r7
 8006be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bec:	4770      	bx	lr

08006bee <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006bee:	b580      	push	{r7, lr}
 8006bf0:	b084      	sub	sp, #16
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	6078      	str	r0, [r7, #4]
 8006bf6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d101      	bne.n	8006c06 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006c02:	2302      	movs	r3, #2
 8006c04:	e02d      	b.n	8006c62 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2201      	movs	r2, #1
 8006c0a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2224      	movs	r2, #36	; 0x24
 8006c12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f022 0201 	bic.w	r2, r2, #1
 8006c2c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	683a      	ldr	r2, [r7, #0]
 8006c3e:	430a      	orrs	r2, r1
 8006c40:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 f850 	bl	8006ce8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	68fa      	ldr	r2, [r7, #12]
 8006c4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2220      	movs	r2, #32
 8006c54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006c60:	2300      	movs	r3, #0
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3710      	adds	r7, #16
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}

08006c6a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006c6a:	b580      	push	{r7, lr}
 8006c6c:	b084      	sub	sp, #16
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	6078      	str	r0, [r7, #4]
 8006c72:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d101      	bne.n	8006c82 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006c7e:	2302      	movs	r3, #2
 8006c80:	e02d      	b.n	8006cde <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2201      	movs	r2, #1
 8006c86:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2224      	movs	r2, #36	; 0x24
 8006c8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f022 0201 	bic.w	r2, r2, #1
 8006ca8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	683a      	ldr	r2, [r7, #0]
 8006cba:	430a      	orrs	r2, r1
 8006cbc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 f812 	bl	8006ce8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	68fa      	ldr	r2, [r7, #12]
 8006cca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2220      	movs	r2, #32
 8006cd0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006cdc:	2300      	movs	r3, #0
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3710      	adds	r7, #16
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}
	...

08006ce8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b085      	sub	sp, #20
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d108      	bne.n	8006d0a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2201      	movs	r2, #1
 8006d04:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006d08:	e031      	b.n	8006d6e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006d0a:	2310      	movs	r3, #16
 8006d0c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006d0e:	2310      	movs	r3, #16
 8006d10:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	0e5b      	lsrs	r3, r3, #25
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	f003 0307 	and.w	r3, r3, #7
 8006d20:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	0f5b      	lsrs	r3, r3, #29
 8006d2a:	b2db      	uxtb	r3, r3
 8006d2c:	f003 0307 	and.w	r3, r3, #7
 8006d30:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006d32:	7bbb      	ldrb	r3, [r7, #14]
 8006d34:	7b3a      	ldrb	r2, [r7, #12]
 8006d36:	4911      	ldr	r1, [pc, #68]	; (8006d7c <UARTEx_SetNbDataToProcess+0x94>)
 8006d38:	5c8a      	ldrb	r2, [r1, r2]
 8006d3a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006d3e:	7b3a      	ldrb	r2, [r7, #12]
 8006d40:	490f      	ldr	r1, [pc, #60]	; (8006d80 <UARTEx_SetNbDataToProcess+0x98>)
 8006d42:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006d44:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d48:	b29a      	uxth	r2, r3
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d50:	7bfb      	ldrb	r3, [r7, #15]
 8006d52:	7b7a      	ldrb	r2, [r7, #13]
 8006d54:	4909      	ldr	r1, [pc, #36]	; (8006d7c <UARTEx_SetNbDataToProcess+0x94>)
 8006d56:	5c8a      	ldrb	r2, [r1, r2]
 8006d58:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006d5c:	7b7a      	ldrb	r2, [r7, #13]
 8006d5e:	4908      	ldr	r1, [pc, #32]	; (8006d80 <UARTEx_SetNbDataToProcess+0x98>)
 8006d60:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d62:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d66:	b29a      	uxth	r2, r3
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006d6e:	bf00      	nop
 8006d70:	3714      	adds	r7, #20
 8006d72:	46bd      	mov	sp, r7
 8006d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d78:	4770      	bx	lr
 8006d7a:	bf00      	nop
 8006d7c:	08007770 	.word	0x08007770
 8006d80:	08007778 	.word	0x08007778

08006d84 <siprintf>:
 8006d84:	b40e      	push	{r1, r2, r3}
 8006d86:	b500      	push	{lr}
 8006d88:	b09c      	sub	sp, #112	; 0x70
 8006d8a:	ab1d      	add	r3, sp, #116	; 0x74
 8006d8c:	9002      	str	r0, [sp, #8]
 8006d8e:	9006      	str	r0, [sp, #24]
 8006d90:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006d94:	4809      	ldr	r0, [pc, #36]	; (8006dbc <siprintf+0x38>)
 8006d96:	9107      	str	r1, [sp, #28]
 8006d98:	9104      	str	r1, [sp, #16]
 8006d9a:	4909      	ldr	r1, [pc, #36]	; (8006dc0 <siprintf+0x3c>)
 8006d9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006da0:	9105      	str	r1, [sp, #20]
 8006da2:	6800      	ldr	r0, [r0, #0]
 8006da4:	9301      	str	r3, [sp, #4]
 8006da6:	a902      	add	r1, sp, #8
 8006da8:	f000 f9a0 	bl	80070ec <_svfiprintf_r>
 8006dac:	9b02      	ldr	r3, [sp, #8]
 8006dae:	2200      	movs	r2, #0
 8006db0:	701a      	strb	r2, [r3, #0]
 8006db2:	b01c      	add	sp, #112	; 0x70
 8006db4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006db8:	b003      	add	sp, #12
 8006dba:	4770      	bx	lr
 8006dbc:	2400005c 	.word	0x2400005c
 8006dc0:	ffff0208 	.word	0xffff0208

08006dc4 <memset>:
 8006dc4:	4402      	add	r2, r0
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d100      	bne.n	8006dce <memset+0xa>
 8006dcc:	4770      	bx	lr
 8006dce:	f803 1b01 	strb.w	r1, [r3], #1
 8006dd2:	e7f9      	b.n	8006dc8 <memset+0x4>

08006dd4 <__errno>:
 8006dd4:	4b01      	ldr	r3, [pc, #4]	; (8006ddc <__errno+0x8>)
 8006dd6:	6818      	ldr	r0, [r3, #0]
 8006dd8:	4770      	bx	lr
 8006dda:	bf00      	nop
 8006ddc:	2400005c 	.word	0x2400005c

08006de0 <__libc_init_array>:
 8006de0:	b570      	push	{r4, r5, r6, lr}
 8006de2:	4d0d      	ldr	r5, [pc, #52]	; (8006e18 <__libc_init_array+0x38>)
 8006de4:	4c0d      	ldr	r4, [pc, #52]	; (8006e1c <__libc_init_array+0x3c>)
 8006de6:	1b64      	subs	r4, r4, r5
 8006de8:	10a4      	asrs	r4, r4, #2
 8006dea:	2600      	movs	r6, #0
 8006dec:	42a6      	cmp	r6, r4
 8006dee:	d109      	bne.n	8006e04 <__libc_init_array+0x24>
 8006df0:	4d0b      	ldr	r5, [pc, #44]	; (8006e20 <__libc_init_array+0x40>)
 8006df2:	4c0c      	ldr	r4, [pc, #48]	; (8006e24 <__libc_init_array+0x44>)
 8006df4:	f000 fc6a 	bl	80076cc <_init>
 8006df8:	1b64      	subs	r4, r4, r5
 8006dfa:	10a4      	asrs	r4, r4, #2
 8006dfc:	2600      	movs	r6, #0
 8006dfe:	42a6      	cmp	r6, r4
 8006e00:	d105      	bne.n	8006e0e <__libc_init_array+0x2e>
 8006e02:	bd70      	pop	{r4, r5, r6, pc}
 8006e04:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e08:	4798      	blx	r3
 8006e0a:	3601      	adds	r6, #1
 8006e0c:	e7ee      	b.n	8006dec <__libc_init_array+0xc>
 8006e0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e12:	4798      	blx	r3
 8006e14:	3601      	adds	r6, #1
 8006e16:	e7f2      	b.n	8006dfe <__libc_init_array+0x1e>
 8006e18:	080077bc 	.word	0x080077bc
 8006e1c:	080077bc 	.word	0x080077bc
 8006e20:	080077bc 	.word	0x080077bc
 8006e24:	080077c0 	.word	0x080077c0

08006e28 <__retarget_lock_acquire_recursive>:
 8006e28:	4770      	bx	lr

08006e2a <__retarget_lock_release_recursive>:
 8006e2a:	4770      	bx	lr

08006e2c <memcpy>:
 8006e2c:	440a      	add	r2, r1
 8006e2e:	4291      	cmp	r1, r2
 8006e30:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e34:	d100      	bne.n	8006e38 <memcpy+0xc>
 8006e36:	4770      	bx	lr
 8006e38:	b510      	push	{r4, lr}
 8006e3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e42:	4291      	cmp	r1, r2
 8006e44:	d1f9      	bne.n	8006e3a <memcpy+0xe>
 8006e46:	bd10      	pop	{r4, pc}

08006e48 <_free_r>:
 8006e48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e4a:	2900      	cmp	r1, #0
 8006e4c:	d044      	beq.n	8006ed8 <_free_r+0x90>
 8006e4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e52:	9001      	str	r0, [sp, #4]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	f1a1 0404 	sub.w	r4, r1, #4
 8006e5a:	bfb8      	it	lt
 8006e5c:	18e4      	addlt	r4, r4, r3
 8006e5e:	f000 f8df 	bl	8007020 <__malloc_lock>
 8006e62:	4a1e      	ldr	r2, [pc, #120]	; (8006edc <_free_r+0x94>)
 8006e64:	9801      	ldr	r0, [sp, #4]
 8006e66:	6813      	ldr	r3, [r2, #0]
 8006e68:	b933      	cbnz	r3, 8006e78 <_free_r+0x30>
 8006e6a:	6063      	str	r3, [r4, #4]
 8006e6c:	6014      	str	r4, [r2, #0]
 8006e6e:	b003      	add	sp, #12
 8006e70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e74:	f000 b8da 	b.w	800702c <__malloc_unlock>
 8006e78:	42a3      	cmp	r3, r4
 8006e7a:	d908      	bls.n	8006e8e <_free_r+0x46>
 8006e7c:	6825      	ldr	r5, [r4, #0]
 8006e7e:	1961      	adds	r1, r4, r5
 8006e80:	428b      	cmp	r3, r1
 8006e82:	bf01      	itttt	eq
 8006e84:	6819      	ldreq	r1, [r3, #0]
 8006e86:	685b      	ldreq	r3, [r3, #4]
 8006e88:	1949      	addeq	r1, r1, r5
 8006e8a:	6021      	streq	r1, [r4, #0]
 8006e8c:	e7ed      	b.n	8006e6a <_free_r+0x22>
 8006e8e:	461a      	mov	r2, r3
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	b10b      	cbz	r3, 8006e98 <_free_r+0x50>
 8006e94:	42a3      	cmp	r3, r4
 8006e96:	d9fa      	bls.n	8006e8e <_free_r+0x46>
 8006e98:	6811      	ldr	r1, [r2, #0]
 8006e9a:	1855      	adds	r5, r2, r1
 8006e9c:	42a5      	cmp	r5, r4
 8006e9e:	d10b      	bne.n	8006eb8 <_free_r+0x70>
 8006ea0:	6824      	ldr	r4, [r4, #0]
 8006ea2:	4421      	add	r1, r4
 8006ea4:	1854      	adds	r4, r2, r1
 8006ea6:	42a3      	cmp	r3, r4
 8006ea8:	6011      	str	r1, [r2, #0]
 8006eaa:	d1e0      	bne.n	8006e6e <_free_r+0x26>
 8006eac:	681c      	ldr	r4, [r3, #0]
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	6053      	str	r3, [r2, #4]
 8006eb2:	440c      	add	r4, r1
 8006eb4:	6014      	str	r4, [r2, #0]
 8006eb6:	e7da      	b.n	8006e6e <_free_r+0x26>
 8006eb8:	d902      	bls.n	8006ec0 <_free_r+0x78>
 8006eba:	230c      	movs	r3, #12
 8006ebc:	6003      	str	r3, [r0, #0]
 8006ebe:	e7d6      	b.n	8006e6e <_free_r+0x26>
 8006ec0:	6825      	ldr	r5, [r4, #0]
 8006ec2:	1961      	adds	r1, r4, r5
 8006ec4:	428b      	cmp	r3, r1
 8006ec6:	bf04      	itt	eq
 8006ec8:	6819      	ldreq	r1, [r3, #0]
 8006eca:	685b      	ldreq	r3, [r3, #4]
 8006ecc:	6063      	str	r3, [r4, #4]
 8006ece:	bf04      	itt	eq
 8006ed0:	1949      	addeq	r1, r1, r5
 8006ed2:	6021      	streq	r1, [r4, #0]
 8006ed4:	6054      	str	r4, [r2, #4]
 8006ed6:	e7ca      	b.n	8006e6e <_free_r+0x26>
 8006ed8:	b003      	add	sp, #12
 8006eda:	bd30      	pop	{r4, r5, pc}
 8006edc:	24000398 	.word	0x24000398

08006ee0 <sbrk_aligned>:
 8006ee0:	b570      	push	{r4, r5, r6, lr}
 8006ee2:	4e0e      	ldr	r6, [pc, #56]	; (8006f1c <sbrk_aligned+0x3c>)
 8006ee4:	460c      	mov	r4, r1
 8006ee6:	6831      	ldr	r1, [r6, #0]
 8006ee8:	4605      	mov	r5, r0
 8006eea:	b911      	cbnz	r1, 8006ef2 <sbrk_aligned+0x12>
 8006eec:	f000 fba6 	bl	800763c <_sbrk_r>
 8006ef0:	6030      	str	r0, [r6, #0]
 8006ef2:	4621      	mov	r1, r4
 8006ef4:	4628      	mov	r0, r5
 8006ef6:	f000 fba1 	bl	800763c <_sbrk_r>
 8006efa:	1c43      	adds	r3, r0, #1
 8006efc:	d00a      	beq.n	8006f14 <sbrk_aligned+0x34>
 8006efe:	1cc4      	adds	r4, r0, #3
 8006f00:	f024 0403 	bic.w	r4, r4, #3
 8006f04:	42a0      	cmp	r0, r4
 8006f06:	d007      	beq.n	8006f18 <sbrk_aligned+0x38>
 8006f08:	1a21      	subs	r1, r4, r0
 8006f0a:	4628      	mov	r0, r5
 8006f0c:	f000 fb96 	bl	800763c <_sbrk_r>
 8006f10:	3001      	adds	r0, #1
 8006f12:	d101      	bne.n	8006f18 <sbrk_aligned+0x38>
 8006f14:	f04f 34ff 	mov.w	r4, #4294967295
 8006f18:	4620      	mov	r0, r4
 8006f1a:	bd70      	pop	{r4, r5, r6, pc}
 8006f1c:	2400039c 	.word	0x2400039c

08006f20 <_malloc_r>:
 8006f20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f24:	1ccd      	adds	r5, r1, #3
 8006f26:	f025 0503 	bic.w	r5, r5, #3
 8006f2a:	3508      	adds	r5, #8
 8006f2c:	2d0c      	cmp	r5, #12
 8006f2e:	bf38      	it	cc
 8006f30:	250c      	movcc	r5, #12
 8006f32:	2d00      	cmp	r5, #0
 8006f34:	4607      	mov	r7, r0
 8006f36:	db01      	blt.n	8006f3c <_malloc_r+0x1c>
 8006f38:	42a9      	cmp	r1, r5
 8006f3a:	d905      	bls.n	8006f48 <_malloc_r+0x28>
 8006f3c:	230c      	movs	r3, #12
 8006f3e:	603b      	str	r3, [r7, #0]
 8006f40:	2600      	movs	r6, #0
 8006f42:	4630      	mov	r0, r6
 8006f44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f48:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800701c <_malloc_r+0xfc>
 8006f4c:	f000 f868 	bl	8007020 <__malloc_lock>
 8006f50:	f8d8 3000 	ldr.w	r3, [r8]
 8006f54:	461c      	mov	r4, r3
 8006f56:	bb5c      	cbnz	r4, 8006fb0 <_malloc_r+0x90>
 8006f58:	4629      	mov	r1, r5
 8006f5a:	4638      	mov	r0, r7
 8006f5c:	f7ff ffc0 	bl	8006ee0 <sbrk_aligned>
 8006f60:	1c43      	adds	r3, r0, #1
 8006f62:	4604      	mov	r4, r0
 8006f64:	d155      	bne.n	8007012 <_malloc_r+0xf2>
 8006f66:	f8d8 4000 	ldr.w	r4, [r8]
 8006f6a:	4626      	mov	r6, r4
 8006f6c:	2e00      	cmp	r6, #0
 8006f6e:	d145      	bne.n	8006ffc <_malloc_r+0xdc>
 8006f70:	2c00      	cmp	r4, #0
 8006f72:	d048      	beq.n	8007006 <_malloc_r+0xe6>
 8006f74:	6823      	ldr	r3, [r4, #0]
 8006f76:	4631      	mov	r1, r6
 8006f78:	4638      	mov	r0, r7
 8006f7a:	eb04 0903 	add.w	r9, r4, r3
 8006f7e:	f000 fb5d 	bl	800763c <_sbrk_r>
 8006f82:	4581      	cmp	r9, r0
 8006f84:	d13f      	bne.n	8007006 <_malloc_r+0xe6>
 8006f86:	6821      	ldr	r1, [r4, #0]
 8006f88:	1a6d      	subs	r5, r5, r1
 8006f8a:	4629      	mov	r1, r5
 8006f8c:	4638      	mov	r0, r7
 8006f8e:	f7ff ffa7 	bl	8006ee0 <sbrk_aligned>
 8006f92:	3001      	adds	r0, #1
 8006f94:	d037      	beq.n	8007006 <_malloc_r+0xe6>
 8006f96:	6823      	ldr	r3, [r4, #0]
 8006f98:	442b      	add	r3, r5
 8006f9a:	6023      	str	r3, [r4, #0]
 8006f9c:	f8d8 3000 	ldr.w	r3, [r8]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d038      	beq.n	8007016 <_malloc_r+0xf6>
 8006fa4:	685a      	ldr	r2, [r3, #4]
 8006fa6:	42a2      	cmp	r2, r4
 8006fa8:	d12b      	bne.n	8007002 <_malloc_r+0xe2>
 8006faa:	2200      	movs	r2, #0
 8006fac:	605a      	str	r2, [r3, #4]
 8006fae:	e00f      	b.n	8006fd0 <_malloc_r+0xb0>
 8006fb0:	6822      	ldr	r2, [r4, #0]
 8006fb2:	1b52      	subs	r2, r2, r5
 8006fb4:	d41f      	bmi.n	8006ff6 <_malloc_r+0xd6>
 8006fb6:	2a0b      	cmp	r2, #11
 8006fb8:	d917      	bls.n	8006fea <_malloc_r+0xca>
 8006fba:	1961      	adds	r1, r4, r5
 8006fbc:	42a3      	cmp	r3, r4
 8006fbe:	6025      	str	r5, [r4, #0]
 8006fc0:	bf18      	it	ne
 8006fc2:	6059      	strne	r1, [r3, #4]
 8006fc4:	6863      	ldr	r3, [r4, #4]
 8006fc6:	bf08      	it	eq
 8006fc8:	f8c8 1000 	streq.w	r1, [r8]
 8006fcc:	5162      	str	r2, [r4, r5]
 8006fce:	604b      	str	r3, [r1, #4]
 8006fd0:	4638      	mov	r0, r7
 8006fd2:	f104 060b 	add.w	r6, r4, #11
 8006fd6:	f000 f829 	bl	800702c <__malloc_unlock>
 8006fda:	f026 0607 	bic.w	r6, r6, #7
 8006fde:	1d23      	adds	r3, r4, #4
 8006fe0:	1af2      	subs	r2, r6, r3
 8006fe2:	d0ae      	beq.n	8006f42 <_malloc_r+0x22>
 8006fe4:	1b9b      	subs	r3, r3, r6
 8006fe6:	50a3      	str	r3, [r4, r2]
 8006fe8:	e7ab      	b.n	8006f42 <_malloc_r+0x22>
 8006fea:	42a3      	cmp	r3, r4
 8006fec:	6862      	ldr	r2, [r4, #4]
 8006fee:	d1dd      	bne.n	8006fac <_malloc_r+0x8c>
 8006ff0:	f8c8 2000 	str.w	r2, [r8]
 8006ff4:	e7ec      	b.n	8006fd0 <_malloc_r+0xb0>
 8006ff6:	4623      	mov	r3, r4
 8006ff8:	6864      	ldr	r4, [r4, #4]
 8006ffa:	e7ac      	b.n	8006f56 <_malloc_r+0x36>
 8006ffc:	4634      	mov	r4, r6
 8006ffe:	6876      	ldr	r6, [r6, #4]
 8007000:	e7b4      	b.n	8006f6c <_malloc_r+0x4c>
 8007002:	4613      	mov	r3, r2
 8007004:	e7cc      	b.n	8006fa0 <_malloc_r+0x80>
 8007006:	230c      	movs	r3, #12
 8007008:	603b      	str	r3, [r7, #0]
 800700a:	4638      	mov	r0, r7
 800700c:	f000 f80e 	bl	800702c <__malloc_unlock>
 8007010:	e797      	b.n	8006f42 <_malloc_r+0x22>
 8007012:	6025      	str	r5, [r4, #0]
 8007014:	e7dc      	b.n	8006fd0 <_malloc_r+0xb0>
 8007016:	605b      	str	r3, [r3, #4]
 8007018:	deff      	udf	#255	; 0xff
 800701a:	bf00      	nop
 800701c:	24000398 	.word	0x24000398

08007020 <__malloc_lock>:
 8007020:	4801      	ldr	r0, [pc, #4]	; (8007028 <__malloc_lock+0x8>)
 8007022:	f7ff bf01 	b.w	8006e28 <__retarget_lock_acquire_recursive>
 8007026:	bf00      	nop
 8007028:	24000394 	.word	0x24000394

0800702c <__malloc_unlock>:
 800702c:	4801      	ldr	r0, [pc, #4]	; (8007034 <__malloc_unlock+0x8>)
 800702e:	f7ff befc 	b.w	8006e2a <__retarget_lock_release_recursive>
 8007032:	bf00      	nop
 8007034:	24000394 	.word	0x24000394

08007038 <__ssputs_r>:
 8007038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800703c:	688e      	ldr	r6, [r1, #8]
 800703e:	461f      	mov	r7, r3
 8007040:	42be      	cmp	r6, r7
 8007042:	680b      	ldr	r3, [r1, #0]
 8007044:	4682      	mov	sl, r0
 8007046:	460c      	mov	r4, r1
 8007048:	4690      	mov	r8, r2
 800704a:	d82c      	bhi.n	80070a6 <__ssputs_r+0x6e>
 800704c:	898a      	ldrh	r2, [r1, #12]
 800704e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007052:	d026      	beq.n	80070a2 <__ssputs_r+0x6a>
 8007054:	6965      	ldr	r5, [r4, #20]
 8007056:	6909      	ldr	r1, [r1, #16]
 8007058:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800705c:	eba3 0901 	sub.w	r9, r3, r1
 8007060:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007064:	1c7b      	adds	r3, r7, #1
 8007066:	444b      	add	r3, r9
 8007068:	106d      	asrs	r5, r5, #1
 800706a:	429d      	cmp	r5, r3
 800706c:	bf38      	it	cc
 800706e:	461d      	movcc	r5, r3
 8007070:	0553      	lsls	r3, r2, #21
 8007072:	d527      	bpl.n	80070c4 <__ssputs_r+0x8c>
 8007074:	4629      	mov	r1, r5
 8007076:	f7ff ff53 	bl	8006f20 <_malloc_r>
 800707a:	4606      	mov	r6, r0
 800707c:	b360      	cbz	r0, 80070d8 <__ssputs_r+0xa0>
 800707e:	6921      	ldr	r1, [r4, #16]
 8007080:	464a      	mov	r2, r9
 8007082:	f7ff fed3 	bl	8006e2c <memcpy>
 8007086:	89a3      	ldrh	r3, [r4, #12]
 8007088:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800708c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007090:	81a3      	strh	r3, [r4, #12]
 8007092:	6126      	str	r6, [r4, #16]
 8007094:	6165      	str	r5, [r4, #20]
 8007096:	444e      	add	r6, r9
 8007098:	eba5 0509 	sub.w	r5, r5, r9
 800709c:	6026      	str	r6, [r4, #0]
 800709e:	60a5      	str	r5, [r4, #8]
 80070a0:	463e      	mov	r6, r7
 80070a2:	42be      	cmp	r6, r7
 80070a4:	d900      	bls.n	80070a8 <__ssputs_r+0x70>
 80070a6:	463e      	mov	r6, r7
 80070a8:	6820      	ldr	r0, [r4, #0]
 80070aa:	4632      	mov	r2, r6
 80070ac:	4641      	mov	r1, r8
 80070ae:	f000 faab 	bl	8007608 <memmove>
 80070b2:	68a3      	ldr	r3, [r4, #8]
 80070b4:	1b9b      	subs	r3, r3, r6
 80070b6:	60a3      	str	r3, [r4, #8]
 80070b8:	6823      	ldr	r3, [r4, #0]
 80070ba:	4433      	add	r3, r6
 80070bc:	6023      	str	r3, [r4, #0]
 80070be:	2000      	movs	r0, #0
 80070c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070c4:	462a      	mov	r2, r5
 80070c6:	f000 fac9 	bl	800765c <_realloc_r>
 80070ca:	4606      	mov	r6, r0
 80070cc:	2800      	cmp	r0, #0
 80070ce:	d1e0      	bne.n	8007092 <__ssputs_r+0x5a>
 80070d0:	6921      	ldr	r1, [r4, #16]
 80070d2:	4650      	mov	r0, sl
 80070d4:	f7ff feb8 	bl	8006e48 <_free_r>
 80070d8:	230c      	movs	r3, #12
 80070da:	f8ca 3000 	str.w	r3, [sl]
 80070de:	89a3      	ldrh	r3, [r4, #12]
 80070e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070e4:	81a3      	strh	r3, [r4, #12]
 80070e6:	f04f 30ff 	mov.w	r0, #4294967295
 80070ea:	e7e9      	b.n	80070c0 <__ssputs_r+0x88>

080070ec <_svfiprintf_r>:
 80070ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070f0:	4698      	mov	r8, r3
 80070f2:	898b      	ldrh	r3, [r1, #12]
 80070f4:	061b      	lsls	r3, r3, #24
 80070f6:	b09d      	sub	sp, #116	; 0x74
 80070f8:	4607      	mov	r7, r0
 80070fa:	460d      	mov	r5, r1
 80070fc:	4614      	mov	r4, r2
 80070fe:	d50e      	bpl.n	800711e <_svfiprintf_r+0x32>
 8007100:	690b      	ldr	r3, [r1, #16]
 8007102:	b963      	cbnz	r3, 800711e <_svfiprintf_r+0x32>
 8007104:	2140      	movs	r1, #64	; 0x40
 8007106:	f7ff ff0b 	bl	8006f20 <_malloc_r>
 800710a:	6028      	str	r0, [r5, #0]
 800710c:	6128      	str	r0, [r5, #16]
 800710e:	b920      	cbnz	r0, 800711a <_svfiprintf_r+0x2e>
 8007110:	230c      	movs	r3, #12
 8007112:	603b      	str	r3, [r7, #0]
 8007114:	f04f 30ff 	mov.w	r0, #4294967295
 8007118:	e0d0      	b.n	80072bc <_svfiprintf_r+0x1d0>
 800711a:	2340      	movs	r3, #64	; 0x40
 800711c:	616b      	str	r3, [r5, #20]
 800711e:	2300      	movs	r3, #0
 8007120:	9309      	str	r3, [sp, #36]	; 0x24
 8007122:	2320      	movs	r3, #32
 8007124:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007128:	f8cd 800c 	str.w	r8, [sp, #12]
 800712c:	2330      	movs	r3, #48	; 0x30
 800712e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80072d4 <_svfiprintf_r+0x1e8>
 8007132:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007136:	f04f 0901 	mov.w	r9, #1
 800713a:	4623      	mov	r3, r4
 800713c:	469a      	mov	sl, r3
 800713e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007142:	b10a      	cbz	r2, 8007148 <_svfiprintf_r+0x5c>
 8007144:	2a25      	cmp	r2, #37	; 0x25
 8007146:	d1f9      	bne.n	800713c <_svfiprintf_r+0x50>
 8007148:	ebba 0b04 	subs.w	fp, sl, r4
 800714c:	d00b      	beq.n	8007166 <_svfiprintf_r+0x7a>
 800714e:	465b      	mov	r3, fp
 8007150:	4622      	mov	r2, r4
 8007152:	4629      	mov	r1, r5
 8007154:	4638      	mov	r0, r7
 8007156:	f7ff ff6f 	bl	8007038 <__ssputs_r>
 800715a:	3001      	adds	r0, #1
 800715c:	f000 80a9 	beq.w	80072b2 <_svfiprintf_r+0x1c6>
 8007160:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007162:	445a      	add	r2, fp
 8007164:	9209      	str	r2, [sp, #36]	; 0x24
 8007166:	f89a 3000 	ldrb.w	r3, [sl]
 800716a:	2b00      	cmp	r3, #0
 800716c:	f000 80a1 	beq.w	80072b2 <_svfiprintf_r+0x1c6>
 8007170:	2300      	movs	r3, #0
 8007172:	f04f 32ff 	mov.w	r2, #4294967295
 8007176:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800717a:	f10a 0a01 	add.w	sl, sl, #1
 800717e:	9304      	str	r3, [sp, #16]
 8007180:	9307      	str	r3, [sp, #28]
 8007182:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007186:	931a      	str	r3, [sp, #104]	; 0x68
 8007188:	4654      	mov	r4, sl
 800718a:	2205      	movs	r2, #5
 800718c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007190:	4850      	ldr	r0, [pc, #320]	; (80072d4 <_svfiprintf_r+0x1e8>)
 8007192:	f7f9 f8bd 	bl	8000310 <memchr>
 8007196:	9a04      	ldr	r2, [sp, #16]
 8007198:	b9d8      	cbnz	r0, 80071d2 <_svfiprintf_r+0xe6>
 800719a:	06d0      	lsls	r0, r2, #27
 800719c:	bf44      	itt	mi
 800719e:	2320      	movmi	r3, #32
 80071a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071a4:	0711      	lsls	r1, r2, #28
 80071a6:	bf44      	itt	mi
 80071a8:	232b      	movmi	r3, #43	; 0x2b
 80071aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071ae:	f89a 3000 	ldrb.w	r3, [sl]
 80071b2:	2b2a      	cmp	r3, #42	; 0x2a
 80071b4:	d015      	beq.n	80071e2 <_svfiprintf_r+0xf6>
 80071b6:	9a07      	ldr	r2, [sp, #28]
 80071b8:	4654      	mov	r4, sl
 80071ba:	2000      	movs	r0, #0
 80071bc:	f04f 0c0a 	mov.w	ip, #10
 80071c0:	4621      	mov	r1, r4
 80071c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071c6:	3b30      	subs	r3, #48	; 0x30
 80071c8:	2b09      	cmp	r3, #9
 80071ca:	d94d      	bls.n	8007268 <_svfiprintf_r+0x17c>
 80071cc:	b1b0      	cbz	r0, 80071fc <_svfiprintf_r+0x110>
 80071ce:	9207      	str	r2, [sp, #28]
 80071d0:	e014      	b.n	80071fc <_svfiprintf_r+0x110>
 80071d2:	eba0 0308 	sub.w	r3, r0, r8
 80071d6:	fa09 f303 	lsl.w	r3, r9, r3
 80071da:	4313      	orrs	r3, r2
 80071dc:	9304      	str	r3, [sp, #16]
 80071de:	46a2      	mov	sl, r4
 80071e0:	e7d2      	b.n	8007188 <_svfiprintf_r+0x9c>
 80071e2:	9b03      	ldr	r3, [sp, #12]
 80071e4:	1d19      	adds	r1, r3, #4
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	9103      	str	r1, [sp, #12]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	bfbb      	ittet	lt
 80071ee:	425b      	neglt	r3, r3
 80071f0:	f042 0202 	orrlt.w	r2, r2, #2
 80071f4:	9307      	strge	r3, [sp, #28]
 80071f6:	9307      	strlt	r3, [sp, #28]
 80071f8:	bfb8      	it	lt
 80071fa:	9204      	strlt	r2, [sp, #16]
 80071fc:	7823      	ldrb	r3, [r4, #0]
 80071fe:	2b2e      	cmp	r3, #46	; 0x2e
 8007200:	d10c      	bne.n	800721c <_svfiprintf_r+0x130>
 8007202:	7863      	ldrb	r3, [r4, #1]
 8007204:	2b2a      	cmp	r3, #42	; 0x2a
 8007206:	d134      	bne.n	8007272 <_svfiprintf_r+0x186>
 8007208:	9b03      	ldr	r3, [sp, #12]
 800720a:	1d1a      	adds	r2, r3, #4
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	9203      	str	r2, [sp, #12]
 8007210:	2b00      	cmp	r3, #0
 8007212:	bfb8      	it	lt
 8007214:	f04f 33ff 	movlt.w	r3, #4294967295
 8007218:	3402      	adds	r4, #2
 800721a:	9305      	str	r3, [sp, #20]
 800721c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80072e4 <_svfiprintf_r+0x1f8>
 8007220:	7821      	ldrb	r1, [r4, #0]
 8007222:	2203      	movs	r2, #3
 8007224:	4650      	mov	r0, sl
 8007226:	f7f9 f873 	bl	8000310 <memchr>
 800722a:	b138      	cbz	r0, 800723c <_svfiprintf_r+0x150>
 800722c:	9b04      	ldr	r3, [sp, #16]
 800722e:	eba0 000a 	sub.w	r0, r0, sl
 8007232:	2240      	movs	r2, #64	; 0x40
 8007234:	4082      	lsls	r2, r0
 8007236:	4313      	orrs	r3, r2
 8007238:	3401      	adds	r4, #1
 800723a:	9304      	str	r3, [sp, #16]
 800723c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007240:	4825      	ldr	r0, [pc, #148]	; (80072d8 <_svfiprintf_r+0x1ec>)
 8007242:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007246:	2206      	movs	r2, #6
 8007248:	f7f9 f862 	bl	8000310 <memchr>
 800724c:	2800      	cmp	r0, #0
 800724e:	d038      	beq.n	80072c2 <_svfiprintf_r+0x1d6>
 8007250:	4b22      	ldr	r3, [pc, #136]	; (80072dc <_svfiprintf_r+0x1f0>)
 8007252:	bb1b      	cbnz	r3, 800729c <_svfiprintf_r+0x1b0>
 8007254:	9b03      	ldr	r3, [sp, #12]
 8007256:	3307      	adds	r3, #7
 8007258:	f023 0307 	bic.w	r3, r3, #7
 800725c:	3308      	adds	r3, #8
 800725e:	9303      	str	r3, [sp, #12]
 8007260:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007262:	4433      	add	r3, r6
 8007264:	9309      	str	r3, [sp, #36]	; 0x24
 8007266:	e768      	b.n	800713a <_svfiprintf_r+0x4e>
 8007268:	fb0c 3202 	mla	r2, ip, r2, r3
 800726c:	460c      	mov	r4, r1
 800726e:	2001      	movs	r0, #1
 8007270:	e7a6      	b.n	80071c0 <_svfiprintf_r+0xd4>
 8007272:	2300      	movs	r3, #0
 8007274:	3401      	adds	r4, #1
 8007276:	9305      	str	r3, [sp, #20]
 8007278:	4619      	mov	r1, r3
 800727a:	f04f 0c0a 	mov.w	ip, #10
 800727e:	4620      	mov	r0, r4
 8007280:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007284:	3a30      	subs	r2, #48	; 0x30
 8007286:	2a09      	cmp	r2, #9
 8007288:	d903      	bls.n	8007292 <_svfiprintf_r+0x1a6>
 800728a:	2b00      	cmp	r3, #0
 800728c:	d0c6      	beq.n	800721c <_svfiprintf_r+0x130>
 800728e:	9105      	str	r1, [sp, #20]
 8007290:	e7c4      	b.n	800721c <_svfiprintf_r+0x130>
 8007292:	fb0c 2101 	mla	r1, ip, r1, r2
 8007296:	4604      	mov	r4, r0
 8007298:	2301      	movs	r3, #1
 800729a:	e7f0      	b.n	800727e <_svfiprintf_r+0x192>
 800729c:	ab03      	add	r3, sp, #12
 800729e:	9300      	str	r3, [sp, #0]
 80072a0:	462a      	mov	r2, r5
 80072a2:	4b0f      	ldr	r3, [pc, #60]	; (80072e0 <_svfiprintf_r+0x1f4>)
 80072a4:	a904      	add	r1, sp, #16
 80072a6:	4638      	mov	r0, r7
 80072a8:	f3af 8000 	nop.w
 80072ac:	1c42      	adds	r2, r0, #1
 80072ae:	4606      	mov	r6, r0
 80072b0:	d1d6      	bne.n	8007260 <_svfiprintf_r+0x174>
 80072b2:	89ab      	ldrh	r3, [r5, #12]
 80072b4:	065b      	lsls	r3, r3, #25
 80072b6:	f53f af2d 	bmi.w	8007114 <_svfiprintf_r+0x28>
 80072ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80072bc:	b01d      	add	sp, #116	; 0x74
 80072be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072c2:	ab03      	add	r3, sp, #12
 80072c4:	9300      	str	r3, [sp, #0]
 80072c6:	462a      	mov	r2, r5
 80072c8:	4b05      	ldr	r3, [pc, #20]	; (80072e0 <_svfiprintf_r+0x1f4>)
 80072ca:	a904      	add	r1, sp, #16
 80072cc:	4638      	mov	r0, r7
 80072ce:	f000 f879 	bl	80073c4 <_printf_i>
 80072d2:	e7eb      	b.n	80072ac <_svfiprintf_r+0x1c0>
 80072d4:	08007780 	.word	0x08007780
 80072d8:	0800778a 	.word	0x0800778a
 80072dc:	00000000 	.word	0x00000000
 80072e0:	08007039 	.word	0x08007039
 80072e4:	08007786 	.word	0x08007786

080072e8 <_printf_common>:
 80072e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072ec:	4616      	mov	r6, r2
 80072ee:	4699      	mov	r9, r3
 80072f0:	688a      	ldr	r2, [r1, #8]
 80072f2:	690b      	ldr	r3, [r1, #16]
 80072f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80072f8:	4293      	cmp	r3, r2
 80072fa:	bfb8      	it	lt
 80072fc:	4613      	movlt	r3, r2
 80072fe:	6033      	str	r3, [r6, #0]
 8007300:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007304:	4607      	mov	r7, r0
 8007306:	460c      	mov	r4, r1
 8007308:	b10a      	cbz	r2, 800730e <_printf_common+0x26>
 800730a:	3301      	adds	r3, #1
 800730c:	6033      	str	r3, [r6, #0]
 800730e:	6823      	ldr	r3, [r4, #0]
 8007310:	0699      	lsls	r1, r3, #26
 8007312:	bf42      	ittt	mi
 8007314:	6833      	ldrmi	r3, [r6, #0]
 8007316:	3302      	addmi	r3, #2
 8007318:	6033      	strmi	r3, [r6, #0]
 800731a:	6825      	ldr	r5, [r4, #0]
 800731c:	f015 0506 	ands.w	r5, r5, #6
 8007320:	d106      	bne.n	8007330 <_printf_common+0x48>
 8007322:	f104 0a19 	add.w	sl, r4, #25
 8007326:	68e3      	ldr	r3, [r4, #12]
 8007328:	6832      	ldr	r2, [r6, #0]
 800732a:	1a9b      	subs	r3, r3, r2
 800732c:	42ab      	cmp	r3, r5
 800732e:	dc26      	bgt.n	800737e <_printf_common+0x96>
 8007330:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007334:	1e13      	subs	r3, r2, #0
 8007336:	6822      	ldr	r2, [r4, #0]
 8007338:	bf18      	it	ne
 800733a:	2301      	movne	r3, #1
 800733c:	0692      	lsls	r2, r2, #26
 800733e:	d42b      	bmi.n	8007398 <_printf_common+0xb0>
 8007340:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007344:	4649      	mov	r1, r9
 8007346:	4638      	mov	r0, r7
 8007348:	47c0      	blx	r8
 800734a:	3001      	adds	r0, #1
 800734c:	d01e      	beq.n	800738c <_printf_common+0xa4>
 800734e:	6823      	ldr	r3, [r4, #0]
 8007350:	6922      	ldr	r2, [r4, #16]
 8007352:	f003 0306 	and.w	r3, r3, #6
 8007356:	2b04      	cmp	r3, #4
 8007358:	bf02      	ittt	eq
 800735a:	68e5      	ldreq	r5, [r4, #12]
 800735c:	6833      	ldreq	r3, [r6, #0]
 800735e:	1aed      	subeq	r5, r5, r3
 8007360:	68a3      	ldr	r3, [r4, #8]
 8007362:	bf0c      	ite	eq
 8007364:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007368:	2500      	movne	r5, #0
 800736a:	4293      	cmp	r3, r2
 800736c:	bfc4      	itt	gt
 800736e:	1a9b      	subgt	r3, r3, r2
 8007370:	18ed      	addgt	r5, r5, r3
 8007372:	2600      	movs	r6, #0
 8007374:	341a      	adds	r4, #26
 8007376:	42b5      	cmp	r5, r6
 8007378:	d11a      	bne.n	80073b0 <_printf_common+0xc8>
 800737a:	2000      	movs	r0, #0
 800737c:	e008      	b.n	8007390 <_printf_common+0xa8>
 800737e:	2301      	movs	r3, #1
 8007380:	4652      	mov	r2, sl
 8007382:	4649      	mov	r1, r9
 8007384:	4638      	mov	r0, r7
 8007386:	47c0      	blx	r8
 8007388:	3001      	adds	r0, #1
 800738a:	d103      	bne.n	8007394 <_printf_common+0xac>
 800738c:	f04f 30ff 	mov.w	r0, #4294967295
 8007390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007394:	3501      	adds	r5, #1
 8007396:	e7c6      	b.n	8007326 <_printf_common+0x3e>
 8007398:	18e1      	adds	r1, r4, r3
 800739a:	1c5a      	adds	r2, r3, #1
 800739c:	2030      	movs	r0, #48	; 0x30
 800739e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80073a2:	4422      	add	r2, r4
 80073a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80073a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80073ac:	3302      	adds	r3, #2
 80073ae:	e7c7      	b.n	8007340 <_printf_common+0x58>
 80073b0:	2301      	movs	r3, #1
 80073b2:	4622      	mov	r2, r4
 80073b4:	4649      	mov	r1, r9
 80073b6:	4638      	mov	r0, r7
 80073b8:	47c0      	blx	r8
 80073ba:	3001      	adds	r0, #1
 80073bc:	d0e6      	beq.n	800738c <_printf_common+0xa4>
 80073be:	3601      	adds	r6, #1
 80073c0:	e7d9      	b.n	8007376 <_printf_common+0x8e>
	...

080073c4 <_printf_i>:
 80073c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073c8:	7e0f      	ldrb	r7, [r1, #24]
 80073ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80073cc:	2f78      	cmp	r7, #120	; 0x78
 80073ce:	4691      	mov	r9, r2
 80073d0:	4680      	mov	r8, r0
 80073d2:	460c      	mov	r4, r1
 80073d4:	469a      	mov	sl, r3
 80073d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80073da:	d807      	bhi.n	80073ec <_printf_i+0x28>
 80073dc:	2f62      	cmp	r7, #98	; 0x62
 80073de:	d80a      	bhi.n	80073f6 <_printf_i+0x32>
 80073e0:	2f00      	cmp	r7, #0
 80073e2:	f000 80d4 	beq.w	800758e <_printf_i+0x1ca>
 80073e6:	2f58      	cmp	r7, #88	; 0x58
 80073e8:	f000 80c0 	beq.w	800756c <_printf_i+0x1a8>
 80073ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80073f4:	e03a      	b.n	800746c <_printf_i+0xa8>
 80073f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80073fa:	2b15      	cmp	r3, #21
 80073fc:	d8f6      	bhi.n	80073ec <_printf_i+0x28>
 80073fe:	a101      	add	r1, pc, #4	; (adr r1, 8007404 <_printf_i+0x40>)
 8007400:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007404:	0800745d 	.word	0x0800745d
 8007408:	08007471 	.word	0x08007471
 800740c:	080073ed 	.word	0x080073ed
 8007410:	080073ed 	.word	0x080073ed
 8007414:	080073ed 	.word	0x080073ed
 8007418:	080073ed 	.word	0x080073ed
 800741c:	08007471 	.word	0x08007471
 8007420:	080073ed 	.word	0x080073ed
 8007424:	080073ed 	.word	0x080073ed
 8007428:	080073ed 	.word	0x080073ed
 800742c:	080073ed 	.word	0x080073ed
 8007430:	08007575 	.word	0x08007575
 8007434:	0800749d 	.word	0x0800749d
 8007438:	0800752f 	.word	0x0800752f
 800743c:	080073ed 	.word	0x080073ed
 8007440:	080073ed 	.word	0x080073ed
 8007444:	08007597 	.word	0x08007597
 8007448:	080073ed 	.word	0x080073ed
 800744c:	0800749d 	.word	0x0800749d
 8007450:	080073ed 	.word	0x080073ed
 8007454:	080073ed 	.word	0x080073ed
 8007458:	08007537 	.word	0x08007537
 800745c:	682b      	ldr	r3, [r5, #0]
 800745e:	1d1a      	adds	r2, r3, #4
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	602a      	str	r2, [r5, #0]
 8007464:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007468:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800746c:	2301      	movs	r3, #1
 800746e:	e09f      	b.n	80075b0 <_printf_i+0x1ec>
 8007470:	6820      	ldr	r0, [r4, #0]
 8007472:	682b      	ldr	r3, [r5, #0]
 8007474:	0607      	lsls	r7, r0, #24
 8007476:	f103 0104 	add.w	r1, r3, #4
 800747a:	6029      	str	r1, [r5, #0]
 800747c:	d501      	bpl.n	8007482 <_printf_i+0xbe>
 800747e:	681e      	ldr	r6, [r3, #0]
 8007480:	e003      	b.n	800748a <_printf_i+0xc6>
 8007482:	0646      	lsls	r6, r0, #25
 8007484:	d5fb      	bpl.n	800747e <_printf_i+0xba>
 8007486:	f9b3 6000 	ldrsh.w	r6, [r3]
 800748a:	2e00      	cmp	r6, #0
 800748c:	da03      	bge.n	8007496 <_printf_i+0xd2>
 800748e:	232d      	movs	r3, #45	; 0x2d
 8007490:	4276      	negs	r6, r6
 8007492:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007496:	485a      	ldr	r0, [pc, #360]	; (8007600 <_printf_i+0x23c>)
 8007498:	230a      	movs	r3, #10
 800749a:	e012      	b.n	80074c2 <_printf_i+0xfe>
 800749c:	682b      	ldr	r3, [r5, #0]
 800749e:	6820      	ldr	r0, [r4, #0]
 80074a0:	1d19      	adds	r1, r3, #4
 80074a2:	6029      	str	r1, [r5, #0]
 80074a4:	0605      	lsls	r5, r0, #24
 80074a6:	d501      	bpl.n	80074ac <_printf_i+0xe8>
 80074a8:	681e      	ldr	r6, [r3, #0]
 80074aa:	e002      	b.n	80074b2 <_printf_i+0xee>
 80074ac:	0641      	lsls	r1, r0, #25
 80074ae:	d5fb      	bpl.n	80074a8 <_printf_i+0xe4>
 80074b0:	881e      	ldrh	r6, [r3, #0]
 80074b2:	4853      	ldr	r0, [pc, #332]	; (8007600 <_printf_i+0x23c>)
 80074b4:	2f6f      	cmp	r7, #111	; 0x6f
 80074b6:	bf0c      	ite	eq
 80074b8:	2308      	moveq	r3, #8
 80074ba:	230a      	movne	r3, #10
 80074bc:	2100      	movs	r1, #0
 80074be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80074c2:	6865      	ldr	r5, [r4, #4]
 80074c4:	60a5      	str	r5, [r4, #8]
 80074c6:	2d00      	cmp	r5, #0
 80074c8:	bfa2      	ittt	ge
 80074ca:	6821      	ldrge	r1, [r4, #0]
 80074cc:	f021 0104 	bicge.w	r1, r1, #4
 80074d0:	6021      	strge	r1, [r4, #0]
 80074d2:	b90e      	cbnz	r6, 80074d8 <_printf_i+0x114>
 80074d4:	2d00      	cmp	r5, #0
 80074d6:	d04b      	beq.n	8007570 <_printf_i+0x1ac>
 80074d8:	4615      	mov	r5, r2
 80074da:	fbb6 f1f3 	udiv	r1, r6, r3
 80074de:	fb03 6711 	mls	r7, r3, r1, r6
 80074e2:	5dc7      	ldrb	r7, [r0, r7]
 80074e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80074e8:	4637      	mov	r7, r6
 80074ea:	42bb      	cmp	r3, r7
 80074ec:	460e      	mov	r6, r1
 80074ee:	d9f4      	bls.n	80074da <_printf_i+0x116>
 80074f0:	2b08      	cmp	r3, #8
 80074f2:	d10b      	bne.n	800750c <_printf_i+0x148>
 80074f4:	6823      	ldr	r3, [r4, #0]
 80074f6:	07de      	lsls	r6, r3, #31
 80074f8:	d508      	bpl.n	800750c <_printf_i+0x148>
 80074fa:	6923      	ldr	r3, [r4, #16]
 80074fc:	6861      	ldr	r1, [r4, #4]
 80074fe:	4299      	cmp	r1, r3
 8007500:	bfde      	ittt	le
 8007502:	2330      	movle	r3, #48	; 0x30
 8007504:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007508:	f105 35ff 	addle.w	r5, r5, #4294967295
 800750c:	1b52      	subs	r2, r2, r5
 800750e:	6122      	str	r2, [r4, #16]
 8007510:	f8cd a000 	str.w	sl, [sp]
 8007514:	464b      	mov	r3, r9
 8007516:	aa03      	add	r2, sp, #12
 8007518:	4621      	mov	r1, r4
 800751a:	4640      	mov	r0, r8
 800751c:	f7ff fee4 	bl	80072e8 <_printf_common>
 8007520:	3001      	adds	r0, #1
 8007522:	d14a      	bne.n	80075ba <_printf_i+0x1f6>
 8007524:	f04f 30ff 	mov.w	r0, #4294967295
 8007528:	b004      	add	sp, #16
 800752a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800752e:	6823      	ldr	r3, [r4, #0]
 8007530:	f043 0320 	orr.w	r3, r3, #32
 8007534:	6023      	str	r3, [r4, #0]
 8007536:	4833      	ldr	r0, [pc, #204]	; (8007604 <_printf_i+0x240>)
 8007538:	2778      	movs	r7, #120	; 0x78
 800753a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800753e:	6823      	ldr	r3, [r4, #0]
 8007540:	6829      	ldr	r1, [r5, #0]
 8007542:	061f      	lsls	r7, r3, #24
 8007544:	f851 6b04 	ldr.w	r6, [r1], #4
 8007548:	d402      	bmi.n	8007550 <_printf_i+0x18c>
 800754a:	065f      	lsls	r7, r3, #25
 800754c:	bf48      	it	mi
 800754e:	b2b6      	uxthmi	r6, r6
 8007550:	07df      	lsls	r7, r3, #31
 8007552:	bf48      	it	mi
 8007554:	f043 0320 	orrmi.w	r3, r3, #32
 8007558:	6029      	str	r1, [r5, #0]
 800755a:	bf48      	it	mi
 800755c:	6023      	strmi	r3, [r4, #0]
 800755e:	b91e      	cbnz	r6, 8007568 <_printf_i+0x1a4>
 8007560:	6823      	ldr	r3, [r4, #0]
 8007562:	f023 0320 	bic.w	r3, r3, #32
 8007566:	6023      	str	r3, [r4, #0]
 8007568:	2310      	movs	r3, #16
 800756a:	e7a7      	b.n	80074bc <_printf_i+0xf8>
 800756c:	4824      	ldr	r0, [pc, #144]	; (8007600 <_printf_i+0x23c>)
 800756e:	e7e4      	b.n	800753a <_printf_i+0x176>
 8007570:	4615      	mov	r5, r2
 8007572:	e7bd      	b.n	80074f0 <_printf_i+0x12c>
 8007574:	682b      	ldr	r3, [r5, #0]
 8007576:	6826      	ldr	r6, [r4, #0]
 8007578:	6961      	ldr	r1, [r4, #20]
 800757a:	1d18      	adds	r0, r3, #4
 800757c:	6028      	str	r0, [r5, #0]
 800757e:	0635      	lsls	r5, r6, #24
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	d501      	bpl.n	8007588 <_printf_i+0x1c4>
 8007584:	6019      	str	r1, [r3, #0]
 8007586:	e002      	b.n	800758e <_printf_i+0x1ca>
 8007588:	0670      	lsls	r0, r6, #25
 800758a:	d5fb      	bpl.n	8007584 <_printf_i+0x1c0>
 800758c:	8019      	strh	r1, [r3, #0]
 800758e:	2300      	movs	r3, #0
 8007590:	6123      	str	r3, [r4, #16]
 8007592:	4615      	mov	r5, r2
 8007594:	e7bc      	b.n	8007510 <_printf_i+0x14c>
 8007596:	682b      	ldr	r3, [r5, #0]
 8007598:	1d1a      	adds	r2, r3, #4
 800759a:	602a      	str	r2, [r5, #0]
 800759c:	681d      	ldr	r5, [r3, #0]
 800759e:	6862      	ldr	r2, [r4, #4]
 80075a0:	2100      	movs	r1, #0
 80075a2:	4628      	mov	r0, r5
 80075a4:	f7f8 feb4 	bl	8000310 <memchr>
 80075a8:	b108      	cbz	r0, 80075ae <_printf_i+0x1ea>
 80075aa:	1b40      	subs	r0, r0, r5
 80075ac:	6060      	str	r0, [r4, #4]
 80075ae:	6863      	ldr	r3, [r4, #4]
 80075b0:	6123      	str	r3, [r4, #16]
 80075b2:	2300      	movs	r3, #0
 80075b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075b8:	e7aa      	b.n	8007510 <_printf_i+0x14c>
 80075ba:	6923      	ldr	r3, [r4, #16]
 80075bc:	462a      	mov	r2, r5
 80075be:	4649      	mov	r1, r9
 80075c0:	4640      	mov	r0, r8
 80075c2:	47d0      	blx	sl
 80075c4:	3001      	adds	r0, #1
 80075c6:	d0ad      	beq.n	8007524 <_printf_i+0x160>
 80075c8:	6823      	ldr	r3, [r4, #0]
 80075ca:	079b      	lsls	r3, r3, #30
 80075cc:	d413      	bmi.n	80075f6 <_printf_i+0x232>
 80075ce:	68e0      	ldr	r0, [r4, #12]
 80075d0:	9b03      	ldr	r3, [sp, #12]
 80075d2:	4298      	cmp	r0, r3
 80075d4:	bfb8      	it	lt
 80075d6:	4618      	movlt	r0, r3
 80075d8:	e7a6      	b.n	8007528 <_printf_i+0x164>
 80075da:	2301      	movs	r3, #1
 80075dc:	4632      	mov	r2, r6
 80075de:	4649      	mov	r1, r9
 80075e0:	4640      	mov	r0, r8
 80075e2:	47d0      	blx	sl
 80075e4:	3001      	adds	r0, #1
 80075e6:	d09d      	beq.n	8007524 <_printf_i+0x160>
 80075e8:	3501      	adds	r5, #1
 80075ea:	68e3      	ldr	r3, [r4, #12]
 80075ec:	9903      	ldr	r1, [sp, #12]
 80075ee:	1a5b      	subs	r3, r3, r1
 80075f0:	42ab      	cmp	r3, r5
 80075f2:	dcf2      	bgt.n	80075da <_printf_i+0x216>
 80075f4:	e7eb      	b.n	80075ce <_printf_i+0x20a>
 80075f6:	2500      	movs	r5, #0
 80075f8:	f104 0619 	add.w	r6, r4, #25
 80075fc:	e7f5      	b.n	80075ea <_printf_i+0x226>
 80075fe:	bf00      	nop
 8007600:	08007791 	.word	0x08007791
 8007604:	080077a2 	.word	0x080077a2

08007608 <memmove>:
 8007608:	4288      	cmp	r0, r1
 800760a:	b510      	push	{r4, lr}
 800760c:	eb01 0402 	add.w	r4, r1, r2
 8007610:	d902      	bls.n	8007618 <memmove+0x10>
 8007612:	4284      	cmp	r4, r0
 8007614:	4623      	mov	r3, r4
 8007616:	d807      	bhi.n	8007628 <memmove+0x20>
 8007618:	1e43      	subs	r3, r0, #1
 800761a:	42a1      	cmp	r1, r4
 800761c:	d008      	beq.n	8007630 <memmove+0x28>
 800761e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007622:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007626:	e7f8      	b.n	800761a <memmove+0x12>
 8007628:	4402      	add	r2, r0
 800762a:	4601      	mov	r1, r0
 800762c:	428a      	cmp	r2, r1
 800762e:	d100      	bne.n	8007632 <memmove+0x2a>
 8007630:	bd10      	pop	{r4, pc}
 8007632:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007636:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800763a:	e7f7      	b.n	800762c <memmove+0x24>

0800763c <_sbrk_r>:
 800763c:	b538      	push	{r3, r4, r5, lr}
 800763e:	4d06      	ldr	r5, [pc, #24]	; (8007658 <_sbrk_r+0x1c>)
 8007640:	2300      	movs	r3, #0
 8007642:	4604      	mov	r4, r0
 8007644:	4608      	mov	r0, r1
 8007646:	602b      	str	r3, [r5, #0]
 8007648:	f7f9 fc62 	bl	8000f10 <_sbrk>
 800764c:	1c43      	adds	r3, r0, #1
 800764e:	d102      	bne.n	8007656 <_sbrk_r+0x1a>
 8007650:	682b      	ldr	r3, [r5, #0]
 8007652:	b103      	cbz	r3, 8007656 <_sbrk_r+0x1a>
 8007654:	6023      	str	r3, [r4, #0]
 8007656:	bd38      	pop	{r3, r4, r5, pc}
 8007658:	24000390 	.word	0x24000390

0800765c <_realloc_r>:
 800765c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007660:	4680      	mov	r8, r0
 8007662:	4614      	mov	r4, r2
 8007664:	460e      	mov	r6, r1
 8007666:	b921      	cbnz	r1, 8007672 <_realloc_r+0x16>
 8007668:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800766c:	4611      	mov	r1, r2
 800766e:	f7ff bc57 	b.w	8006f20 <_malloc_r>
 8007672:	b92a      	cbnz	r2, 8007680 <_realloc_r+0x24>
 8007674:	f7ff fbe8 	bl	8006e48 <_free_r>
 8007678:	4625      	mov	r5, r4
 800767a:	4628      	mov	r0, r5
 800767c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007680:	f000 f81b 	bl	80076ba <_malloc_usable_size_r>
 8007684:	4284      	cmp	r4, r0
 8007686:	4607      	mov	r7, r0
 8007688:	d802      	bhi.n	8007690 <_realloc_r+0x34>
 800768a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800768e:	d812      	bhi.n	80076b6 <_realloc_r+0x5a>
 8007690:	4621      	mov	r1, r4
 8007692:	4640      	mov	r0, r8
 8007694:	f7ff fc44 	bl	8006f20 <_malloc_r>
 8007698:	4605      	mov	r5, r0
 800769a:	2800      	cmp	r0, #0
 800769c:	d0ed      	beq.n	800767a <_realloc_r+0x1e>
 800769e:	42bc      	cmp	r4, r7
 80076a0:	4622      	mov	r2, r4
 80076a2:	4631      	mov	r1, r6
 80076a4:	bf28      	it	cs
 80076a6:	463a      	movcs	r2, r7
 80076a8:	f7ff fbc0 	bl	8006e2c <memcpy>
 80076ac:	4631      	mov	r1, r6
 80076ae:	4640      	mov	r0, r8
 80076b0:	f7ff fbca 	bl	8006e48 <_free_r>
 80076b4:	e7e1      	b.n	800767a <_realloc_r+0x1e>
 80076b6:	4635      	mov	r5, r6
 80076b8:	e7df      	b.n	800767a <_realloc_r+0x1e>

080076ba <_malloc_usable_size_r>:
 80076ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076be:	1f18      	subs	r0, r3, #4
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	bfbc      	itt	lt
 80076c4:	580b      	ldrlt	r3, [r1, r0]
 80076c6:	18c0      	addlt	r0, r0, r3
 80076c8:	4770      	bx	lr
	...

080076cc <_init>:
 80076cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ce:	bf00      	nop
 80076d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076d2:	bc08      	pop	{r3}
 80076d4:	469e      	mov	lr, r3
 80076d6:	4770      	bx	lr

080076d8 <_fini>:
 80076d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076da:	bf00      	nop
 80076dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076de:	bc08      	pop	{r3}
 80076e0:	469e      	mov	lr, r3
 80076e2:	4770      	bx	lr
